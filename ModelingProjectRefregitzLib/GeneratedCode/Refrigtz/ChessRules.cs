//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Refrigtz
{
	using System;
	using System.Collections.Generic;
	using System.Drawing;
	using System.Linq;
	using System.Text;

	internal class ChessRules
	{
		private int Column;

		private static int Order;

		private int Row;

		private IEnumerable<int> Table;

		public static bool BigKingBridgeBrown;

		public static bool BigKingBridgeGray;

		public static bool BridgeActBrown;

		public static bool BridgeActGray;

		public static bool BridgeKingAllowedBrown;

		public static bool BridgeKingAllowedGray;

		public static int CurrentOrder;

		public static bool ExistInDestinationEnemy;

		private int Kind;

		private int KindNA;

		public static bool KingAttacker;

		public static bool KingBridgeBrown;

		public static bool KingBridgeGray;

		public static bool KishAchmazIgnoreSelfThingBetweenTowEnemyKing;

		public static bool KishAchmazIgnoreSelfThingBetweenTowEnemyKingHaveSupporter;

		public static int KishAchmazIgnoreSelfThingBetweenTowEnemyKingHaveSupporterNumber;

		public static bool KishBrown;

		public static bool KishBrownAchmaz;

		public static bool KishBrownAchmazFirstTimesOcured;

		public static bool KishBrownRemovable;

		public static int KishBrownRemovableValueColumnj;

		public static int KishBrownRemovableValueColumnjj;

		public static int KishBrownRemovableValueRowi;

		public static int KishBrownRemovableValueRowii;

		public static bool KishGray;

		public static bool KishGrayAchmaz;

		public static bool KishGrayAchmazFirstTimesOcured;

		public static bool KishGrayRemovable;

		public static int KishGrayRemovableValueColumni;

		public static int KishGrayRemovableValueColumnjj;

		public static int KishGrayRemovableValueRowi;

		public static int KishGrayRemovableValueRowii;

		public static bool MateBrown;

		public static bool MateGray;

		public static bool SmallKingBridgeBrown;

		public static bool SmallKingBridgeGray;

		private static void Log(Exception ex)
		{
			throw new System.NotImplementedException();
		}

		public ChessRules(int oRDER)
		{
		}

		public ChessRules(int Ki, IEnumerable<int> A, int Ord, int i, int j)
		{
		}

		public virtual bool AchmazKingMove(int Order, IEnumerable<int> Table, bool DoIgnore)
		{
			throw new System.NotImplementedException();
		}

		private bool ArrayInList(List<int> List, IEnumerable<int> A)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool BridgeKing(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, int Ki)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool BridgeRules(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, bool ExistInDestinationEnemy, int Ki)
		{
			throw new System.NotImplementedException();
		}

		public static string CreateStatistic(IEnumerable<int> Tab, int Movments, int SourceThings, int Column, int Row, bool Hit, int HitThings, bool BridgeKing, bool SodierConvert)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool ElefantRules(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, bool ExistInDestinationEnemy, int Ki)
		{
			throw new System.NotImplementedException();
		}

		private bool ExistSelfHome(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, int Ki)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool FindAThing(IEnumerable<int> Table, ref int Row, ref int Column, int Thing, bool BeMovable, List<int> List)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool FindBrownKing(IEnumerable<int> Table, ref int Row, ref int Column)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool FindGrayKing(IEnumerable<int> Table, ref int Row, ref int Column)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool HourseRules(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, bool ExistInDestinationEnemy)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool KingRules(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, bool ExistInDestinationEnemy, int Ki)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Kish(IEnumerable<int> Table, int Order)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool KishConstructor(Color color, int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, int Ki, int Order)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool KishRemovableByAttack(IEnumerable<int> Table, int Order)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Mate(IEnumerable<int> Tab, int Order)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool MinisterRules(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, bool ExistInDestinationEnemy, int Ki)
		{
			throw new System.NotImplementedException();
		}

		private static string RowAlphabet(int i)
		{
			throw new System.NotImplementedException();
		}

		private bool Rule(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, bool ExistInDestinationEnemy, int Ki)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Rules(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, Color color, int Ki)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool SoldierRules(int RowFirst, int ColumnFirst, int RowSecond, int ColumnSecond, bool NotMoved, Color color, bool ExistInDestinationEnemy)
		{
			throw new System.NotImplementedException();
		}

		private static string ThingsAlphabet(int i)
		{
			throw new System.NotImplementedException();
		}

	}
}

