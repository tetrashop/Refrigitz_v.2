//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Refrigtz
{
	using LearningMachine;
	using RefrigtzAll;
	using System;
	using System.Collections.Generic;
	using System.Drawing;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;

	private class ThinkingChess
	{
		public static Int64 SomeExtremelyLargeNumber
		{
			get;
			set;
		}

		public static int BeginThread;

		public static int EndThread;

		private bool ExistingOfEnemyHiiting;

		private int IgnoreAchmaz;

		public int MateAStarGreedy;

		private bool MateOcuured;

		private int CurrentRow;

		private int CurrentColumn;

		public bool IsKish;

		public bool SelfMateAction;

		private bool AchamazCurrent;

		private bool InAttackedNotSelfSupported;

		private bool SelfSupported;

		private bool EnemyNotSupported;

		private bool InAttackedNotEnemySupported;

		public static int Sign;

		public static int Kind;

		public static Double MaxHuristicx;

		public static bool MovementsAStarGreedyHuristicFound;

		public static bool IgnoreSelfObjects;

		public static bool UsePenaltyRegardMechnisam;

		public static bool BestMovments;

		public static bool PredictHuristic;

		public static bool OnlySelf;

		public static bool AStarGreedyHuristic;

		public List<int> HitNumber;

		public static bool NotSolvedKingDanger;

		public static bool ThinkingRun;

		private int ThingsNumber;

		private int CurrentArray;

		public Double HuristicValue;

		public Double HuristicValueMovement;

		public Double HuristicValueSelfSupported;

		public Double HuristicValueAchmazKishMate;

		public bool ThinkingBegin;

		public bool ThinkingFinished;

		public int IndexSoldier;

		public int IndexElefant;

		public int IndexHourse;

		public int IndexBridge;

		public int IndexMinister;

		public int IndexKing;

		public static int Index;

		public static IEnumerable<int> RowColumn;

		public List<int> RowColumnSoldier;

		public List<int> RowColumnElefant;

		public List<int> RowColumnHourse;

		public List<int> RowColumnBridge;

		public List<int> RowColumnMinister;

		public List<int> RowColumnKing;

		public IEnumerable<int> Table;

		public List<int> HitNumberSoldier;

		public List<int> HitNumberElefant;

		public List<int> HitNumberHourse;

		public List<int> HitNumberBridge;

		public List<int> HitNumberMinister;

		public List<int> HitNumberKing;

		public IEnumerable<int> TableConst;

		public List<int> TableListSolder;

		public List<int> TableListElefant;

		public List<int> TableListHourse;

		public List<int> TableListBridge;

		public List<int> TableListMinister;

		public List<int> TableListKing;

		public List<Double> HuristicListSolder;

		public List<Double> HuristicListElefant;

		public List<Double> HuristicListHourse;

		public List<Double> HuristicListBridge;

		public List<Double> HuristicListMinister;

		public List<Double> HuristicListKing;

		public List<QuantumAtamata> PenaltyRegardListSolder;

		public List<QuantumAtamata> PenaltyRegardListElefant;

		public List<QuantumAtamata> PenaltyRegardListHourse;

		public List<QuantumAtamata> PenaltyRegardListBridge;

		public List<QuantumAtamata> PenaltyRegardListMinister;

		public List<QuantumAtamata> PenaltyRegardListKing;

		public int Max;

		public int Row;

		public int Column;

		private Color color;

		private int Order;

		public Task t;

		public List<AllDraw> AStarGreedy;

		public FormRefrigtz THIS;

		private static ParallelLoopResult result1;

		private static void Log(Exception ex)
		{
			throw new System.NotImplementedException();
		}

		public ThinkingChess(int ik, int j)
		{
		}

		public ThinkingChess(int i, int j, Color a, IEnumerable<int> Tab, int Ma, int Ord, bool ThinkingBeg, int CurA, int ThingN, ref FormRefrigtz TH)
		{
		}

		private IEnumerable<int> CloneATable(IEnumerable<int> Tab)
		{
			throw new System.NotImplementedException();
		}

		private IEnumerable<int> CloneAList(IEnumerable<int> Tab, int Count)
		{
			throw new System.NotImplementedException();
		}

		private IEnumerable<Double> CloneAList(IEnumerable<Double> Tab, int Count)
		{
			throw new System.NotImplementedException();
		}

		public virtual void Clone(ref ThinkingChess AA, ref FormRefrigtz THIS)
		{
			throw new System.NotImplementedException();
		}

		private int MaxOrderEnemyAndSelf(IEnumerable<int> Tab, int i, int j, int ii, int jj, int Order)
		{
			throw new System.NotImplementedException();
		}

		private Single HuristicAttack(IEnumerable<int> Table, int Order, Color a)
		{
			throw new System.NotImplementedException();
		}

		private Single HuristicReducsedAttack(IEnumerable<int> Table, int Order, Color a)
		{
			throw new System.NotImplementedException();
		}

		private int GetObjectValue(int Object)
		{
			throw new System.NotImplementedException();
		}

		private Single HuristicAchmaz(IEnumerable<int> Table, int Order, Color a)
		{
			throw new System.NotImplementedException();
		}

		private void HuristicHitting(IEnumerable<int> Tab, int i, int j, int Order, Color a, bool Hit)
		{
			throw new System.NotImplementedException();
		}

		private bool InAttackedEnemyNotSupporetd(IEnumerable<int> Tab, int Order, Color a, int iii, int jjj, int i, int j)
		{
			throw new System.NotImplementedException();
		}

		private bool InAttackedُSelfNotSupporetd(IEnumerable<int> Tab, int Order, Color a, int i, int j)
		{
			throw new System.NotImplementedException();
		}

		private Single HuristicSelfSupported(IEnumerable<int> Tab, int Order, Color a)
		{
			throw new System.NotImplementedException();
		}

		public static bool TableEqual(IEnumerable<int> Tab1, IEnumerable<int> Tab2)
		{
			throw new System.NotImplementedException();
		}

		public static bool ExistTableInList(IEnumerable<int> Tab, List<int> List, int Index)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Movable(IEnumerable<int> Table, int i, int j, int ii, int jj, Color a, int Order)
		{
			throw new System.NotImplementedException();
		}

		private Double SignOrderToPlate(int Order)
		{
			throw new System.NotImplementedException();
		}

		private bool IsCurrentStateIsDangreousForCurrentOrder(IEnumerable<int> Tabl, int Order, Color a)
		{
			throw new System.NotImplementedException();
		}

		private bool IsGardForCurrentMovmentsRemained(IEnumerable<int> Tab, int Order, Color a, int i, int j)
		{
			throw new System.NotImplementedException();
		}

		private bool IsGardForCurrentMovmentsAndIsNotMovable(IEnumerable<int> Tab, int Order, Color a, int i, int j)
		{
			throw new System.NotImplementedException();
		}

		private bool IsEnenmyInGardForCurrentMovmentsIsSuitable(IEnumerable<int> Tab, int Order, Color a, int i, int j)
		{
			throw new System.NotImplementedException();
		}

		public virtual void HuristicKishAndMate(IEnumerable<int> Table, Color a)
		{
			throw new System.NotImplementedException();
		}

		private int VeryFye(IEnumerable<int> Table, int Order, Color a)
		{
			throw new System.NotImplementedException();
		}

		public virtual void HeuristicDistabceOfCurrentMoveFromEnemyKing(IEnumerable<int> Tab, int Order, int ii, int jj)
		{
			throw new System.NotImplementedException();
		}

		public virtual Single HuristicMovment(IEnumerable<int> Table, Color a)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Attack(IEnumerable<int> Table, int i, int j, int ii, int jj, Color a, int Order)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Achmaz(IEnumerable<int> Tab, int i, int j, int ii, int jj, Color a, int Order)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Support(IEnumerable<int> Tab, int i, int j, int ii, int jj, Color a, int Order)
		{
			throw new System.NotImplementedException();
		}

		public virtual Double ReturnHuristic(int ii, int j)
		{
			throw new System.NotImplementedException();
		}

		private bool Scop(int i, int j, int ii, int jj, int Kind)
		{
			throw new System.NotImplementedException();
		}

		private bool IsCurrentMovmentSuitable(IEnumerable<int> Table, int ii, int jj, int iii, int jjj, int Order, Color a, ref int MostValue)
		{
			throw new System.NotImplementedException();
		}

		private bool IsAllTraversalHomeIsDangerous(IEnumerable<int> Table, int ii, int jj, int iii, int jjj, int Order, Color a)
		{
			throw new System.NotImplementedException();
		}

		public virtual void Thinking()
		{
			throw new System.NotImplementedException();
		}

	}
}

