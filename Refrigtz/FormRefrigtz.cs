/***********************************************************************************************
 * Main class of Form Inherited of Form Main in the C#.*****************************************
 * Ramin Edjlal*******************************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Mouse Event Handling Error*****************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Some Soldiers Loos Location  And Virutuallization at Click*********************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Some Codes Lines Frizes********************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Hit things Abnormal behaviour**************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Virtualization Things Error****************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * No Reason Logically For Equality of 'SoldierP' and 'Soldier'*******************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Problem of Sameness of Hit Enemys Solved.No Reason For Equality of 'Soldier' and 'SoldierP'RS--************(-+)
 * No Problem For Hiting**********************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Castles of Gray Color Conversion to Kings Brown********************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Castles Conversion To King Brown Abnormally no Reasonably**********************************CU*****0.88**1**Risk Control************************(*)
 * Color Conversion In Virtualization Hit Enemy***********************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Need To Find Enemy Detection on Current OrderPlate*****************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * CheckMate an Check Dosn't Work*******************************************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * No Movments By Computer********************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Illegal Virtualization. The Thinking By 'Alice' (My Computer) RefrigtzDLL.ChessRules Misleading********RS*****0.12**4**Managements and Cuation Programing**(+)
 * permutative Constant Heuristic Results******************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * In Existence of Adding Suported Heuristic Constant Heuristic Result Detection****************RS*****0.12**4**Managements and Cuation Programing**(+)
 * OrderPlate Not Configured******************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Non Color Hourse Hit Assignment Misleading(Abnormal)***************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Undetected Error Table Content Malfunction*************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * MalFunction Movments Greate than 5 by 'Alice'.*********************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * 'Check' Second Time 'Alice' MalFanction*****************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * 'Check' 'Alice' Mechnisam Failure***********************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 '* CheckMate' of Unsatisfied in 'Alice'***********************************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * CheckMate Dosn't Recognized.********************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Virtualization Filed (Not Responding) at Indpencdency State********************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Unable To Draw Refrigtz.Timer  Content at Tow Picture Box*******************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Refrigtz.Timer Working Hardly.**********************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Dead lock In Drawing Images.***************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Misleading Thread OrderPlate And Time Sharing**********************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Thinkings Taking a lot of Time.************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * AntiVirus Protextion and Existance Caused to Reduce Speed of Thinking and lead to Lose.****RS*****0.12**4**Managements and Cuation Programing**(+)
 * No Programatically Reason For Speed Reduction.*********************************************RS*****0.12**4**Managements and Cuation Programing**(+) 
 * Mybe Windows Filrewall Has no been correctly Arranges to reduce speed.*********************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Method on Leave not Work.******************************************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * OrderPlate Reader Table MalFunction.*******************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Wrong Sysntax To Read.*********************************************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Some Tables of Hitting Tow Person Are Missing.*********************************************__**************(_)
 * Some Syntaxes at Table Read Are Missing.***************************************************__**************(_)
 * Chess Refregitz Sometimes Not Responding due to Cpu Power Non Ability.*********************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Chess Refregitz Sometimes stop working.****************************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * 1395/1/16**********************************************************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * OrderPlate MalFunction.********************************************************************RS*****0.12**4**Managements and Cuation Programing**{+}
 * Virtualization Error.No Reason For MalFunctionla Operation of Program at Sysntax and Orde.*CU*****0.88**1**Risk Control************************{*}QC-OK.
 * Cause Sensitive Problems of 'Check' And 'CheckMate By 'Alice' is borring at StateCP.*************CU*****0.88**1**Risk Control************************{*}QC-OK.
 * Table Content Misleading.******************************************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Documentation Faulting On Removing Detials.************************************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Loading Games  to Continue failed Unreasonly.**********************************************CU*****0.88**1**Risk Control************************<*>QC-OK.
 * "Thread is dead.The state can not be accessed.".*******************************************CU*****0.88**1**Risk Control************************{*}QC-OK.
 * Illegal Syntax Mechanisam Detection By Genetic Algorithm.**********************************CU*****0.88**1**Risk Control************************<*>QC-Ok.
 * 'MaxCurrentMovmentsNumber' Changes Illegal to Reduced.*************************************CU*****0.88**1**Risk Control************************{*}QC-OK.
 * Arranagment Up-Down Changes caused to Born of Some Objects UnSupported Attractively.*******CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Table TableListAction Genetic Algorithm MalFunctionally Illegal Data.**********************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Castles King Insertion Overllaping Previous Enemy Movments of Person Movments.*************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Statisticer Loader and Acter Castles King Overview Failed.*********************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Castles King Continue With Illegal Movments at Statisticer.********************************CU*****0.88**1**Risk Control************************(*)QC-OK.
 * Calling of All Events From Pressing a Single Button.Mal Function of Database Leading.******CU*****0.88**1**Risk Control************************<*>QC_OK
 * Proccess Calling of Stockfish8 not run Comlpetely.*********************************************************************************************(*)QC_OK
 * Can not Send Arguments via Foriegn Sites Studies. Problem Misleading.**************************************************************************(*)QC_OK
 * Serialization and Deserialization Wrong Config vars conflict.**********************************************************************************(*)QC_OK
 * MalFunctionally break heart of Access Database Configuration Table.****************************************************************************(*)QC_OK
 * Parallleism occured Misfaulting in all Opetions of this work.**********************************************************************************(*)QC_BAD
 * Mal Function in Drawing some part of objects in somthings of games.****************************************************************************(*)QC_BAD
 * ***********************************************************************************************************
 * ***********************************************************************************************************
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.OleDb;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Media;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Refrigtz
{
    [Serializable]
    //Constructor
    public partial class FormRefrigtz : Form
    {
        bool NotFoundBegin = false;
        int[,] TabStor = null;
        bool PersonTmCall = true;
        //#pragma warning disable CS0414 // The field 'FormRefrigtz.Move' is assigned but its value is never used
        //#pragma warning disable CS0108 // 'FormRefrigtz.Move' hides inherited member 'Control.Move'. Use the new keyword if hiding was intended.
        int Move = 0;
        //#pragma warning restore CS0108 // 'FormRefrigtz.Move' hides inherited member 'Control.Move'. Use the new keyword if hiding was intended.
        //#pragma warning restore CS0414 // The field 'FormRefrigtz.Move' is assigned but its value is never used
        bool Deeperthandeeper = false;

        bool FOUND = false;

        //#pragma warning disable CS0414 // The field 'FormRefrigtz.LoadO' is assigned but its value is never used
        bool LoadO = false;
        //#pragma warning restore CS0414 // The field 'FormRefrigtz.LoadO' is assigned but its value is never used
        bool ExitM = false;
        public static int AllDrawKind = 0;//0,1,2,3,4,5,6
        public static String AllDrawKindString = "";

        bool MenueSelecte = false;
        String path3 = @"temp";
        String AllDrawReplacement = "";
        bool Sugar = false;
        public static bool Quantum = false;
        Double Store = 0;
        Double Count = 1;
        Int64 TimeElapsed = DateTime.Now.Hour * 3600000 + DateTime.Now.Minute * 60000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;
        Int64 FirstTime = DateTime.Now.Hour * 3600000 + DateTime.Now.Minute * 60000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;

        //Variables That to be Included at RefregitzDLL

        //Initiate Variables.
        String Out = "";
        bool LoadedDLL = false;
        bool WaitOn = true;
        String ComboBoxMaxLevelText = "";
        bool RemoveUncomStock = false;
        const string PieceToChar = "kqrnbp PBNRQK";
        int StockMovebase = 0;
        int FenCastling = -1;//0 for small Castling 1 for big Castling -1 for non Castling.
        int StockMove = 1;
        //Initiate Global Variable.
        //public bool DisableTemporarlyTimerUpdate = false;
        public bool ConvertWait = false;
        public double MaxHeuristicx = Double.MinValue;
        public bool MovementsAStarGreedyHeuristicFound = false;
        public bool IInoreSelfObjects = false;
        public bool UsePenaltyRegardMechnisam = false;
        public bool PredictHeuristic = false;
        public bool OnlySelf = false;
        public bool AStarGreedyHeuristic = false;
        public bool BestMovments = false;

        bool FullGame = false;
        static int GrayCountHiiting = 1;
        static int BrownCountHiiting = 17;
        List<PictureBox> ApList = new List<PictureBox>();
        public static int X1 = 0, Y1 = 0;
        public static int X2 = 0, Y2 = 0;
        public static bool Stockfish = false;
        bool SettingPRFALSE = false;
        public static bool ProfesionalWithComputer = false;
        public bool TimersSet = true;
        public static bool GameStarted = false;
        public bool ArrangmentsChanged = true;
        public static int MaxCurrentMovmentsNumber = 1;
        public static bool ErrorTrueMonitorFalse = true;
        [field: NonSerialized]
        Thread tM = null;
        bool Clicked = false;
        public static int MaxAStarGreedyHeuristicProgress = 0;
        public static String Root = System.IO.Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]);
        public bool MouseClicked = false;
        public static bool Blitz = false;
        DateTime PreviousTime;
        static bool LoadAG = false;
        static bool _1 = false;
        static bool _2 = false;
        static bool _3 = false;
        static bool _4 = false;
        public FormSelect Sec = new FormSelect();
        bool AllDrawLoad = false;
        [field: NonSerialized]
        Thread AllOperate = null;
        static bool PaintingPaused = false;
        //static bool PaintedPaused = false;
        //static bool UpdateConfigurationTableVal = false;
        static bool NewTable = false;
        [field: NonSerialized]
        OleDbConnection bookConn;
        [field: NonSerialized]
        OleDbCommand oleDbCmd = new OleDbCommand();
        [field: NonSerialized]
        private OleDbCommand oleDbCmdUser = new OleDbCommand();
        //Image TimerImage = null;
        [field: NonSerialized]
        Graphics g1 = null;
        //Image TimerImage1 = null;
        [field: NonSerialized]
        Graphics g2 = null;
        [field: NonSerialized]
        Graphics g = null;
        Image ChessTable = null;
        public static int LastRow = -1;
        public static int LastColumn = -1;
        public static int NextRow = -1;
        public static int NextColumn = -1;
        [field: NonSerialized]
        Thread t1 = null;
        [field: NonSerialized]
        Thread t2 = null;
        [field: NonSerialized]
        Thread t3 = null;
        [field: NonSerialized]
        Thread t4 = null;
        //Thread TTimerSet;
        public static bool LoadedTable = false;
        bool GrayWinner = false;
        bool BrownWiner = false;
        public Refrigtz.Timer TimerText = null;
        public Refrigtz.Timer GrayTimer = null;
        public Refrigtz.Timer BrownTimer = null;
        public static int MovmentsNumber = 0;
        public static int MovmentsNumberMax = 0;
        public static bool EndOfGame = false;
        bool Maximize = false;
        static int RowP = 0, ColP = 0, RowSource = 0, ColumnSource = 0;
        bool BobSection = false;
        bool AliceSection = false;
        public static bool Person = false;
        static int CurrentKind = 0;
        public static bool StateCC = false;//Computer With Computer
        public static bool StateCP = false;//Person With Computer
        public static bool StateGe = false;//For Genetic Games.
                                           //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        public RefrigtzDLL.AllDraw Draw;
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        public static int OrderPlate = 1;
        // int RefrigtzDLL.AllDraw.MouseClick;
        int Soldier;
        int Elefant;
        int Hourse;
        int Castle;
        int Minister;
        int King;
        float RowClickP = -1, ColumnClickP = -1;
        int RowClick = -1, ColumnClick = -1;
        float RowRealesedP = -1, ColumnRealeasedP = -1;
        float RowRealesed = -1, ColumnRealeased = -1;
        /*  public int[,] Table ={
              { -4, -3, -2, -5, -6, -2, -3, -4 },
              { -1, -1, -1, -1, -1, -1, -1, -1 },
              { 0, 0, 0, 0, 0, 0, 0, 0 },
              { 0, 0, 0, 0, 0, 0, 0, 0 },
              { 0, 0, 0, 0, 0, 0, 0, 0 },
              { 0, 0, 0, 0, 0, 0, 0, 0 },
              { 1, 1, 1, 1, 1, 1, 1, 1 },
              { 4, 3, 2, 5, 6, 2,3, 4 }};
         */
        public int[,] Table ={
            { -4, -1, 0, 0, 0, 0, 1, 4 },
            { -3, -1, 0, 0, 0, 0, 1, 3 },
            { -2, -1, 0, 0, 0, 0, 1, 2 },
            { -5, -1, 0, 0, 0, 0, 1, 5 },
            { -6, -1, 0, 0, 0, 0, 1, 6 },
            { -2, -1, 0, 0, 0, 0, 1, 2 },
            { -3, -1, 0, 0, 0, 0, 1, 3 },
            { -4, -1, 0, 0, 0, 0, 1, 4 }
            }; List<char> fenS = new List<char>("position fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\0");

        //FormRefrigtz THIs = null;
        String connParam = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + Root + "\\" + "Database\\CurrentBank.accdb;Persist Security Info=False; Jet OLEDB:Database Password='!HN#BGHHN&N$G$V4'";
        public bool LoadTree = false;
        //Thread tttt = null;
        //Thread ttt = null;
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        public QuantumRefrigiz.AllDraw DrawQ = null;
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        [field: NonSerialized]
        Process proc = new Process();

        //private System.Timers.Timer queueManagementTimer;
        //private System.Timers.Timer queueManagementTimerMove;
        //private System.Timers.Timer queueManagementTimerSetRefrigitDLL;
        //private System.Timers.Timer queueManagementTimerSetNodesCount;
        //private System.Timers.Timer queueManagementTimerSetTimer;


        //#pragma warning disable CS0414 // The field 'FormRefrigtz.AllDo' is assigned but its value is never used
        bool AllDo = false;
        //#pragma warning restore CS0414 // The field 'FormRefrigtz.AllDo' is assigned but its value is never used
        //#pragma warning disable CS0414 // The field 'FormRefrigtz.AllMove' is assigned but its value is never used
        bool AllMove = false;
        //#pragma warning restore CS0414 // The field 'FormRefrigtz.AllMove' is assigned but its value is never used
        //#pragma warning disable CS0414 // The field 'FormRefrigtz.SetDLL' is assigned but its value is never used
        bool SetDLL = false;
        //#pragma warning restore CS0414 // The field 'FormRefrigtz.SetDLL' is assigned but its value is never used
        //#pragma warning disable CS0414 // The field 'FormRefrigtz.SetNode' is assigned but its value is never used
        bool SetNode = false;
        //#pragma warning restore CS0414 // The field 'FormRefrigtz.SetNode' is assigned but its value is never used
        //#pragma warning disable CS0414 // The field 'FormRefrigtz.SetTimer' is assigned but its value is never used
        bool SetTimer = false;
        //#pragma warning restore CS0414 // The field 'FormRefrigtz.SetTimer' is assigned but its value is never used

        /*private void worker_DoWork()
        {
            queueManagementTimer = new System.Timers.Timer(500); 
            queueManagementTimer.Elapsed += OnQueueManagementTimerElapsed;
            queueManagementTimer.Enabled = true;
            queueManagementTimer.AutoReset = true;

        }
        private void worker_DoWorkMove()
        {
            queueManagementTimerMove = new System.Timers.Timer(500); 
            queueManagementTimerMove.Elapsed += OnQueueManagementTimerElapsedMove;
            queueManagementTimerMove.Enabled = true;
            queueManagementTimerMove.AutoReset = true;

        }
        private void worker_DoWorkDLL()
        {
            queueManagementTimerSetRefrigitDLL = new System.Timers.Timer(1); 
            queueManagementTimerSetRefrigitDLL.Elapsed += OnQueueManagementTimerElapsedSetRefrigitDLL;
            queueManagementTimerSetRefrigitDLL.Enabled = true;
            queueManagementTimerSetRefrigitDLL.AutoReset = true;

        }
        private void worker_DoWorkNodesCount()
        {
            queueManagementTimerSetNodesCount = new System.Timers.Timer(1); 
            queueManagementTimerSetNodesCount.Elapsed += OnQueueManagementTimerElapsedSetNodesCount;
            queueManagementTimerSetNodesCount.Enabled = true;
            queueManagementTimerSetNodesCount.AutoReset = true;

        }
        
        private void worker_DoWorkTimer()
        {
            queueManagementTimerSetTimer = new System.Timers.Timer(1); 
            queueManagementTimerSetTimer.Elapsed += OnQueueManagementTimerElapsedSetTimer;
            queueManagementTimerSetTimer.Enabled = true;
            queueManagementTimerSetTimer.AutoReset = true;

        }
        */
        /*  private void OnQueueManagementTimerElapsed(Object source, System.Timers.ElapsedEventArgs e)
          {
              if (!AllDo)
              {
                  AllDo = true;
                  Thread t = new Thread(new ThreadStart(AllOp));
                  t.Start();
              }

          }
          private void OnQueueManagementTimerElapsedMove(Object source, System.Timers.ElapsedEventArgs e)
          {

              if (!AllMove)
              {
                  Thread t = new Thread(new ThreadStart(Movements));
                  t.Start();
                  t.Join();
              }


          }
          private void OnQueueManagementTimerElapsedSetRefrigitDLL(Object source, System.Timers.ElapsedEventArgs e)
          {

               if (!SetDLL)
              {
                  Thread t = new Thread(new ThreadStart(SetRefregitzDLL));
                  t.Start();
                  t.Join();
              }


          }
          private void OnQueueManagementTimerElapsedSetNodesCount(Object source, System.Timers.ElapsedEventArgs e)
          {

              if (!SetNode)
              {
                  Thread t = new Thread(new ThreadStart(SetNodesCount));
                  t.Start();
                  t.Join();
              }
          }
          private void OnQueueManagementTimerElapsedSetTimer(Object source, System.Timers.ElapsedEventArgs e)
          {

              if (!SetTimer)
              {
                  Thread t = new Thread(new ThreadStart(SetTimerDLL));
                  t.Start();
                  t.Join();
              }


          }
      */
        void WaitOnEndGame()
        {
            do { } while (!EndOfGame);
        }
        void NewGame()
        {
            var arr = Task.Factory.StartNew(() => WaitOnEndGame());
            arr.Wait();
            Object O = new Object();
            lock (O)
            {

                try
                {
                    if (AllOperate != null)
                        AllOperate.Abort();
                    if (BackgroundWorkerSetRefD.WorkerSupportsCancellation)
                        BackgroundWorkerSetRefD.CancelAsync();
                    if (BackgroundWorkerSetNode.WorkerSupportsCancellation)
                        BackgroundWorkerSetNode.CancelAsync();
                    if (BackgroundWorkerAllOp.WorkerSupportsCancellation)
                        BackgroundWorkerAllOp.CancelAsync();
                    if (backgroundWorkerMoveGray.WorkerSupportsCancellation)
                        backgroundWorkerMoveGray.CancelAsync();
                    if (backgroundWorkerMoveBrown.WorkerSupportsCancellation)
                        backgroundWorkerMoveBrown.CancelAsync();
                    GrayTimer.StopTime();
                    BrownTimer.StopTime();

                    PictureBoxTimerBrown.CancelAsync();
                    PictureBoxTimerGray.CancelAsync();

                    ////UpdateConfigurationTableVal = true;

                    UpdateConfigurationTable();
                    bool Disposingbook = false;
                    bool Disposingole = false;
                    if (bookConn != null)
                    {
                        bookConn.Close();
                        Disposingbook = true;
                    }
                    if (oleDbCmd != null)
                    {
                        oleDbCmd.Clone();
                        Disposingole = true;
                    }
                    if (Disposingbook)
                        //oleDbCmd.Dispose();
                        if (Disposingole)
                            bookConn.Dispose();
                    if (!Quantum)
                    {
                        RefrigtzDLL.ChessRules A = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        RefrigtzDLL.ChessRules AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        Color a = Color.Gray;
                        if (OrderPlate == -1)
                            a = Color.Brown;
                        if (OrderPlate == 1)
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        else
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        AA.Pat(CloneATable(Table), OrderPlate, a);
                        bool Exitting = false;
                        if (OrderPlate == 1 && (A.CheckMateGray || AA.PatBrown))
                            Exitting = true;
                        else
                            if (OrderPlate == -1 && (A.CheckMateBrown || AA.PatkGray))
                            Exitting = true;
                        if (Exitting || RemoveUncomStock)
                        {
                            try
                            {
                                File.Delete("Run.txt");
                            }
                            catch (Exception t) { Log(t); }
                            {
                                //UpdateConfigurationTableVal = true;
                                //UpdateConfigurationTable();
                                try
                                {
                                    if (AllOperate != null)
                                        AllOperate.Abort();
                                    if (t1 != null)
                                        t1.Abort();
                                    if (t2 != null)
                                        t2.Abort();
                                    if (t3 != null)
                                        t3.Abort();
                                    if (t4 != null)
                                        t4.Abort();
                                    //if (AllOperate != null)
                                    //    AllOperate.Abort();
                                    //if (tttt != null)
                                    //    tttt.Abort();
                                    // if (ttt != null)
                                    //     ttt.Abort();
                                    GrayTimer.StopTime();
                                    BrownTimer.StopTime();
                                    TimerText.StopTime();

                                    StateCC = false;
                                    StateCP = false;
                                    StateGe = false;
                                    Person = false;
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                                if (!Directory.Exists(Root + "\\Database\\Games"))
                                    Directory.CreateDirectory(Root + "\\Database\\Games");
                                int i = 0;
                                do { i++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                SetAllDrawKind();
                                //Set Configuration To True for some unknown reason!.
                                //UpdateConfigurationTableVal = true;                             
                                SetAllDrawKindString();
                                (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                            }
                        }
                    }
                    else
                    {
                        QuantumRefrigiz.ChessRules A = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        QuantumRefrigiz.ChessRules AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        Color a = Color.Gray;
                        if (OrderPlate == -1)
                            a = Color.Brown;
                        if (OrderPlate == 1)
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        else
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        AA.Pat(CloneATable(Table), OrderPlate, a);
                        bool Exitting = false;
                        if (OrderPlate == 1 && (A.CheckMateGray || AA.PatBrown))
                            Exitting = true;
                        else
                            if (OrderPlate == -1 && (A.CheckMateBrown || AA.PatkGray))
                            Exitting = true;
                        if (Exitting || RemoveUncomStock)
                        {
                            try
                            {
                                File.Delete("Run.txt");
                            }
                            catch (Exception t) { Log(t); }
                            {
                                //UpdateConfigurationTableVal = true;
                                //UpdateConfigurationTable();
                                try
                                {
                                    if (AllOperate != null)
                                        AllOperate.Abort();
                                    if (t1 != null)
                                        t1.Abort();
                                    if (t2 != null)
                                        t2.Abort();
                                    if (t3 != null)
                                        t3.Abort();
                                    if (t4 != null)
                                        t4.Abort();
                                    //if (AllOperate != null)
                                    //    AllOperate.Abort();
                                    //if (tttt != null)
                                    //    tttt.Abort();
                                    //if (ttt != null)
                                    //    ttt.Abort();
                                    GrayTimer.StopTime();
                                    BrownTimer.StopTime();
                                    TimerText.StopTime();

                                    StateCC = false;
                                    StateCP = false;
                                    StateGe = false;
                                    Person = false;
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                                if (!Directory.Exists(Root + "\\Database\\Games"))
                                    Directory.CreateDirectory(Root + "\\Database\\Games");
                                int i = 0;
                                do { i++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                SetAllDrawKind();
                                //Set Configuration To True for some unknown reason!.
                                //UpdateConfigurationTableVal = true;                             
                                SetAllDrawKindString();
                                (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                            }
                        }
                    }
                    if (Quantum)
                    {
                        String SFile = "QBN.aqs";
                        if (File.Exists(SFile))
                            File.Delete(SFile);
                        for (int i = 0; i < 2; i++)
                            for (int jj = 0; jj < 8; jj++)
                                for (int kk = 0; kk < 8; kk++)
                                {
                                    System.IO.File.AppendAllText(SFile, QuantumRefrigiz.AllDraw.QuntumTable[i, jj, kk].ToString() + ",");
                                }
                    }
                    SetAllDrawKind();
                    //Set Configuration To True for some unknown reason!.
                    //UpdateConfigurationTableVal = true;                             
                    SetAllDrawKindString();

                    bool A1 = (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                    while (!A1) { }
                    ExitM = true;
                    Object OO = new Object();
                    lock (OO)
                    {
                        NewTable = true;
                        this.Hide();
                        StateCC = false;
                        BobSection = false;
                        AliceSection = false;
                        StateCP = false;
                        Person = false;
                        FormRefrigtz New = new FormRefrigtz(false);
                        New.ShowDialog();
                        New.Dispose();
                    }
                }
                catch (Exception t) { Log(t); }
            }



        }
        void WaitOnAllOP()
        {
            while (!LoadedTable || (!MenueSelecte)) { }
        }
        void AllOp()
        {
            Thread AllWait = new Thread(new ThreadStart(WaitOnAllOP));
            AllWait.Start();
            AllWait.Join();

            // RefrigtzDLL.AllDraw.THISDummy.Clone(Draw);
            if (!Quantum)
            {


                RefrigtzDLL.AllDraw.SyntaxToWrite = "";
                try
                {

                    if (RefrigtzDLL.AllDraw.TableListAction.Count > 0)
                    {
                        if (RefrigtzDLL.ChessGeneticAlgorithm.NoGameFounf)
                        {
                            //SetBoxText("No Game Could be continued!");
                            //RefreshBoxText();

                        }
                        // if (RefrigtzDLL.AllDraw.MouseClick == 0 && !RefrigtzDLL.ThinkingChess.ThinkingRun)
                        {
                            RefrigtzDLL.ChessRules A = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            Color a = Color.Gray;
                            if (OrderPlate == -1)
                                a = Color.Brown;
                            RefrigtzDLL.ChessRules AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, OrderPlate);

                            //if (!UsePenaltyRegardMechnisam)
                            if (AA.CheckMate(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1], OrderPlate))
                            {
                                if (OrderPlate == 1 && AA.CheckMateGray)
                                {
                                    EndOfGame = true;
                                    return;
                                }
                                else
                                    if (OrderPlate == -1 && AA.CheckMateBrown)
                                {
                                    EndOfGame = true;
                                    return;
                                }
                                if (AA.CheckMateGray || AA.CheckMateBrown)
                                {
                                    EndOfGame = true;
                                    return;
                                }
                            }

                            if (A.CheckMate(CloneATable(Table), OrderPlate) || A.Pat(CloneATable(Table), OrderPlate, a))
                            {
                                if (A.CheckMateGray || A.CheckMateBrown || EndOfGame || A.PatkGray || A.PatBrown)
                                {
                                    StateCC = false;
                                    StateCP = false;
                                    Person = false;
                                    //if (A.CheckMateGray || A.CheckMateBrown)
                                    //SetBoxText("\r\nCheckMate!");
                                    //else if (A.PatkGray || A.PatBrown)
                                    //SetBoxText("\r\nPat!");
                                    //RefreshBoxText();
                                    EndOfGame = true;
                                    return;
                                    //if (AllOperate.IsAlive)
                                    //new Syncronization(AllOperate, 1);




                                }
                                else
                                {
                                    if (A.CheckMateGray && OrderPlate == 1)


                                        if (A.CheckGray || A.CheckBrown)
                                        {
                                            //if (OrderPlate == 1)

                                            //SetBoxText("\r\nGray OrderPlate!Check!");
                                            //   else
                                            //SetBoxText("\r\nBrown OrderPlate!Check!");

                                        }
                                }
                            }
                        }
                    }
                    if (Sec.RadioButtonGrayOrder.Checked)
                    {
                        if (StateCC)
                        {

                            if (Stockfish)
                            {
                                if (ArrangmentsChanged)
                                {
                                    if (Blitz)
                                    {
                                        if (BobSection && OrderPlate == 1)//Gray is Refregitz.                                        
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerBobAsRefregitz(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                        else
                                            if (!BobSection && OrderPlate == -1)//Brow is Stockfish.                                            
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerAliceAsStockFish(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                    }
                                    else
                                        if (FullGame)
                                    {
                                        if (BobSection && OrderPlate == 1)//Gray is Refregitz.                                        
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerBobAsRefregitz(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                        else
                                            if (!BobSection && OrderPlate == -1)//Brow is Stockfish.                                            
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerAliceAsStockFish(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                    }
                                }
                                else
                                    MessageBox.Show("Mirror Objects Please!");
                            }
                            else//Not Stockfish
                            {
                                if (Blitz)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        AliceSection = true;
                                        BobSection = false;
                                        BobAction();
                                        AllDo = false;


                                    }
                                    else
                                    {
                                        Clicked = true;
                                        if (AliceSection && OrderPlate == -1)
                                        {
                                            AliceSection = false;
                                            BobSection = true;
                                            AliceAction();
                                            AllDo = false;

                                        }
                                    }
                                }
                                else
                                    if (FullGame)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        AliceSection = true;
                                        BobSection = false;
                                        BobAction();
                                        AllDo = false;


                                    }
                                    else
                                    {
                                        Clicked = true;
                                        if (AliceSection && OrderPlate == -1)
                                        {
                                            AliceSection = false;
                                            BobSection = true;
                                            AliceAction();
                                            AllDo = false;

                                        }
                                    }
                                }
                            }
                        }

                        else
                            if (StateCP)
                        {
                            if (Stockfish)
                            {

                                if (ArrangmentsChanged)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        Clicked = true;
                                        GrayTimer.StartTime("GrayTimer");
                                        BrownTimer.StopTime();
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        if (tM == null)
                                            tM = new Thread(new ThreadStart(Movements));
                                        if (!tM.IsAlive && PersonTmCall)
                                        {
                                            Person = true; tM.Start(); tM.Join(); tM.Abort();
                                        }
                                        //Wait();
                                        //Clicked = false; BobSection = false;
                                        //
                                        //
                                        //                                        
                                        ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                        //SetBoxText("\r\nObject Cleared.");
                                        //RefreshBoxText();
                                        //SetBoxText("\r\nYour Ready!");
                                        //RefreshBoxText();
                                        Color a = Color.Brown;

                                        Thread arr = new Thread(new ThreadStart(SetDrawFound));
                                        arr.Start();
                                        arr.Join();

                                        if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                        {
                                            FenCastling = 1;
                                        }
                                        else
                                                if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                        {
                                            FenCastling = 0;
                                        }
                                        else
                                            FenCastling = -1;

                                        String fens = Fen();
                                        if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                        {
                                            RefrigtzDLL.ChessRules.BigKingCastleGray = false;
                                        }
                                        else
                                            if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                        {
                                            RefrigtzDLL.ChessRules.SmallKingCastleGray = false;
                                        }
                                        StreamWriter sw = proc.StandardInput;
                                        string input = fens + "\r\n";
                                        sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                                        sw.Flush();
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;

                                        BobSection = false;

                                        GrayTimer.StopTime();
                                        BrownTimer.StartTime("BrownTimer");
                                        AllDo = false;


                                    }
                                    else
                                        if (!BobSection && OrderPlate == -1)
                                        MessageBox.Show("No Knowledge!");
                                }
                                else
                                    MessageBox.Show("Mirror the Objects please!");
                            }
                            else
                            {
                                if (Blitz)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        BrownTimer.StopTime();
                                        GrayTimer.StartTime("BrownTimer");


                                        bool SCC = StateCC;
                                        bool SCP = StateCP;
                                        bool SCG = StateGe;

                                        if (!PersonTmCall) return; RefrigtzDLL.AllDraw.FoundATable = false;
                                        Clicked = true;
                                        //////RefrigtzDLL.AllDraw.MouseClick = 0;
                                        RowClick = -1;
                                        ColumnClick = -1;
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }

                                        if (tM == null)
                                            tM = new Thread(new ThreadStart(Movements)); if (!PersonTmCall) return;
                                        if (!tM.IsAlive && PersonTmCall)
                                        {
                                            Person = true; tM.Start(); tM.Join(); tM.Abort();
                                        }
                                        //Wait();
                                        //Clicked = false; BobSection = false;
                                        //
                                        //
                                        //                                        
                                        //////RefrigtzDLL.AllDraw.MouseClick = 0;
                                        RowClick = -1;
                                        ColumnClick = -1;
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;
                                        //SetBoxText("\r\nObject Cleared.");
                                        //RefreshBoxText();
                                        //SetBoxText("\r\nYour Ready!");
                                        //RefreshBoxText();
                                        Color a = Color.Brown;
                                        //#pragma warning disable CS0219 // The variable 'FOUND' is assigned but its value is never used
                                        FOUND = false;
                                        //#pragma warning restore CS0219 // The variable 'FOUND' is assigned but its value is never used
                                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                                        RefrigtzDLL.AllDraw THIS = null;
                                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used


                                        //SetDrawFounding(ref FOUND, ref THIS, true);

                                        BobSection = false;
                                        StateCC = SCC;
                                        StateCP = SCP;
                                        StateGe = SCG;
                                        AllDo = false;
                                    }
                                    else
                                        if (!BobSection && OrderPlate == -1)
                                    {
                                        GrayTimer.StopTime();
                                        BrownTimer.StartTime("BrownTimer");

                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        Person = true;

                                        AliceWithPerson();
                                        PersonTmCall = true;
                                        BobSection = true;

                                        AllDo = false;
                                    }
                                }
                                else
                                    if (FullGame)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {


                                        BrownTimer.StopTime();
                                        GrayTimer.StartTime("BrownTimer");


                                        if (!PersonTmCall) return; RefrigtzDLL.AllDraw.FoundATable = false;
                                        Clicked = true;
                                        //////RefrigtzDLL.AllDraw.MouseClick = 0;
                                        RowClick = -1;
                                        ColumnClick = -1;
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;

                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        if (tM == null)
                                            tM = new Thread(new ThreadStart(Movements));
                                        if (!tM.IsAlive && PersonTmCall)
                                        {
                                            Person = true; tM.Start(); tM.Join(); tM.Abort(); ;
                                        }
                                        //Wait();
                                        //Clicked = false; BobSection = false;
                                        //
                                        //
                                        //

                                        ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                        RowClick = -1;
                                        ColumnClick = -1;
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;
                                        //SetBoxText("\r\nObject Cleared.");
                                        //RefreshBoxText();
                                        //SetBoxText("\r\nYour Ready!");
                                        //RefreshBoxText();
                                        //Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                        //Draw.TableList.Clear();
                                        //Draw.TableList.Add(CloneATable(Table));
                                        //Draw.SetRowColumn(0);
                                        BobSection = false;
                                        AllDo = false;
                                    }
                                    else
                                        if (!BobSection && OrderPlate == -1)
                                    {
                                        GrayTimer.StopTime();
                                        BrownTimer.StartTime("BrownTimer");

                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        Person = true;

                                        AliceWithPerson();
                                        PersonTmCall = true;

                                        BobSection = true;

                                        AllDo = false;
                                    }
                                }
                            }

                        }
                        else
                                if (StateGe)
                        {
                            if (Blitz)
                            {
                                GeneticAction();

                                AllDo = false;
                            }
                            else
                                if (FullGame)
                            {
                                GeneticAction();

                                AllDo = false;

                            }
                        }
                    }
                    else
                        if (Sec.RadioButtonBrownOrder.Checked)
                    {

                        if (StateCC)
                        {
                            if (Stockfish)
                            {
                                if (ArrangmentsChanged)
                                {
                                    if (Blitz)
                                    {
                                        if (BobSection && OrderPlate == 1)//Gray is Refregitz.                                        
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerBobAsRefregitz(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                        else
                                            if (!BobSection && OrderPlate == -1)//Brow is Stockfish.                                            
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerAliceAsStockFish(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                    }
                                    else
                                        if (FullGame)
                                    {
                                        if (BobSection && OrderPlate == 1)//Gray is Refregitz.                                        
                                        {


                                            var array = Task.Factory.StartNew(() => ComputerByComputerBobAsRefregitz(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                        else
                                            if (!BobSection && OrderPlate == -1)//Brow is Stockfish.                                            

                                        {

                                            var array = Task.Factory.StartNew(() => ComputerByComputerAliceAsStockFish(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }

                                    }
                                }
                                else
                                    MessageBox.Show("Mirror Objects Please!");
                            }
                            else//Not Stockfish
                            {
                                if (Blitz)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        BrownTimer.StopTime();
                                        GrayTimer.StartTime("GrayTimer");

                                        AliceSection = true;
                                        BobSection = false;
                                        BobAction();

                                        AllDo = false;

                                    }
                                    else
                                    {
                                        Clicked = true;
                                        if (AliceSection && OrderPlate == -1)
                                        {
                                            GrayTimer.StopTime();
                                            BrownTimer.StartTime("BrownTimer");
                                            AliceSection = false;
                                            BobSection = true;
                                            AliceAction();

                                            AllDo = false;
                                        }
                                    }
                                }
                                else
                                    if (FullGame)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        BrownTimer.StopTime();
                                        GrayTimer.StartTime("GrayTimer");

                                        AliceSection = true;
                                        BobSection = false;
                                        BobAction();

                                        AllDo = false;


                                    }
                                    else
                                    {
                                        GrayTimer.StopTime();
                                        BrownTimer.StartTime("BrownTimer");

                                        Clicked = true;
                                        if (AliceSection && OrderPlate == -1)
                                        {
                                            AliceSection = false;
                                            BobSection = true;
                                            AliceAction();

                                            AllDo = false;
                                        }
                                    }
                                }
                            }
                        }

                        else
                            if (StateCP)
                        {
                            if (Stockfish)
                            {

                                if (ArrangmentsChanged)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        Clicked = true;
                                        GrayTimer.StartTime("GrayTimer");
                                        BrownTimer.StopTime();
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        if (tM == null)
                                            tM = new Thread(new ThreadStart(Movements));
                                        if (!tM.IsAlive && PersonTmCall)
                                        {
                                            Person = true; tM.Start(); tM.Join(); tM.Abort();
                                        }
                                        //Wait();
                                        //Clicked = false; BobSection = false;


                                        ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                        //SetBoxText("\r\nObject Cleared.");
                                        //RefreshBoxText();
                                        //SetBoxText("\r\nYour Ready!");
                                        //RefreshBoxText();
                                        Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                        Draw.TableList.Clear();
                                        Draw.TableList.Add(CloneATable(Table));
                                        Draw.SetRowColumn(0);
                                        if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                        {
                                            FenCastling = 1;
                                        }
                                        else
                                            if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                        {
                                            FenCastling = 0;
                                        }
                                        else
                                            FenCastling = -1;

                                        String fens = Fen();
                                        if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                        {
                                            RefrigtzDLL.ChessRules.BigKingCastleGray = false;
                                        }
                                        else
                                            if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                        {
                                            RefrigtzDLL.ChessRules.SmallKingCastleGray = false;
                                        }
                                        StreamWriter sw = proc.StandardInput;
                                        string input = fens + "\r\n";
                                        sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                                        sw.Flush();
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;

                                        BobSection = false;

                                        GrayTimer.StopTime();
                                        BrownTimer.StartTime("BrownTimer");

                                        AllDo = false;

                                    }
                                    else
                                        if (!BobSection && OrderPlate == -1)
                                        MessageBox.Show("No Knowledge!");
                                }
                                else
                                    MessageBox.Show("Mirror the Objects please!");
                            }
                            else
                                if (Blitz)
                            {
                                if (!BobSection && OrderPlate == -1)
                                {
                                    if (!PersonTmCall) return; RefrigtzDLL.AllDraw.FoundATable = false;
                                    Clicked = true;
                                    ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                    RowClick = -1;
                                    ColumnClick = -1;
                                    RowClickP = -1;
                                    ColumnClickP = -1;
                                    RowRealesed = -1;
                                    ColumnRealeased = -1;
                                    if (tM != null && PersonTmCall)
                                    {
                                        try
                                        {
                                            tM.Abort();
                                            //Wait();
                                            tM = null;
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    if (tM == null)
                                        tM = new Thread(new ThreadStart(Movements));
                                    if (!tM.IsAlive && PersonTmCall)
                                    {
                                        Person = true; tM.Start(); tM.Join(); tM.Abort();
                                    }
                                    //Wait();
                                    //Clicked = false; BobSection = false;


                                    ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                    RowClick = -1;
                                    ColumnClick = -1;
                                    RowClickP = -1;
                                    ColumnClickP = -1;
                                    RowRealesed = -1;
                                    ColumnRealeased = -1;
                                    //SetBoxText("\r\nObject Cleared.");
                                    //RefreshBoxText();
                                    //SetBoxText("\r\nYour Ready!");
                                    //RefreshBoxText();
                                    //Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound,IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                    //Draw.TableList.Clear();
                                    //Draw.TableList.Add(CloneATable(Table));
                                    //Draw.SetRowColumn(0);
                                    BobSection = true;

                                    AllDo = false;
                                }
                                else
                                    if (BobSection && OrderPlate == 1)
                                {
                                    BrownTimer.StopTime();
                                    GrayTimer.StartTime("GrayTimer");


                                    if (tM != null && PersonTmCall)
                                    {
                                        try
                                        {
                                            tM.Abort();
                                            //Wait();
                                            tM = null;
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    Person = true;

                                    BobWithPerson();

                                    BobSection = false;

                                    AllDo = false;

                                }

                            }
                            else
                                    if (FullGame)
                            {
                                if (!BobSection && OrderPlate == -1)
                                {
                                    if (!PersonTmCall) return; RefrigtzDLL.AllDraw.FoundATable = false;
                                    Clicked = true;
                                    ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                    RowClick = -1;
                                    ColumnClick = -1;
                                    RowClickP = -1;
                                    ColumnClickP = -1;
                                    RowRealesed = -1;
                                    ColumnRealeased = -1;

                                    if (tM != null && PersonTmCall)
                                    {
                                        try
                                        {
                                            tM.Abort();
                                            //Wait();
                                            tM = null;
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    if (tM == null)
                                        tM = new Thread(new ThreadStart(Movements));
                                    if (!tM.IsAlive && PersonTmCall)
                                    {
                                        Person = true; tM.Start(); tM.Join(); tM.Abort();
                                    }
                                    //Wait();
                                    //Clicked = false; BobSection = false;


                                    ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                    RowClick = -1;
                                    ColumnClick = -1;
                                    RowClickP = -1;
                                    ColumnClickP = -1;
                                    RowRealesed = -1;
                                    ColumnRealeased = -1;
                                    //SetBoxText("\r\nObject Cleared.");
                                    //RefreshBoxText();
                                    //SetBoxText("\r\nYour Ready!");
                                    //RefreshBoxText();
                                    // Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                    // Draw.TableList.Clear();
                                    // Draw.TableList.Add(CloneATable(Table));
                                    //  Draw.SetRowColumn(0);
                                    BobSection = true;
                                    AllDo = false;
                                }
                                else
                                    if (BobSection && OrderPlate == 1)
                                {
                                    GrayTimer.StartTime("GrayTimer");
                                    BrownTimer.StopTime();


                                    if (tM != null && PersonTmCall)
                                    {
                                        try
                                        {
                                            tM.Abort();
                                            //Wait();
                                            tM = null;
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    Person = true;

                                    AliceWithPerson();

                                    PersonTmCall = true;

                                    BobSection = false;

                                    AllDo = false;

                                }
                            }

                        }
                        else
                                if (StateGe)
                        {
                            if (Blitz)
                            {
                                GeneticAction();
                                AllDo = false;

                            }
                            else
                                if (FullGame)
                            {
                                GeneticAction();

                                AllDo = false;
                            }
                        }
                    }


                    /* if (((StateCP) || Person || Blitz) && (!StateCC))
                     {


                         try
                         {
                             Color a = Color.Gray;
                             if (OrderPlate == -1)
                                 a = Color.Brown;
                             bool[,] Tab = new bool[8, 8];
                             if (RowClickP != -1 && ColumnClickP != -1)
                                 Tab = VeryFye(CloneATable(Table), OrderPlate, a);
                             if ((RowRealesed >= 0) && (RowRealesed < 8) && (ColumnRealeased >= 0) && (ColumnRealeased < 8) && ((int)(this.PictureBoxRefrigtz.Width / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Width / 8) < 8) && ((int)(this.PictureBoxRefrigtz.Height / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Height / 8) < 8))
                             {
                                 if ((RowRealesed + ColumnRealeased) % 2 == 0)
                                     g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\Black.jpg"), new Rectangle((int)RowRealesed, (int)ColumnRealeased, (int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8)));
                                 else
                                     g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\White.jpg"), new Rectangle((int)RowRealesed, (int)ColumnRealeased, (int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8)));
                             }

                         }
                         catch (Exception t)
                         { //RunInFront();
                             Log(t);
                         }

                         int Or = 1;
                         if (Sec.RadioButtonBrownOrder.Checked)
                             Or = -1;
                         if (Sec.RadioButtonGrayOrder.Checked)
                         {
                             if (!Stockfish)
                             {
                                 if ((StateCP || Blitz) && (OrderPlate == Or))
                                 {


                                     if (!PersonTmCall) return; RefrigtzDLL.AllDraw.FoundATable = false;
                                     Clicked = true;
                                     ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                     RowClick = -1;
                                     ColumnClick = -1;
                                     RowClickP = -1;
                                     ColumnClickP = -1;
                                     RowRealesed = -1;
                                     ColumnRealeased = -1;

                                     {
                                         if (tM == null)
                                             tM = new Thread(new ThreadStart(Movements));
                                         if (!tM.IsAlive && PersonTmCall)
                                         {
                                             Person = true; tM.Start(); tM.Join(); tM.Abort();
                                         }
                                         //Wait();
                                         Clicked = false; BobSection = false;


                                         ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                         RowClick = -1;
                                         ColumnClick = -1;
                                         RowClickP = -1;
                                         ColumnClickP = -1;
                                         RowRealesed = -1;
                                         ColumnRealeased = -1;
                                         //SetBoxText("\r\nObject Cleared.");
                                         //RefreshBoxText();
                                         //SetBoxText("\r\nYour Ready!");
                                         //RefreshBoxText();
                                         Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound,IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                         Draw.TableList.Clear();
                                         Draw.TableList.Add(CloneATable(Table));
                                         Draw.SetRowColumn(0);


                                     }
                                 }
                                 else
                                 {

                                     if (tM != null && PersonTmCall)
                                     {
                                         try
                                         {
                                             tM.Abort();
                                             //Wait();
                                             tM = null;
                                         }
                                         catch (Exception t)
                                         {
                                             Log(t);
                                         }
                                     }
                                     if ((StateCP) || Blitz)
                                     {
                                         if (Sec.RadioButtonGrayOrder.Checked && OrderPlate == -1)
                                         {
                                             Person = true;

                                             AliceWithPerson();
                                         }
                                     }
                                 }
                             }
                             else//Stockfish with Person 
                             {
                                 if (ArrangmentsChanged)
                                 {
                                     if (BobSection)
                                     {
                                         Clicked = true;
                                         GrayTimer.StartTime("GrayTimer");
                                         BrownTimer.StopTime();
                                         if (tM == null)
                                             tM = new Thread(new ThreadStart(Movements));
                                         if (!tM.IsAlive && PersonTmCall)
                                         {
                                             Person = true; tM.Start(); tM.Join(); tM.Abort();
                                         }
                                         //Wait();
                                         Clicked = false; BobSection = false;


                                         ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                         //SetBoxText("\r\nObject Cleared.");
                                         //RefreshBoxText();
                                         //SetBoxText("\r\nYour Ready!");
                                         //RefreshBoxText();
                                         Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound,IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                         Draw.TableList.Clear();
                                         Draw.TableList.Add(CloneATable(Table));
                                         Draw.SetRowColumn(0);
                                         if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                         {
                                             FenCastling = 1;
                                         }
                                         else
                                             if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                             {
                                                 FenCastling = 0;
                                             }
                                             else
                                                 FenCastling = -1;

                                         String fens = Fen();
                                         if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                         {
                                             RefrigtzDLL.ChessRules.BigKingCastleGray = false;
                                         }
                                         else
                                             if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                             {
                                                 RefrigtzDLL.ChessRules.SmallKingCastleGray = false;
                                             }
                                         StreamWriter sw = proc.StandardInput;
                                         string input = fens + "\r\n";
                                         sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                         sw.Flush();
                                         RowClickP = -1;
                                         ColumnClickP = -1;
                                         RowRealesed = -1;
                                         ColumnRealeased = -1;
                                         
                                         BobSection = false;
                                         
                                         GrayTimer.StopTime();
                                         BrownTimer.StartTime("BrownTimer");




                                     }
                                     else
                                         if (!BobSection)
                                         {
                                         }

                                 }
                                 else
                                 {
                                     Stockfish = false;
                                     StateCC = false;
                                     StateCP = false;
                                     MessageBox.Show("Mirror Objects please!");
                                 }

                             }
                         }
                         else if (Sec.RadioButtonBrownOrder.Checked)
                         {


                             if ((StateCP || Blitz) && (OrderPlate == Or))
                             {

                                 Person = false;
                                 if (!PersonTmCall) return; RefrigtzDLL.AllDraw.FoundATable = false;
                                 Clicked = true;
                                 ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                 RowClick = -1;
                                 ColumnClick = -1;
                                 RowClickP = -1;
                                 ColumnClickP = -1;
                                 RowRealesed = -1;
                                 ColumnRealeased = -1;

                                 {
                                     if (tM == null)
                                         tM = new Thread(new ThreadStart(Movements));
                                     if (!tM.IsAlive && PersonTmCall)
                                     {
                                         Person = true; tM.Start(); tM.Join(); tM.Abort();
                                     }
                                     //Wait();
                                     Clicked = false; BobSection = false;


                                     ////RefrigtzDLL.AllDraw.MouseClick = 0;
                                     RowClick = -1;
                                     ColumnClick = -1;
                                     RowClickP = -1;
                                     ColumnClickP = -1;
                                     RowRealesed = -1;
                                     ColumnRealeased = -1;
                                     //SetBoxText("\r\nObject Cleared.");
                                     //RefreshBoxText();
                                     //SetBoxText("\r\nYour Ready!");
                                     //RefreshBoxText();


                                 }
                             }
                             else
                             {

                                 if (tM != null && PersonTmCall)
                                 {
                                     try
                                     {
                                         tM.Abort();
                                         //Wait();
                                         tM = null;
                                     }
                                     catch (Exception t)
                                     {
                                         Log(t);
                                     }
                                 }
                                 if ((StateCP) || Blitz)
                                 {
                                     if (Sec.RadioButtonBrownOrder.Checked && OrderPlate == 1)
                                     {
                                         Person = true;
                                         BobWithPerson();



                                     }
                                 }
                             }

                         }
                     }
                     else
                         if (StateCC)
                         {
                             if (!Stockfish)
                             {
                                 if (Sec.RadioButtonGrayOrder.Checked)
                                 {
                                     if (BobSection)
                                     {
                                         Clicked = true;
                                              BobAction();



                                     }
                                     else
                                     {
                                         Clicked = true;
                                         if (AliceSection)
                                         {
                                             if (t2.IsAlive) new Syncronization(t2, 1);
                                             AliceSection = false;
                                             BobSection = true;
                                                   AliceAction();


                                         }
                                     }
                                 }
                                 else
                                     if (Sec.RadioButtonBrownOrder.Checked)
                                     {
                                         if (AliceSection)
                                         {
                                             Clicked = true;
                                                 AliceAction();
                                             AliceSection = false;
                                             BobSection = true;



                                         }
                                         else
                                             if (BobSection)
                                             {
                                                 AliceSection = true;
                                                 BobSection = false;
                                                     BobAction();


                                             }
                                     }
                             }
                             else
                             {
                                 if (ArrangmentsChanged)
                                 {
                                     if (Sec.RadioButtonGrayOrder.Checked)
                                     {
                                         if (RefregitzisCurrent && BobSection)
                                         {
                                             if (t3.IsAlive) new Syncronization(t3, 1);

                                             BobAction();

                                             if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                             {
                                                 FenCastling = 1;
                                             }
                                             else
                                                 if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                                 {
                                                     FenCastling = 0;
                                                 }
                                                 else
                                                     FenCastling = -1;

                                             RowClickP = FormRefrigtz.LastRow;
                                             ColumnClickP = FormRefrigtz.LastColumn;
                                             RowRealesed = FormRefrigtz.NextRow;
                                             ColumnRealeased = FormRefrigtz.NextColumn;
                                             String fens = Fen();
                                             if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                             {
                                                 RefrigtzDLL.ChessRules.BigKingCastleGray = false;
                                             }
                                             else
                                                 if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                                 {
                                                     RefrigtzDLL.ChessRules.SmallKingCastleGray = false;
                                                 }
                                             StreamWriter sw = proc.StandardInput;
                                             string input = fens + "\r\n";
                                             sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                             sw.Flush();
                                             RowClickP = -1;
                                             ColumnClickP = -1;
                                             RowRealesed = -1;
                                             ColumnRealeased = -1;
                                             
                                             BobSection = false;
                                             
                                             GrayTimer.StopTime();
                                             BrownTimer.StartTime("BrownTimer");





                                         }
                                         else if (!BobSection)
                                         {


                                             if (OrderPlate == 1)
                                             {
                                                 //SetBoxText("\r\nStockfish Number " + MovmentsNumber + " By Bob!");
                                                 //RefreshBoxText();
                                             }
                                             else
                                             {
                                                 //SetBoxText("\r\nStockfish Number " + MovmentsNumber + " By Alice!");
                                                 //RefreshBoxText();
                                             }

                                             // RefregitzisCurrent = false;

                                             String Pre = "";
                                             if (File.Exists("output.txt"))
                                                 Pre = File.ReadAllText("output.txt");
                                             StreamWriter sw = proc.StandardInput;
                                             string input = "go depth " + ComboBoxMaxLevelText + "\r\n";
                                             sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                             sw.Flush();
                                             WaitOn = true;
                                             do
                                             {
                                                 try
                                                 {
                                                     
                                                     input = "wr" + "\r\n";
                                                     sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                                     sw.Flush();
                                                     WaitOn = WaitOnMovmentOccured(Pre);
                                                 }
                                                 catch (Exception t)
                                                 {
                                                     Log(t);
                                                 }
                                             } while (WaitOn);

                                             while (WaitOn) {  }

                                             String wr = File.ReadAllText("output.txt");
                                             if (wr == "e8c8")
                                             {
                                                 FenCastling = 1;
                                                 RefrigtzDLL.ChessRules.BigKingCastleBrown = true;
                                             }
                                             else
                                                 if (wr == "e8g8")
                                                 {
                                                     RefrigtzDLL.ChessRules.SmallKingCastleBrown = true;
                                                     FenCastling = 0;
                                                 }
                                                 else
                                                     FenCastling = -1;
                                             int Pro = 0;
                                             if (FenCastling == -1)
                                             {
                                                 Pro = SetRowColumn(wr);
                                                 if (Pro == 0)
                                                 {
                                                     Table[(int)RowRealesed, (int)ColumnRealeased] = Table[(int)RowClickP, (int)ColumnClickP];
                                                     Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                 }
                                                 else
                                                 {
                                                     Table[(int)RowRealesed, (int)ColumnRealeased] = Pro;
                                                     Table[(int)RowClickP, (int)ColumnClickP] = 0;

                                                 }
                                             }
                                             else
                                                 if (FenCastling == 1)
                                                 {
                                                     Table[0, 0] = 0;
                                                     Table[4, 0] = 0;
                                                     Table[3, 0] = -6;
                                                     Table[4, 0] = -4;
                                                 }
                                                 else
                                                     if (FenCastling == 0)
                                                     {
                                                         Table[7, 0] = 0;
                                                         Table[4, 0] = 0;
                                                         Table[6, 0] = -6;
                                                         Table[5, 0] = -4;
                                                     }
                                             if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                                             {
                                                 RefrigtzDLL.ChessRules.BigKingCastleGray = false;
                                             }
                                             else
                                                 if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                                                 {
                                                     RefrigtzDLL.ChessRules.SmallKingCastleGray = false;
                                                 }
                                             String fens = Fen();
                                             if (FenCastling != -1)
                                             {
                                                 RefrigtzDLL.ChessRules.BigKingCastleBrown = false;
                                                 RefrigtzDLL.ChessRules.SmallKingCastleBrown = false;

                                             }
                                             RowClickP = -1;
                                             ColumnClickP = -1;
                                             RowRealesed = -1;
                                             ColumnRealeased = -1;
                                             sw = proc.StandardInput;
                                             input = fens + "\r\n";
                                             sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                             sw.Flush();
                                             RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(Table));
                                             Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound,IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                             Draw.TableList.Clear();
                                             Draw.TableList.Add(CloneATable(Table));
                                             Draw.SetRowColumn(0);
                                             //this.SetBoxText("\r\nThinking Finished by Bob!");
                                             //RefreshBoxText();

                                             if (RefrigtzDLL.AllDraw.TableListAction.Count >= 1)
                                             {
                                                 RefrigtzDLL.ChessGeneticAlgorithm R = new RefrigtzDLL.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                                 if (R.FindGenToModified(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2], RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1], RefrigtzDLL.AllDraw.TableListAction, 0, OrderPlate, true))
                                                 {
                                                     bool HitVal = false;
                                                     int Hit = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                                                     if (Hit != 0)
                                                         HitVal = true;
                                                     bool Convert = false;
                                                     if (OrderPlate == 1)
                                                     {
                                                         if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                                         {
                                                             if (R.CromosomColumn == 7)
                                                                 Convert = true;
                                                         }
                                                         if ((RefrigtzDLL.ChessRules.SmallKingCastleGray || RefrigtzDLL.ChessRules.BigKingCastleGray) && (!RefrigtzDLL.ChessRules.CastleActGray))
                                                             RefrigtzDLL.ChessRules.CastleActGray = true;
                                                         RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0,OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber  , RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActGray, Convert);
                                                     }
                                                     else
                                                     {
                                                         if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                                         {
                                                             if (R.CromosomColumn == 0)
                                                                 Convert = true;
                                                         }
                                                         if ((RefrigtzDLL.ChessRules.SmallKingCastleBrown || RefrigtzDLL.ChessRules.BigKingCastleBrown) && (!RefrigtzDLL.ChessRules.CastleActBrown))
                                                             RefrigtzDLL.ChessRules.CastleActBrown = true;

                                                         RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0,OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber  , RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActBrown, Convert);
                                                     }
                                                     SetBoxStatistic(RefrigtzDLL.AllDraw.SyntaxToWrite);
                                                     RefreshBoxStatistic();
                                                 }
                                             }
                                             using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                                             {
                                                 soundClick.Play();
                                                 soundClick.Dispose();
                                             }


                                             OrderPlate *= -1;
                                             BobSection = true;
                                             Draw.TableList.Clear();
                                             Draw.TableList.Add(CloneATable(Table));
                                             Draw.SetRowColumn(0);
                                             InsertTableAtDatabase(Table);
                                             GrayTimer.StartTime("GrayTimer");
                                             BrownTimer.StopTime();






                                         }

                                     }
                                 }
                                 else
                                 {
                                     Stockfish = false;
                                     StateCC = false;
                                     StateCP = false;
                                     MessageBox.Show("Mirror Objects please!");
                                 }
                             }
                         }
                         else
                             if (StateGe)
                             {
                                    GeneticAction();



                             }


                     */


                    {


                        if (RefrigtzDLL.AllDraw.MouseClick == 0 && RowClickP != -1)
                        {

                            //HitRecustruct();
                            RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                            RowClick = -1;
                            ColumnClick = -1;
                            RowClickP = -1;
                            ColumnClickP = -1;
                            RowRealesed = -1;
                            ColumnRealeased = -1;
                            RowRealesedP = -1;
                            ColumnClickP = -1;

                        }
                        else
                        {
                            if (RefrigtzDLL.AllDraw.MouseClick >= 2)
                            {

                                using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                                {
                                    soundClick.Play();
                                    // soundClick.Dispose();
                                }



                            }
                        }


                        RefrigtzDLL.AllDraw.RedrawTable = false;
                    }

                }
                catch (Exception t)
                {
                    Log(t);
                }

            }
            else
            {
                if (MovmentsNumber == 1)
                {

                    /*            if (Stockfish)
                                {
                                    GrayTimer.Sign = 1;
                                    BrownTimer.Sign = 1;
                                    if (OrderPlate == 1)
                                    {
                                        GrayTimer.StartTime("GrayTimer");
                                        BrownTimer.StopTime();
                                        BobSection = true;
                                        AliceSection = false;
                                        GrayTimer.StartTime("GrayTimer");
                                    }
                                    else
                                    {
                                        BrownTimer.StartTime("BrownTimer");
                                        GrayTimer.StopTime();
                                        BobSection = false;
                                        AliceSection = true;
                                        BrownTimer.StartTime("BrownTimer");
                                    }




                                }*/
                }

                QuantumRefrigiz.AllDraw.SyntaxToWrite = "";
                try
                {

                    if (QuantumRefrigiz.AllDraw.TableListAction.Count > 0)
                    {

                        if (QuantumRefrigiz.ChessGeneticAlgorithm.NoGameFounf)
                        {
                            //SetBoxText("No Game Could be continued!");
                            //RefreshBoxText();

                        }
                        if (QuantumRefrigiz.AllDraw.MouseClick == 0 && !QuantumRefrigiz.ThinkingQuantumChess.ThinkingRun)
                        {
                            QuantumRefrigiz.ChessRules A = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            Color a = Color.Gray;
                            if (OrderPlate == -1)
                                a = Color.Brown;
                            QuantumRefrigiz.ChessRules AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, OrderPlate);

                            //if (!UsePenaltyRegardMechnisam)
                            if (AA.CheckMate(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1], OrderPlate))
                            {
                                if (OrderPlate == 1 && AA.CheckMateGray)
                                {
                                    EndOfGame = true;
                                    return;
                                }
                                else
                                    if (OrderPlate == -1 && AA.CheckMateBrown)
                                {
                                    EndOfGame = true;
                                    return;
                                }
                            }

                            if (A.CheckMate(CloneATable(Table), OrderPlate) || A.Pat(CloneATable(Table), OrderPlate, a))
                            {
                                if (A.CheckMateGray || A.CheckMateBrown || EndOfGame || A.PatkGray || A.PatBrown)
                                {
                                    StateCC = false;
                                    StateCP = false;
                                    Person = false;
                                    //if (A.CheckMateGray || A.CheckMateBrown)
                                    //SetBoxText("\r\nCheckMate!");
                                    //else if (A.PatkGray || A.PatBrown)
                                    //SetBoxText("\r\nPat!");
                                    //RefreshBoxText();
                                    //if (AllOperate.IsAlive)
                                    //new Syncronization(AllOperate, 1);




                                }
                                else
                                {
                                    if (A.CheckMateGray && OrderPlate == 1)


                                        if (A.CheckGray || A.CheckBrown)
                                        {
                                            //if (OrderPlate == 1)

                                            //SetBoxText("\r\nGray OrderPlate!Check!");
                                            // else
                                            //SetBoxText("\r\nBrown OrderPlate!Check!");

                                        }
                                }
                            }
                        }
                    }
                    if (Sec.RadioButtonGrayOrder.Checked)
                    {
                        if (StateCC)
                        {

                            if (Stockfish)
                            {
                                if (ArrangmentsChanged)
                                {
                                    if (Blitz)
                                    {
                                        if (BobSection && OrderPlate == 1)//Gray is Refregitz.                                        
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerBobAsRefregitz(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                        else
                                            if (!BobSection && OrderPlate == -1)//Brow is Stockfish.                                            
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerAliceAsStockFish(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                    }
                                    else
                                        if (FullGame)
                                    {
                                        if (BobSection && OrderPlate == 1)//Gray is Refregitz.                                        
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerBobAsRefregitz(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                        else
                                            if (!BobSection && OrderPlate == -1)//Brow is Stockfish.                                            
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerAliceAsStockFish(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                    }
                                }
                                else
                                    MessageBox.Show("Mirror Objects Please!");
                            }
                            else//Not Stockfish
                            {
                                if (Blitz)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        AliceSection = true;
                                        BobSection = false;
                                        BobAction();
                                        AllDo = false;


                                    }
                                    else
                                    {
                                        Clicked = true;
                                        if (AliceSection && OrderPlate == -1)
                                        {
                                            AliceSection = false;
                                            BobSection = true;
                                            AliceAction();
                                            AllDo = false;

                                        }
                                    }
                                }
                                else
                                    if (FullGame)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        AliceSection = true;
                                        BobSection = false;
                                        BobAction();
                                        AllDo = false;


                                    }
                                    else
                                    {
                                        Clicked = true;
                                        if (AliceSection && OrderPlate == -1)
                                        {
                                            AliceSection = false;
                                            BobSection = true;
                                            AliceAction();
                                            AllDo = false;

                                        }
                                    }
                                }
                            }
                        }

                        else
                            if (StateCP)
                        {
                            if (Stockfish)
                            {

                                if (ArrangmentsChanged)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        Clicked = true;
                                        GrayTimer.StartTime("GrayTimer");
                                        BrownTimer.StopTime();
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        if (tM == null)
                                            tM = new Thread(new ThreadStart(Movements));
                                        if (!tM.IsAlive && PersonTmCall)
                                        {
                                            Person = true; tM.Start(); tM.Join(); tM.Abort();
                                        }
                                        //Wait();
                                        //Clicked = false; BobSection = false;
                                        //
                                        //
                                        //                                        
                                        //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                        //SetBoxText("\r\nObject Cleared.");
                                        //RefreshBoxText();
                                        //SetBoxText("\r\nYour Ready!");
                                        //RefreshBoxText();
                                        Color a = Color.Brown;

                                        Thread arr = new Thread(new ThreadStart(SetDrawFound));
                                        arr.Start();
                                        arr.Join();


                                        if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                        {
                                            FenCastling = 1;
                                        }
                                        else
                                                if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                        {
                                            FenCastling = 0;
                                        }
                                        else
                                            FenCastling = -1;

                                        String fens = Fen();
                                        if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                        {
                                            QuantumRefrigiz.ChessRules.BigKingCastleGray = false;
                                        }
                                        else
                                            if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                        {
                                            QuantumRefrigiz.ChessRules.SmallKingCastleGray = false;
                                        }
                                        StreamWriter sw = proc.StandardInput;
                                        string input = fens + "\r\n";
                                        sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                                        sw.Flush();
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;

                                        BobSection = false;

                                        GrayTimer.StopTime();
                                        BrownTimer.StartTime("BrownTimer");
                                        AllDo = false;


                                    }
                                    else
                                        if (!BobSection && OrderPlate == -1)
                                        MessageBox.Show("No Knowledge!");
                                }
                                else
                                    MessageBox.Show("Mirror the Objects please!");
                            }
                            else
                            {
                                if (Blitz)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {


                                        bool SCC = StateCC;
                                        bool SCP = StateCP;
                                        bool SCG = StateGe;

                                        QuantumRefrigiz.AllDraw.FoundATable = false;
                                        Clicked = true;
                                        //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                        RowClick = -1;
                                        ColumnClick = -1;
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        if (tM == null)
                                            tM = new Thread(new ThreadStart(Movements));
                                        if (!tM.IsAlive && PersonTmCall)
                                        {
                                            Person = true; tM.Start(); tM.Join(); tM.Abort();
                                        }
                                        //Wait();
                                        //Clicked = false; BobSection = false;
                                        //
                                        //
                                        //                                        
                                        //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                        RowClick = -1;
                                        ColumnClick = -1;
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;
                                        //SetBoxText("\r\nObject Cleared.");
                                        //RefreshBoxText();
                                        //SetBoxText("\r\nYour Ready!");
                                        //RefreshBoxText();
                                        Color a = Color.Brown;
                                        //#pragma warning disable CS0219 // The variable 'FOUND' is assigned but its value is never used
                                        FOUND = false;
                                        //#pragma warning restore CS0219 // The variable 'FOUND' is assigned but its value is never used
                                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                                        QuantumRefrigiz.AllDraw THIS = null;
                                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used


                                        //SetDrawFounding(ref FOUND, ref THIS, true);

                                        BobSection = false;
                                        StateCC = SCC;
                                        StateCP = SCP;
                                        StateGe = SCG;
                                        AllDo = false;
                                    }
                                    else
                                        if (!BobSection && OrderPlate == -1)
                                    {
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        Person = true;

                                        AliceWithPerson();
                                        PersonTmCall = true;

                                        BobSection = true;

                                        AllDo = false;
                                    }
                                }
                                else
                                    if (FullGame)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {



                                        QuantumRefrigiz.AllDraw.FoundATable = false;
                                        Clicked = true;
                                        //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                        RowClick = -1;
                                        ColumnClick = -1;
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        if (tM == null)
                                            tM = new Thread(new ThreadStart(Movements));
                                        if (!tM.IsAlive && PersonTmCall)
                                        {
                                            Person = true; tM.Start(); tM.Join(); tM.Abort();
                                        }
                                        //Wait();
                                        //Clicked = false; BobSection = false;
                                        //
                                        //
                                        //

                                        //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                        RowClick = -1;
                                        ColumnClick = -1;
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;
                                        //SetBoxText("\r\nObject Cleared.");
                                        //RefreshBoxText();
                                        //SetBoxText("\r\nYour Ready!");
                                        //RefreshBoxText();
                                        DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                        DrawQ.TableList.Clear();
                                        DrawQ.TableList.Add(CloneATable(Table));
                                        DrawQ.SetRowColumn(0);
                                        BobSection = false;
                                        AllDo = false;
                                    }
                                    else
                                        if (!BobSection && OrderPlate == -1)
                                    {
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        Person = true;

                                        AliceWithPerson();

                                        PersonTmCall = true;

                                        BobSection = true;

                                        AllDo = false;
                                    }
                                }
                            }

                        }
                        else
                                if (StateGe)
                        {
                            if (Blitz)
                            {
                                GeneticAction();

                                AllDo = false;
                            }
                            else
                                if (FullGame)
                            {
                                GeneticAction();

                                AllDo = false;

                            }
                        }
                    }
                    else
                        if (Sec.RadioButtonBrownOrder.Checked)
                    {

                        if (StateCC)
                        {
                            if (Stockfish)
                            {
                                if (ArrangmentsChanged)
                                {
                                    if (Blitz)
                                    {
                                        if (BobSection && OrderPlate == 1)//Gray is Refregitz.                                        
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerBobAsRefregitz(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                        else
                                            if (!BobSection && OrderPlate == -1)//Brow is Stockfish.                                            
                                        {
                                            var array = Task.Factory.StartNew(() => ComputerByComputerAliceAsStockFish(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                    }
                                    else
                                        if (FullGame)
                                    {
                                        if (BobSection && OrderPlate == 1)//Gray is Refregitz.                                        
                                        {


                                            var array = Task.Factory.StartNew(() => ComputerByComputerBobAsRefregitz(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }
                                        else
                                            if (!BobSection && OrderPlate == -1)//Brow is Stockfish.                                            

                                        {

                                            var array = Task.Factory.StartNew(() => ComputerByComputerAliceAsStockFish(ref proc));
                                            array.Wait(); array.Dispose();
                                            AllDo = false;
                                        }

                                    }
                                }
                                else
                                    MessageBox.Show("Mirror Objects Please!");
                            }
                            else//Not Stockfish
                            {
                                if (Blitz)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        AliceSection = true;
                                        BobSection = false;
                                        BobAction();

                                        AllDo = false;

                                    }
                                    else
                                    {
                                        Clicked = true;
                                        if (AliceSection && OrderPlate == -1)
                                        {
                                            AliceSection = false;
                                            BobSection = true;
                                            AliceAction();

                                            AllDo = false;
                                        }
                                    }
                                }
                                else
                                    if (FullGame)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        AliceSection = true;
                                        BobSection = false;
                                        BobAction();

                                        AllDo = false;


                                    }
                                    else
                                    {
                                        Clicked = true;
                                        if (AliceSection && OrderPlate == -1)
                                        {
                                            AliceSection = false;
                                            BobSection = true;
                                            AliceAction();

                                            AllDo = false;
                                        }
                                    }
                                }
                            }
                        }

                        else
                            if (StateCP)
                        {
                            if (Stockfish)
                            {

                                if (ArrangmentsChanged)
                                {
                                    if (BobSection && OrderPlate == 1)
                                    {
                                        Clicked = true;
                                        GrayTimer.StartTime("GrayTimer");
                                        BrownTimer.StopTime();
                                        if (tM != null && PersonTmCall)
                                        {
                                            try
                                            {
                                                tM.Abort();
                                                //Wait();
                                                tM = null;
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        if (tM == null)
                                            tM = new Thread(new ThreadStart(Movements));
                                        if (!tM.IsAlive && PersonTmCall)
                                        {
                                            Person = true; tM.Start(); tM.Join(); tM.Abort();
                                        }
                                        //Wait();
                                        //Clicked = false; BobSection = false;


                                        //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                        //SetBoxText("\r\nObject Cleared.");
                                        //RefreshBoxText();
                                        //SetBoxText("\r\nYour Ready!");
                                        //RefreshBoxText();
                                        DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                        DrawQ.TableList.Clear();
                                        DrawQ.TableList.Add(CloneATable(Table));
                                        DrawQ.SetRowColumn(0);
                                        if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                        {
                                            FenCastling = 1;
                                        }
                                        else
                                            if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                        {
                                            FenCastling = 0;
                                        }
                                        else
                                            FenCastling = -1;

                                        String fens = Fen();
                                        if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                        {
                                            QuantumRefrigiz.ChessRules.BigKingCastleGray = false;
                                        }
                                        else
                                            if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                        {
                                            QuantumRefrigiz.ChessRules.SmallKingCastleGray = false;
                                        }
                                        StreamWriter sw = proc.StandardInput;
                                        string input = fens + "\r\n";
                                        sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                                        sw.Flush();
                                        RowClickP = -1;
                                        ColumnClickP = -1;
                                        RowRealesed = -1;
                                        ColumnRealeased = -1;

                                        BobSection = false;

                                        GrayTimer.StopTime();
                                        BrownTimer.StartTime("BrownTimer");

                                        AllDo = false;

                                    }
                                    else
                                        if (!BobSection && OrderPlate == -1)
                                        MessageBox.Show("No Knowledge!");
                                }
                                else
                                    MessageBox.Show("Mirror the Objects please!");
                            }
                            else
                                if (Blitz)
                            {
                                if (!BobSection && OrderPlate == -1)
                                {
                                    QuantumRefrigiz.AllDraw.FoundATable = false;
                                    Clicked = true;
                                    //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                    RowClick = -1;
                                    ColumnClick = -1;
                                    RowClickP = -1;
                                    ColumnClickP = -1;
                                    RowRealesed = -1;
                                    ColumnRealeased = -1;
                                    if (tM != null && PersonTmCall)
                                    {
                                        try
                                        {
                                            tM.Abort();
                                            //Wait();
                                            tM = null;
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    if (tM == null)
                                        tM = new Thread(new ThreadStart(Movements));
                                    if (!tM.IsAlive && PersonTmCall)
                                    {
                                        Person = true; tM.Start(); tM.Join(); tM.Abort();
                                    }
                                    //Wait();
                                    //Clicked = false; BobSection = false;


                                    //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                    RowClick = -1;
                                    ColumnClick = -1;
                                    RowClickP = -1;
                                    ColumnClickP = -1;
                                    RowRealesed = -1;
                                    ColumnRealeased = -1;
                                    //SetBoxText("\r\nObject Cleared.");
                                    //RefreshBoxText();
                                    //SetBoxText("\r\nYour Ready!");
                                    //RefreshBoxText();
                                    //DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound,IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                    //DrawQ.TableList.Clear();
                                    //DrawQ.TableList.Add(CloneATable(Table));
                                    //DrawQ.SetRowColumn(0);
                                    BobSection = true;

                                    AllDo = false;
                                }
                                else
                                    if (BobSection && OrderPlate == 1)
                                {

                                    if (tM != null && PersonTmCall)
                                    {
                                        try
                                        {
                                            tM.Abort();
                                            //Wait();
                                            tM = null;
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    Person = true;

                                    BobWithPerson();

                                    BobSection = false;

                                    AllDo = false;

                                }

                            }
                            else
                                    if (FullGame)
                            {
                                if (!BobSection && OrderPlate == -1)
                                {
                                    QuantumRefrigiz.AllDraw.FoundATable = false;
                                    Clicked = true;
                                    //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                    RowClick = -1;
                                    ColumnClick = -1;
                                    RowClickP = -1;
                                    ColumnClickP = -1;
                                    RowRealesed = -1;
                                    ColumnRealeased = -1;
                                    if (tM != null && PersonTmCall)
                                    {
                                        try
                                        {
                                            tM.Abort();
                                            //Wait();
                                            tM = null;
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    if (tM == null)
                                        tM = new Thread(new ThreadStart(Movements));
                                    if (!tM.IsAlive && PersonTmCall)
                                    {
                                        Person = true; tM.Start(); tM.Join(); tM.Abort();
                                    }
                                    //Wait();
                                    //Clicked = false; BobSection = false;


                                    //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                    RowClick = -1;
                                    ColumnClick = -1;
                                    RowClickP = -1;
                                    ColumnClickP = -1;
                                    RowRealesed = -1;
                                    ColumnRealeased = -1;
                                    //SetBoxText("\r\nObject Cleared.");
                                    //RefreshBoxText();
                                    //SetBoxText("\r\nYour Ready!");
                                    //RefreshBoxText();
                                    DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                    DrawQ.TableList.Clear();
                                    DrawQ.TableList.Add(CloneATable(Table));
                                    DrawQ.SetRowColumn(0);
                                    BobSection = true;
                                    AllDo = false;
                                }
                                else
                                    if (BobSection && OrderPlate == 1)
                                {
                                    GrayTimer.StartTime("GrayTimer");
                                    BrownTimer.StopTime();


                                    if (tM != null && PersonTmCall)
                                    {
                                        try
                                        {
                                            tM.Abort();
                                            //Wait();
                                            tM = null;
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    Person = true;

                                    AliceWithPerson();

                                    PersonTmCall = true;

                                    BobSection = false;

                                    AllDo = false;

                                }
                            }

                        }
                        else
                                if (StateGe)
                        {
                            if (Blitz)
                            {
                                GeneticAction();
                                AllDo = false;

                            }
                            else
                                if (FullGame)
                            {
                                GeneticAction();

                                AllDo = false;
                            }
                        }
                    }


                    /* if (((StateCP) || Person || Blitz) && (!StateCC))
                     {


                         try
                         {
                             Color a = Color.Gray;
                             if (OrderPlate == -1)
                                 a = Color.Brown;
                             bool[,] Tab = new bool[8, 8];
                             if (RowClickP != -1 && ColumnClickP != -1)
                                 Tab = VeryFye(CloneATable(Table), OrderPlate, a);
                             if ((RowRealesed >= 0) && (RowRealesed < 8) && (ColumnRealeased >= 0) && (ColumnRealeased < 8) && ((int)(this.PictureBoxRefrigtz.Width / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Width / 8) < 8) && ((int)(this.PictureBoxRefrigtz.Height / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Height / 8) < 8))
                             {
                                 if ((RowRealesed + ColumnRealeased) % 2 == 0)
                                     g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\Black.jpg"), new Rectangle((int)RowRealesed, (int)ColumnRealeased, (int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8)));
                                 else
                                     g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\White.jpg"), new Rectangle((int)RowRealesed, (int)ColumnRealeased, (int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8)));
                             }

                         }
                         catch (Exception t)
                         { //RunInFront();
                             Log(t);
                         }

                         int Or = 1;
                         if (Sec.RadioButtonBrownOrder.Checked)
                             Or = -1;
                         if (Sec.RadioButtonGrayOrder.Checked)
                         {
                             if (!Stockfish)
                             {
                                 if ((StateCP || Blitz) && (OrderPlate == Or))
                                 {


                                     QuantumRefrigiz.AllDraw.FoundATable = false;
                                     Clicked = true;
                                     //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                     RowClick = -1;
                                     ColumnClick = -1;
                                     RowClickP = -1;
                                     ColumnClickP = -1;
                                     RowRealesed = -1;
                                     ColumnRealeased = -1;

                                     {
                                         if (tM == null)
                                             tM = new Thread(new ThreadStart(Movements));
                                         if (!tM.IsAlive && PersonTmCall)
                                         {
                                             Person = true; tM.Start(); tM.Join(); tM.Abort();
                                         }
                                         //Wait();
                                         Clicked = false; BobSection = false;


                                         //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                         RowClick = -1;
                                         ColumnClick = -1;
                                         RowClickP = -1;
                                         ColumnClickP = -1;
                                         RowRealesed = -1;
                                         ColumnRealeased = -1;
                                         //SetBoxText("\r\nObject Cleared.");
                                         //RefreshBoxText();
                                         //SetBoxText("\r\nYour Ready!");
                                         //RefreshBoxText();
                                         DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound,IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                         DrawQ.TableList.Clear();
                                         DrawQ.TableList.Add(CloneATable(Table));
                                         DrawQ.SetRowColumn(0);


                                     }
                                 }
                                 else
                                 {

                                     if (tM != null && PersonTmCall)
                                     {
                                         try
                                         {
                                             tM.Abort();
                                             //Wait();
                                             tM = null;
                                         }
                                         catch (Exception t)
                                         {
                                             Log(t);
                                         }
                                     }
                                     if ((StateCP) || Blitz)
                                     {
                                         if (Sec.RadioButtonGrayOrder.Checked && OrderPlate == -1)
                                         {
                                             Person = true;

                                             AliceWithPerson();
                                         }
                                     }
                                 }
                             }
                             else//Stockfish with Person 
                             {
                                 if (ArrangmentsChanged)
                                 {
                                     if (BobSection)
                                     {
                                         Clicked = true;
                                         GrayTimer.StartTime("GrayTimer");
                                         BrownTimer.StopTime();
                                         if (tM == null)
                                             tM = new Thread(new ThreadStart(Movements));
                                         if (!tM.IsAlive && PersonTmCall)
                                         {
                                             Person = true; tM.Start(); tM.Join(); tM.Abort();
                                         }
                                         //Wait();
                                         Clicked = false; BobSection = false;


                                         //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                         //SetBoxText("\r\nObject Cleared.");
                                         //RefreshBoxText();
                                         //SetBoxText("\r\nYour Ready!");
                                         //RefreshBoxText();
                                         DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound,IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                         DrawQ.TableList.Clear();
                                         DrawQ.TableList.Add(CloneATable(Table));
                                         DrawQ.SetRowColumn(0);
                                         if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                         {
                                             FenCastling = 1;
                                         }
                                         else
                                             if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                             {
                                                 FenCastling = 0;
                                             }
                                             else
                                                 FenCastling = -1;

                                         String fens = Fen();
                                         if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                         {
                                             QuantumRefrigiz.ChessRules.BigKingCastleGray = false;
                                         }
                                         else
                                             if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                             {
                                                 QuantumRefrigiz.ChessRules.SmallKingCastleGray = false;
                                             }
                                         StreamWriter sw = proc.StandardInput;
                                         string input = fens + "\r\n";
                                         sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                         sw.Flush();
                                         RowClickP = -1;
                                         ColumnClickP = -1;
                                         RowRealesed = -1;
                                         ColumnRealeased = -1;
                                         
                                         BobSection = false;
                                         
                                         GrayTimer.StopTime();
                                         BrownTimer.StartTime("BrownTimer");
                                         y



                                     }
                                     else
                                         if (!BobSection)
                                         {
                                         }

                                 }
                                 else
                                 {
                                     Stockfish = false;
                                     StateCC = false;
                                     StateCP = false;
                                     MessageBox.Show("Mirror Objects please!");
                                 }

                             }
                         }
                         else if (Sec.RadioButtonBrownOrder.Checked)
                         {


                             if ((StateCP || Blitz) && (OrderPlate == Or))
                             {

                                 Person = false;
                                 QuantumRefrigiz.AllDraw.FoundATable = false;
                                 Clicked = true;
                                 //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                 RowClick = -1;
                                 ColumnClick = -1;
                                 RowClickP = -1;
                                 ColumnClickP = -1;
                                 RowRealesed = -1;
                                 ColumnRealeased = -1;

                                 {
                                     if (tM == null)
                                         tM = new Thread(new ThreadStart(Movements));
                                     if (!tM.IsAlive && PersonTmCall)
                                     {
                                         Person = true; tM.Start(); tM.Join(); tM.Abort();
                                     }
                                     //Wait();
                                     Clicked = false; BobSection = false;


                                     //QuantumRefrigiz.AllDraw.MouseClick = 0;
                                     RowClick = -1;
                                     ColumnClick = -1;
                                     RowClickP = -1;
                                     ColumnClickP = -1;
                                     RowRealesed = -1;
                                     ColumnRealeased = -1;
                                     //SetBoxText("\r\nObject Cleared.");
                                     //RefreshBoxText();
                                     //SetBoxText("\r\nYour Ready!");
                                     //RefreshBoxText();


                                 }
                             }
                             else
                             {

                                 if (tM != null && PersonTmCall)
                                 {
                                     try
                                     {
                                         tM.Abort();
                                         //Wait();
                                         tM = null;
                                     }
                                     catch (Exception t)
                                     {
                                         Log(t);
                                     }
                                 }
                                 if ((StateCP) || Blitz)
                                 {
                                     if (Sec.RadioButtonBrownOrder.Checked && OrderPlate == 1)
                                     {
                                         Person = true;
                                         BobWithPerson();



                                     }
                                 }
                             }

                         }
                     }
                     else
                         if (StateCC)
                         {
                             if (!Stockfish)
                             {
                                 if (Sec.RadioButtonGrayOrder.Checked)
                                 {
                                     if (BobSection)
                                     {
                                         Clicked = true;
                                              BobAction();



                                     }
                                     else
                                     {
                                         Clicked = true;
                                         if (AliceSection)
                                         {
                                             if (t2.IsAlive) new Syncronization(t2, 1);
                                             AliceSection = false;
                                             BobSection = true;
                                                   AliceAction();


                                         }
                                     }
                                 }
                                 else
                                     if (Sec.RadioButtonBrownOrder.Checked)
                                     {
                                         if (AliceSection)
                                         {
                                             Clicked = true;
                                                 AliceAction();
                                             AliceSection = false;
                                             BobSection = true;



                                         }
                                         else
                                             if (BobSection)
                                             {
                                                 AliceSection = true;
                                                 BobSection = false;
                                                     BobAction();


                                             }
                                     }
                             }
                             else
                             {
                                 if (ArrangmentsChanged)
                                 {
                                     if (Sec.RadioButtonGrayOrder.Checked)
                                     {
                                         if (RefregitzisCurrent && BobSection)
                                         {
                                             if (t3.IsAlive) new Syncronization(t3, 1);

                                             BobAction();

                                             if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                             {
                                                 FenCastling = 1;
                                             }
                                             else
                                                 if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                                 {
                                                     FenCastling = 0;
                                                 }
                                                 else
                                                     FenCastling = -1;

                                             RowClickP = FormRefrigtz.LastRow;
                                             ColumnClickP = FormRefrigtz.LastColumn;
                                             RowRealesed = FormRefrigtz.NextRow;
                                             ColumnRealeased = FormRefrigtz.NextColumn;
                                             String fens = Fen();
                                             if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                             {
                                                 QuantumRefrigiz.ChessRules.BigKingCastleGray = false;
                                             }
                                             else
                                                 if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                                 {
                                                     QuantumRefrigiz.ChessRules.SmallKingCastleGray = false;
                                                 }
                                             StreamWriter sw = proc.StandardInput;
                                             string input = fens + "\r\n";
                                             sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                             sw.Flush();
                                             RowClickP = -1;
                                             ColumnClickP = -1;
                                             RowRealesed = -1;
                                             ColumnRealeased = -1;
                                             
                                             BobSection = false;
                                             
                                             GrayTimer.StopTime();
                                             BrownTimer.StartTime("BrownTimer");





                                         }
                                         else if (!BobSection)
                                         {


                                             if (OrderPlate == 1)
                                             {
                                                 //SetBoxText("\r\nStockfish Number " + MovmentsNumber + " By Bob!");
                                                 //RefreshBoxText();
                                             }
                                             else
                                             {
                                                 //SetBoxText("\r\nStockfish Number " + MovmentsNumber + " By Alice!");
                                                 //RefreshBoxText();
                                             }

                                             // RefregitzisCurrent = false;

                                             String Pre = "";
                                             if (File.Exists("output.txt"))
                                                 Pre = File.ReadAllText("output.txt");
                                             StreamWriter sw = proc.StandardInput;
                                             string input = "go depth " + ComboBoxMaxLevelText + "\r\n";
                                             sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                             sw.Flush();
                                             WaitOn = true;
                                             do
                                             {
                                                 try
                                                 {
                                                     
                                                     input = "wr" + "\r\n";
                                                     sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                                     sw.Flush();
                                                     WaitOn = WaitOnMovmentOccured(Pre);
                                                 }
                                                 catch (Exception t)
                                                 {
                                                     Log(t);
                                                 }
                                             } while (WaitOn);

                                             while (WaitOn) {  }

                                             String wr = File.ReadAllText("output.txt");
                                             if (wr == "e8c8")
                                             {
                                                 FenCastling = 1;
                                                 QuantumRefrigiz.ChessRules.BigKingCastleBrown = true;
                                             }
                                             else
                                                 if (wr == "e8g8")
                                                 {
                                                     QuantumRefrigiz.ChessRules.SmallKingCastleBrown = true;
                                                     FenCastling = 0;
                                                 }
                                                 else
                                                     FenCastling = -1;
                                             int Pro = 0;
                                             if (FenCastling == -1)
                                             {
                                                 Pro = SetRowColumn(wr);
                                                 if (Pro == 0)
                                                 {
                                                     Table[(int)RowRealesed, (int)ColumnRealeased] = Table[(int)RowClickP, (int)ColumnClickP];
                                                     Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                 }
                                                 else
                                                 {
                                                     Table[(int)RowRealesed, (int)ColumnRealeased] = Pro;
                                                     Table[(int)RowClickP, (int)ColumnClickP] = 0;

                                                 }
                                             }
                                             else
                                                 if (FenCastling == 1)
                                                 {
                                                     Table[0, 0] = 0;
                                                     Table[4, 0] = 0;
                                                     Table[3, 0] = -6;
                                                     Table[4, 0] = -4;
                                                 }
                                                 else
                                                     if (FenCastling == 0)
                                                     {
                                                         Table[7, 0] = 0;
                                                         Table[4, 0] = 0;
                                                         Table[6, 0] = -6;
                                                         Table[5, 0] = -4;
                                                     }
                                             if (QuantumRefrigiz.ChessRules.BigKingCastleGray)
                                             {
                                                 QuantumRefrigiz.ChessRules.BigKingCastleGray = false;
                                             }
                                             else
                                                 if (QuantumRefrigiz.ChessRules.SmallKingCastleGray)
                                                 {
                                                     QuantumRefrigiz.ChessRules.SmallKingCastleGray = false;
                                                 }
                                             String fens = Fen();
                                             if (FenCastling != -1)
                                             {
                                                 QuantumRefrigiz.ChessRules.BigKingCastleBrown = false;
                                                 QuantumRefrigiz.ChessRules.SmallKingCastleBrown = false;

                                             }
                                             RowClickP = -1;
                                             ColumnClickP = -1;
                                             RowRealesed = -1;
                                             ColumnRealeased = -1;
                                             sw = proc.StandardInput;
                                             input = fens + "\r\n";
                                             sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.size());
                                             sw.Flush();
                                             QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(Table));
                                             DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound,IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                             DrawQ.TableList.Clear();
                                             DrawQ.TableList.Add(CloneATable(Table));
                                             DrawQ.SetRowColumn(0);
                                             //this.SetBoxText("\r\nThinking Finished by Bob!");
                                             //RefreshBoxText();

                                             if (QuantumRefrigiz.AllDraw.TableListAction.Count >= 1)
                                             {
                                                 QuantumRefrigiz.ChessGeneticAlgorithm R = new QuantumRefrigiz.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                                 if (R.FindGenToModified(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2], QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1], QuantumRefrigiz.AllDraw.TableListAction, 0, OrderPlate, true))
                                                 {
                                                     bool HitVal = false;
                                                     int Hit = QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                                                     if (Hit != 0)
                                                         HitVal = true;
                                                     bool Convert = false;
                                                     if (OrderPlate == 1)
                                                     {
                                                         if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                                         {
                                                             if (R.CromosomColumn == 7)
                                                                 Convert = true;
                                                         }
                                                         if ((QuantumRefrigiz.ChessRules.SmallKingCastleGray || QuantumRefrigiz.ChessRules.BigKingCastleGray) && (!QuantumRefrigiz.ChessRules.CastleActGray))
                                                             QuantumRefrigiz.ChessRules.CastleActGray = true;
                                                         QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0,OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber  , QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActGray, Convert);
                                                     }
                                                     else
                                                     {
                                                         if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                                         {
                                                             if (R.CromosomColumn == 0)
                                                                 Convert = true;
                                                         }
                                                         if ((QuantumRefrigiz.ChessRules.SmallKingCastleBrown || QuantumRefrigiz.ChessRules.BigKingCastleBrown) && (!QuantumRefrigiz.ChessRules.CastleActBrown))
                                                             QuantumRefrigiz.ChessRules.CastleActBrown = true;

                                                         QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0,OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber  , QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActBrown, Convert);
                                                     }
                                                     SetBoxStatistic(QuantumRefrigiz.AllDraw.SyntaxToWrite);
                                                     RefreshBoxStatistic();
                                                 }
                                             }
                                             using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                                             {
                                                 soundClick.Play();
                                                 soundClick.Dispose();
                                             }


                                             OrderPlate *= -1;
                                             BobSection = true;
                                             DrawQ.TableList.Clear();
                                             DrawQ.TableList.Add(CloneATable(Table));
                                             Draw.SetRowColumn(0);
                                             InsertTableAtDatabase(Table);
                                             GrayTimer.StartTime("GrayTimer");
                                             BrownTimer.StopTime();






                                         }

                                     }
                                 }
                                 else
                                 {
                                     Stockfish = false;
                                     StateCC = false;
                                     StateCP = false;
                                     MessageBox.Show("Mirror Objects please!");
                                 }
                             }
                         }
                         else
                             if (StateGe)
                             {
                                    GeneticAction();



                             }


                     */


                    {


                        if (QuantumRefrigiz.AllDraw.MouseClick == 0 && RowClickP != -1)
                        {

                            //HitRecustruct();
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;
                            RowClick = -1;
                            ColumnClick = -1;
                            RowClickP = -1;
                            ColumnClickP = -1;
                            RowRealesed = -1;
                            ColumnRealeased = -1;
                            RowRealesedP = -1;
                            ColumnClickP = -1;

                        }
                        else
                        {
                            if (QuantumRefrigiz.AllDraw.MouseClick >= 2)
                            {

                                using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                                {
                                    soundClick.Play();
                                    //soundClick.Dispose();
                                }



                            }
                        }


                        QuantumRefrigiz.AllDraw.RedrawTable = false;
                    }

                }
                catch (Exception t)
                {
                    Log(t);
                }
            }


        }
        //Error Handling.
        static void Log(Exception ex)
        {
            try
            {
                Object a = new Object();
                lock (a)
                {
                    string stackTrace = ex.ToString();
                    File.AppendAllText(Root + "\\ErrorProgramRun.txt", stackTrace + ": On" + DateTime.Now.ToString()); // path of file where stack trace will be stored.
                }
            }
            catch (Exception t) { Log(t); }
        }
        //Constructor No2
        public FormRefrigtz(bool AllDra)
        {
            Object O = new Object();
            lock (O)
            {
                AllDrawLoad = AllDra;
                InitializeComponent();
                X1 = TextBoxText.Location.X;
                Y1 = TextBoxText.Location.Y - 30;
                X2 = TextBoxText.Location.X;
                Y2 = TextBoxText.Location.Y + 30 + TextBoxText.Size.Height;
                if (!AllDrawLoad)
                {
                    this.PictureBoxRefrigtz.Size = new Size((this.PictureBoxRefrigtz.Width / 8) * 8, (this.PictureBoxRefrigtz.Height / 8) * 8);

                    t1 = new Thread(new ThreadStart(AliceWithPerson));
                    t2 = new Thread(new ThreadStart(BobAction));
                    t3 = new Thread(new ThreadStart(AliceAction));
                    t4 = new Thread(new ThreadStart(GeneticAction));
                    //tttt = new Thread(new ThreadStart(SetRefregitzDLL));
                    //ttt = new Thread(new ThreadStart(SetNodesCount));
                }


                if (!Quantum)
                {
                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            RefrigtzDLL.AllDraw.TableVeryfy[i, j] = Table[i, j];
                            RefrigtzDLL.AllDraw.TableVeryfyConst[i, j] = Table[i, j];
                        }
                    }
                    RefrigtzDLL.ThinkingChess.LearniningTable = new LearningMachine.NetworkQuantumLearningKrinskyAtamata(8, 8, 8);
                }
                else
                {
                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            QuantumRefrigiz.AllDraw.TableVeryfy[i, j] = Table[i, j];
                            QuantumRefrigiz.AllDraw.TableVeryfyConst[i, j] = Table[i, j];
                        }
                    }
                    QuantumRefrigiz.ThinkingQuantumChess.LearniningTable = new LearningMachine.NetworkQuantumLearningKrinskyAtamata(8, 8, 8);
                }


            }
        }

        //Acccess Point

        //Syncronization Between Class Dlls.
        private void SetTimerDLL()
        {
            Object OO = new Object();
            lock (OO)
            {
                SetTimer = true;
                do
                {
                    Object O = new Object();
                    lock (O)
                    {
                        if (!Quantum)
                        {
                            //while (!StateCC && !StateCP && !StateGe)
                            Refrigtz.Timer.AStarGreadyFirstSearch = RefrigtzDLL.AllDraw.AStarGreadyFirstSearch;
                            Refrigtz.Timer.AStarGreedytiLevelMax = RefrigtzDLL.AllDraw.AStarGreedyiLevelMax;
                            Refrigtz.Timer.UseDoubleTime = RefrigtzDLL.AllDraw.UseDoubleTime;
                            Refrigtz.Timer.StoreAllDrawCount = RefrigtzDLL.AllDraw.StoreADraw.Count;
                        }
                        else
                        {
                            Refrigtz.Timer.AStarGreadyFirstSearch = QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch;
                            Refrigtz.Timer.AStarGreedytiLevelMax = QuantumRefrigiz.AllDraw.AStarGreedyiLevelMax;
                            Refrigtz.Timer.UseDoubleTime = QuantumRefrigiz.AllDraw.UseDoubleTime;
                            Refrigtz.Timer.StoreAllDrawCount = QuantumRefrigiz.AllDraw.StoreADraw.Count;
                        }
                    }
                }
                while (true);
                //SetTimer = false;

            }
        }
        delegate void SetlableRefregitzMaxValueCalBack(Label Refregitz, String value);
        private void SetlableRefregitzMaxValue(Label Refregitz, String value)
        {
            Object OO = new Object();
            lock (OO)
            {
                try
                {
                    Object O = new Object();
                    lock (O)
                    {
                        if (Refregitz.InvokeRequired)
                        {
                            SetlableRefregitzMaxValueCalBack d = new SetlableRefregitzMaxValueCalBack(SetlableRefregitzMaxValue);
                            //Refregitz.Text = "";
                            Refregitz.Invoke(new Action(() => Refregitz.Text = value));
                            //Refregitz.Text = value;
                            //SetlableRefregitzRefresh(Refregitz);
                            //Refregitz.Refresh();
                        }
                        else
                        {
                            //Refregitz.Text = "";
                            Refregitz.Text = value;
                            // SetlableRefregitzRefresh(Refregitz);
                            Refregitz.Refresh();
                        }
                    }
                }
                catch (Exception t)
                {
                    Log(t);
                }
            }
        }
        delegate void SetlableRefregitzRefreshCalBack(Label Refregitz);
        private void SetlableRefregitzRefresh(Label Refregitz)
        {
            Object OO = new Object();
            lock (OO)
            {
                try
                {
                    Object O = new Object();
                    lock (O)
                    {
                        if (Refregitz.InvokeRequired)
                        {
                            SetlableRefregitzRefreshCalBack d = new SetlableRefregitzRefreshCalBack(SetlableRefregitzRefresh);
                            Refregitz.Refresh();
                        }
                        else
                        {

                            Refregitz.Refresh();
                        }
                    }
                }
                catch (Exception t)
                {
                    Log(t);
                }
            }
        }
        delegate void SetProgressBarRefregitzValueCalBack(ProgressBar Refregitz, Int32 value);
        private void SetProgressBarRefregitzValue(ProgressBar Refregitz, Int32 value)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (Refregitz.InvokeRequired)
                    {
                        SetProgressBarRefregitzValueCalBack d = new SetProgressBarRefregitzValueCalBack(SetProgressBarRefregitzValue);
                        Refregitz.Invoke(new Action(() => Refregitz.Value = value));
                    }
                    else
                    {
                        Refregitz.Value = value;
                    }
                }
                catch (Exception t)
                {
                    Log(t);
                }
            }

        }
        delegate void SetPictureBoxRefregitzUpdateCalBack(PictureBox Refregitz);
        private void SetPrictureBoxRefregitzUpdate(PictureBox Refregitz)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (Refregitz.InvokeRequired)
                    {
                        SetPictureBoxRefregitzUpdateCalBack d = new SetPictureBoxRefregitzUpdateCalBack(SetPrictureBoxRefregitzUpdate);
                        Refregitz.Invoke(new Action(() => Refregitz.Update()));
                    }
                    else
                    {
                        Refregitz.Update();
                    }
                }
                catch (Exception t)
                {
                    Log(t);
                }
            }
        }
        delegate void SetPictureBoxRefregitzInvalidateCalBack(PictureBox Refregitz);
        private void SetPrictureBoxRefregitzInvalidate(PictureBox Refregitz)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (Refregitz.InvokeRequired)
                    {
                        SetPictureBoxRefregitzInvalidateCalBack d = new SetPictureBoxRefregitzInvalidateCalBack(SetPrictureBoxRefregitzInvalidate);
                        Refregitz.Invoke(new Action(() => Refregitz.Invalidate()));
                    }
                    else
                    {
                        Refregitz.Invalidate();
                    }
                }
                catch (Exception t)
                {
                    Log(t);
                }
            }

        }
        delegate void SetProgressBarRefregitzMaxValueCalBack(ProgressBar Refregitz, Int32 value);
        private void SetProgressBarRefregitzMaxValue(ProgressBar Refregitz, Int32 value)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (Refregitz.InvokeRequired)
                    {
                        SetProgressBarRefregitzMaxValueCalBack d = new SetProgressBarRefregitzMaxValueCalBack(SetProgressBarRefregitzMaxValue);
                        Refregitz.Invoke(new Action(() => Refregitz.Maximum = value));
                    }
                    else
                    {
                        Refregitz.Maximum = value;
                    }
                }
                catch (Exception t)
                {
                    Log(t);
                }
            }

        }

        //Boolean Setting of Illustration at Slected Object Rules.
        bool[,] VeryFye(int[,] Table, int Order, Color a)
        {
            int Cdummy = 0;
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    Cdummy = RefrigtzDLL.ChessRules.CurrentOrder;
                    if (OrderPlate == 1)
                        RefrigtzDLL.ChessRules.CurrentOrder = 1;
                    else
                        RefrigtzDLL.ChessRules.CurrentOrder = -1;
                }
                else
                {
                    Cdummy = QuantumRefrigiz.ChessRules.CurrentOrder;
                    if (OrderPlate == 1)
                        QuantumRefrigiz.ChessRules.CurrentOrder = 1;
                    else
                        QuantumRefrigiz.ChessRules.CurrentOrder = -1;
                }
                bool[,] Tab = new bool[8, 8];

                for (int i = 0; i < 8; i++)
                {
                    for (int j = 0; j < 8; j++)
                    {
                        if (!Quantum)
                        {
                            if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, Table[(int)RowClickP, (int)ColumnClickP], CloneATable(Table), Order, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, i, j, a, Table[(int)RowClickP, (int)ColumnClickP]))
                                Tab[i, j] = true;
                        }
                        else
                        {
                            if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, Table[(int)RowClickP, (int)ColumnClickP], CloneATable(Table), Order, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, i, j, a, Table[(int)RowClickP, (int)ColumnClickP]))
                                Tab[i, j] = true;
                        }

                    }
                }
                if (!Quantum)
                    RefrigtzDLL.ChessRules.CurrentOrder = Cdummy;
                else
                    QuantumRefrigiz.ChessRules.CurrentOrder = Cdummy;
                return Tab;
            }
        }
        //Delegate Of Form Close Visibility.
        delegate void SetCloseVisibleCallback();

        public void SetCloseVisible()
        {
            Object O = new Object();
            lock (O)
            {         // InvokeRequired required compares the thread ID of the
                      // calling thread to the thread ID of the creating thread.
                      // If these threads are different, it returns true.
                if (this.InvokeRequired)
                {
                    try
                    {

                        SetCloseVisibleCallback d = new SetCloseVisibleCallback(SetCloseVisible);
                        this.Invoke(new Action(() => this.Close()));
                    }
                    catch (Exception t) { Log(t); }
                }
                else
                {
                    try
                    {
                        this.Close();
                    }
                    catch (Exception t) { Log(t); }
                }

            }
        }
        void SetImageOfPictrueBox(ref PictureBox Ap, int
            Hit)
        {
            Object O = new Object();
            lock (O)
            {
                if (Hit > 0)
                {
                    if (Hit == 1)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\SG.png");
                    else
                        if (Hit == 2)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\EG.png");
                    else
                            if (Hit == 3)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\HG.png");
                    else
                                if (Hit == 4)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\BrG.png");
                    else
                                    if (Hit == 5)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\MG.png");
                }
                else
                {
                    if (Hit == -1)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\SB.png");
                    else
                        if (Hit == -2)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\EB.png");
                    else
                            if (Hit == -3)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\HB.png");
                    else
                                if (Hit == -4)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\BrB.png");
                    else
                                    if (Hit == -5)
                        Ap.Image = Image.FromFile(Root + "\\Images\\Fit\\Small\\MB.png");
                }
                //Ap.BringToFront();
            }
        }
        public void SetObjectInPictureBox(int R, int C)
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    int Hit = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R, C];
                    if (Hit > 0)
                    {
                        if (GrayCountHiiting == 1)
                            SetImageOfPictrueBox(ref PictureBox1, Hit);
                        else
                            if (GrayCountHiiting == 2)
                            SetImageOfPictrueBox(ref PictureBox2, Hit);
                        else
                                if (GrayCountHiiting == 3)
                            SetImageOfPictrueBox(ref PictureBox3, Hit);
                        else
                                    if (GrayCountHiiting == 4)
                            SetImageOfPictrueBox(ref PictureBox4, Hit);
                        else
                                        if (GrayCountHiiting == 5)
                            SetImageOfPictrueBox(ref PictureBox5, Hit);
                        else
                                            if (GrayCountHiiting == 6)
                            SetImageOfPictrueBox(ref PictureBox6, Hit);
                        else
                                                if (GrayCountHiiting == 7)
                            SetImageOfPictrueBox(ref PictureBox7, Hit);
                        else
                                                    if (GrayCountHiiting == 8)
                            SetImageOfPictrueBox(ref PictureBox8, Hit);
                        else
                                                        if (GrayCountHiiting == 9)
                            SetImageOfPictrueBox(ref PictureBox9, Hit);
                        else
                                                            if (GrayCountHiiting == 10)
                            SetImageOfPictrueBox(ref PictureBox10, Hit);
                        else
                                                                if (GrayCountHiiting == 11)
                            SetImageOfPictrueBox(ref PictureBox11, Hit);
                        else
                                                                    if (GrayCountHiiting == 12)
                            SetImageOfPictrueBox(ref PictureBox12, Hit);
                        else
                                                                        if (GrayCountHiiting == 13)
                            SetImageOfPictrueBox(ref PictureBox13, Hit);
                        else
                                                                            if (GrayCountHiiting == 14)
                            SetImageOfPictrueBox(ref PictureBox14, Hit);
                        else
                                                                                if (GrayCountHiiting == 15)
                            SetImageOfPictrueBox(ref PictureBox15, Hit);
                        else
                                                                                    if (GrayCountHiiting == 16)
                            SetImageOfPictrueBox(ref PictureBox16, Hit);
                        GrayCountHiiting++;
                    }
                    else if (Hit < 0)
                    {
                        if (BrownCountHiiting == 17)
                            SetImageOfPictrueBox(ref PictureBox17, Hit);
                        else
                            if (BrownCountHiiting == 18)
                            SetImageOfPictrueBox(ref PictureBox18, Hit);
                        else
                                if (BrownCountHiiting == 19)
                            SetImageOfPictrueBox(ref PictureBox19, Hit);
                        else
                                    if (BrownCountHiiting == 20)
                            SetImageOfPictrueBox(ref PictureBox20, Hit);
                        else
                                        if (BrownCountHiiting == 21)
                            SetImageOfPictrueBox(ref PictureBox21, Hit);
                        else
                                            if (BrownCountHiiting == 22)
                            SetImageOfPictrueBox(ref PictureBox22, Hit);
                        else
                                                if (BrownCountHiiting == 23)
                            SetImageOfPictrueBox(ref PictureBox23, Hit);
                        else
                                                    if (BrownCountHiiting == 24)
                            SetImageOfPictrueBox(ref PictureBox24, Hit);
                        else
                                                        if (BrownCountHiiting == 25)
                            SetImageOfPictrueBox(ref PictureBox25, Hit);
                        else
                                                            if (BrownCountHiiting == 26)
                            SetImageOfPictrueBox(ref PictureBox26, Hit);
                        else
                                                                if (BrownCountHiiting == 27)
                            SetImageOfPictrueBox(ref PictureBox27, Hit);
                        else
                                                                    if (BrownCountHiiting == 28)
                            SetImageOfPictrueBox(ref PictureBox28, Hit);
                        else
                                                                        if (BrownCountHiiting == 29)
                            SetImageOfPictrueBox(ref PictureBox29, Hit);
                        else
                                                                            if (BrownCountHiiting == 10)
                            SetImageOfPictrueBox(ref PictureBox30, Hit);
                        else
                                                                                if (BrownCountHiiting == 31)
                            SetImageOfPictrueBox(ref PictureBox31, Hit);
                        else
                                                                                    if (BrownCountHiiting == 32)
                            SetImageOfPictrueBox(ref PictureBox32, Hit);
                        BrownCountHiiting++;
                    }

                }
                else
                {
                    int Hit = QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R, C];
                    if (Hit > 0)
                    {
                        if (GrayCountHiiting == 1)
                            SetImageOfPictrueBox(ref PictureBox1, Hit);
                        else
                            if (GrayCountHiiting == 2)
                            SetImageOfPictrueBox(ref PictureBox2, Hit);
                        else
                                if (GrayCountHiiting == 3)
                            SetImageOfPictrueBox(ref PictureBox3, Hit);
                        else
                                    if (GrayCountHiiting == 4)
                            SetImageOfPictrueBox(ref PictureBox4, Hit);
                        else
                                        if (GrayCountHiiting == 5)
                            SetImageOfPictrueBox(ref PictureBox5, Hit);
                        else
                                            if (GrayCountHiiting == 6)
                            SetImageOfPictrueBox(ref PictureBox6, Hit);
                        else
                                                if (GrayCountHiiting == 7)
                            SetImageOfPictrueBox(ref PictureBox7, Hit);
                        else
                                                    if (GrayCountHiiting == 8)
                            SetImageOfPictrueBox(ref PictureBox8, Hit);
                        else
                                                        if (GrayCountHiiting == 9)
                            SetImageOfPictrueBox(ref PictureBox9, Hit);
                        else
                                                            if (GrayCountHiiting == 10)
                            SetImageOfPictrueBox(ref PictureBox10, Hit);
                        else
                                                                if (GrayCountHiiting == 11)
                            SetImageOfPictrueBox(ref PictureBox11, Hit);
                        else
                                                                    if (GrayCountHiiting == 12)
                            SetImageOfPictrueBox(ref PictureBox12, Hit);
                        else
                                                                        if (GrayCountHiiting == 13)
                            SetImageOfPictrueBox(ref PictureBox13, Hit);
                        else
                                                                            if (GrayCountHiiting == 14)
                            SetImageOfPictrueBox(ref PictureBox14, Hit);
                        else
                                                                                if (GrayCountHiiting == 15)
                            SetImageOfPictrueBox(ref PictureBox15, Hit);
                        else
                                                                                    if (GrayCountHiiting == 16)
                            SetImageOfPictrueBox(ref PictureBox16, Hit);
                        GrayCountHiiting++;
                    }
                    else if (Hit < 0)
                    {
                        if (BrownCountHiiting == 17)
                            SetImageOfPictrueBox(ref PictureBox17, Hit);
                        else
                            if (BrownCountHiiting == 18)
                            SetImageOfPictrueBox(ref PictureBox18, Hit);
                        else
                                if (BrownCountHiiting == 19)
                            SetImageOfPictrueBox(ref PictureBox19, Hit);
                        else
                                    if (BrownCountHiiting == 20)
                            SetImageOfPictrueBox(ref PictureBox20, Hit);
                        else
                                        if (BrownCountHiiting == 21)
                            SetImageOfPictrueBox(ref PictureBox21, Hit);
                        else
                                            if (BrownCountHiiting == 22)
                            SetImageOfPictrueBox(ref PictureBox22, Hit);
                        else
                                                if (BrownCountHiiting == 23)
                            SetImageOfPictrueBox(ref PictureBox23, Hit);
                        else
                                                    if (BrownCountHiiting == 24)
                            SetImageOfPictrueBox(ref PictureBox24, Hit);
                        else
                                                        if (BrownCountHiiting == 25)
                            SetImageOfPictrueBox(ref PictureBox25, Hit);
                        else
                                                            if (BrownCountHiiting == 26)
                            SetImageOfPictrueBox(ref PictureBox26, Hit);
                        else
                                                                if (BrownCountHiiting == 27)
                            SetImageOfPictrueBox(ref PictureBox27, Hit);
                        else
                                                                    if (BrownCountHiiting == 28)
                            SetImageOfPictrueBox(ref PictureBox28, Hit);
                        else
                                                                        if (BrownCountHiiting == 29)
                            SetImageOfPictrueBox(ref PictureBox29, Hit);
                        else
                                                                            if (BrownCountHiiting == 10)
                            SetImageOfPictrueBox(ref PictureBox30, Hit);
                        else
                                                                                if (BrownCountHiiting == 31)
                            SetImageOfPictrueBox(ref PictureBox31, Hit);
                        else
                                                                                    if (BrownCountHiiting == 32)
                            SetImageOfPictrueBox(ref PictureBox32, Hit);
                        BrownCountHiiting++;
                    }
                }
            }
        }

        void SetNodesCount()
        {
            Object OO = new Object();
            lock (OO)
            {
                SetNode = true;
                //do
                {
                    Object O = new Object();
                    lock (O)
                    {
                        if (!Quantum)
                        {
                            Int64 FirstTimeD = DateTime.Now.Hour * 3600000 + DateTime.Now.Minute * 60000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;
                            Int64 FirstNode = RefrigtzDLL.ThinkingChess.NumbersOfAllNode;
                            Int64 EndTime = DateTime.Now.Hour * 3600000 + DateTime.Now.Minute * 60000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;
                            Double S = ((double)RefrigtzDLL.ThinkingChess.NumbersOfAllNode - FirstNode) / (((double)EndTime - (double)FirstTimeD) / 1000.0);
                            Store = ((Store * Count) + S) / (Count + 1.0);
                            Count++;
                            if (RefrigtzDLL.AllDraw.ActionStringReady)
                                SetlableRefregitzMaxValue(labelNodesCount, RefrigtzDLL.ThinkingChess.NumbersOfAllNode.ToString() + " at time " + ((int)(Store)).ToString() + "N/s and by Elapsed time " + ((int)((EndTime - TimeElapsed) / 1000)).ToString() + " s by string" + RefrigtzDLL.AllDraw.ActionString.ToString() + " By CheckMate Count " + RefrigtzDLL.ThinkingChess.FoundFirstMating.ToString() + " By CheckMate SELF Count " + RefrigtzDLL.ThinkingChess.FoundFirstSelfMating.ToString() + " For Order  " + RefrigtzDLL.AllDraw.OrderPlate.ToString());
                            else
                                SetlableRefregitzMaxValue(labelNodesCount, RefrigtzDLL.ThinkingChess.NumbersOfAllNode.ToString() + " at time " + ((int)(Store)).ToString() + "N/s and by Elapsed time " + ((int)((EndTime - TimeElapsed) / 1000)).ToString() + " s" + " By CheckMate Count " + RefrigtzDLL.ThinkingChess.FoundFirstMating.ToString() + " By CheckMate SELF Count " + RefrigtzDLL.ThinkingChess.FoundFirstSelfMating.ToString() + " For Order  " + RefrigtzDLL.AllDraw.OrderPlate.ToString());
                        }
                        else
                        {
                            Int64 FirstTimeD = DateTime.Now.Hour * 3600000 + DateTime.Now.Minute * 60000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;
                            Int64 FirstNode = QuantumRefrigiz.ThinkingQuantumChess.NumbersOfAllNode;
                            Int64 EndTime = DateTime.Now.Hour * 3600000 + DateTime.Now.Minute * 60000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;
                            Double S = ((double)QuantumRefrigiz.ThinkingQuantumChess.NumbersOfAllNode - FirstNode) / (((double)EndTime - (double)FirstTimeD) / 1000.0);
                            Store = ((Store * Count) + S) / (Count + 1.0);
                            Count++;
                            if (QuantumRefrigiz.AllDraw.ActionStringReady)
                                SetlableRefregitzMaxValue(labelNodesCount, QuantumRefrigiz.ThinkingQuantumChess.NumbersOfAllNode.ToString() + " at time " + ((int)(Store)).ToString() + "N/s and by Elapsed time " + ((int)((EndTime - TimeElapsed) / 1000)).ToString() + " s by string" + QuantumRefrigiz.AllDraw.ActionString.ToString() + " By CheckMate Count " + QuantumRefrigiz.ThinkingQuantumChess.FoundFirstMating.ToString() + " By CheckMate SELF Count " + QuantumRefrigiz.ThinkingQuantumChess.FoundFirstSelfMating.ToString() + " For Order  " + QuantumRefrigiz.AllDraw.OrderPlate.ToString());
                            else
                                SetlableRefregitzMaxValue(labelNodesCount, QuantumRefrigiz.ThinkingQuantumChess.NumbersOfAllNode.ToString() + " at time " + ((int)(Store)).ToString() + "N/s and by Elapsed time " + ((int)((EndTime - TimeElapsed) / 1000)).ToString() + " s" + " By CheckMate Count " + QuantumRefrigiz.ThinkingQuantumChess.FoundFirstMating.ToString() + " By CheckMate SELF Count " + QuantumRefrigiz.ThinkingQuantumChess.FoundFirstSelfMating.ToString() + " For Order  " + QuantumRefrigiz.AllDraw.OrderPlate.ToString());
                        }
                    }
                } //while (true);
                  //SetNode = false;
            }
        }
        void WaitOnQuantumConversion()
        {
            Object O = new Object();
            lock (O)
            {
                while (QuantumRefrigiz.AllDraw.ConvertedKind == -1) { QuantumRefrigiz.AllDraw.ConvertedKind = FormُSelectItems.Items; }
            }

        }
        void WaitOnRefrigitzDLLConversion()
        {
            Object O = new Object();
            lock (O)
            {
                while (RefrigtzDLL.AllDraw.ConvertedKind == -1) { RefrigtzDLL.AllDraw.ConvertedKind = FormُSelectItems.Items; }

            }
        }
        void SetRefregitzDLL()
        {
            Object O = new Object();
            lock (O)
            {
                SetDLL = true;
                //do
                {
                    Object o = new Object();
                    lock (o)
                    {
                        if (!Quantum)
                        {
                            /*    if (Move == MovmentsNumber && (!AllDo))
                                {
                                    Draw.SetRowColumn(0, true);
                                }
                                else
                                    Move = MovmentsNumber;

        */

                            RefrigtzDLL.AllDraw.Deeperthandeeper = Deeperthandeeper;
                            RefrigtzDLL.AllDraw.Root = Root;
                            RefrigtzDLL.AllDraw.OrderPlate = OrderPlate;
                            RefrigtzDLL.AllDraw.Blitz = Blitz;
                            ConvertWait = RefrigtzDLL.AllDraw.ConvertWait;
                            RefrigtzDLL.AllDraw.Stockfish = Stockfish;
                            RefrigtzDLL.AllDraw.Person = Person;
                            RefrigtzDLL.AllDraw.THISSecradioButtonGrayOrderChecked = Sec.RadioButtonGrayOrder.Checked;
                            RefrigtzDLL.AllDraw.THISSecradioButtonBrownOrderChecked = Sec.RadioButtonBrownOrder.Checked;
                            RefrigtzDLL.AllDraw.MovmentsNumber = MovmentsNumber;
                            /*while (!(RefrigtzDLL.ChessRules.ObjectHittedRow != -1 && RefrigtzDLL.ChessRules.ObjectHittedColumn != -1) &&
                                (!RefrigtzDLL.AllDraw.ActionStringReady) &&
                                     (!(RefrigtzDLL.AllDraw.H); != "")) &&
                                         (!(RefrigtzDLL.AllDraw.ConvertedKind == -1)) &&
                                             (!StateCC) &&
                                                 (!StateCP))
                            {
                                

                            }*/
                            if (RefrigtzDLL.ChessRules.ObjectHittedRow != -1 && RefrigtzDLL.ChessRules.ObjectHittedColumn != -1)
                            {
                                SetObjectInPictureBox(RefrigtzDLL.ChessRules.ObjectHittedRow, RefrigtzDLL.ChessRules.ObjectHittedColumn);
                                RefrigtzDLL.ChessRules.ObjectHittedRow = -1;
                                RefrigtzDLL.ChessRules.ObjectHittedColumn = -1;
                            }
                            if (RefrigtzDLL.AllDraw.ActionStringReady)
                            {
                                SetBoxText(RefrigtzDLL.AllDraw.ActionString.ToString());
                                RefrigtzDLL.AllDraw.ActionString.Clear();
                                RefrigtzDLL.AllDraw.ActionStringReady = false;
                                //RefreshBoxText();
                            }

                            if (RefrigtzDLL.AllDraw.OutPut.Length != 0)
                            {
                                String Temp = "";
                                Object OO = new Object();
                                lock (OO)
                                {
                                    Temp = RefrigtzDLL.AllDraw.OutPut.ToString();
                                }
                                SetBoxText(Temp);
                                RefrigtzDLL.AllDraw.OutPut.Clear();
                                //RefreshBoxText();

                            }


                            if (RefrigtzDLL.AllDraw.ConvertedKind == -1)
                            {
                                FormُSelectItems.Items = -1;
                                FormُSelectItems A = new FormُSelectItems();
                                A.ShowDialog();


                                var array = Task.Factory.StartNew(() => WaitOnRefrigitzDLLConversion()); array.Wait(); array.Dispose();
                            }

                            if (LoadedDLL)
                            {
                                SetComboBoxText();
                                LoadedDLL = false;
                            }
                            //public static AllDraw THISDummy;
                            RefrigtzDLL.AllDraw.StateCP = StateCP;
                            RefrigtzDLL.AllDraw.StateCC = StateCC;
                            if (StateCP && (!Stockfish))
                            {
                                if (OrderPlate == -1 && Sec.RadioButtonGrayOrder.Checked)
                                {
                                    LastRow = RefrigtzDLL.AllDraw.LastRow;
                                    LastColumn = RefrigtzDLL.AllDraw.LastColumn;
                                    NextRow = RefrigtzDLL.AllDraw.NextRow;
                                    NextColumn = RefrigtzDLL.AllDraw.NextRow;
                                }
                                else if (OrderPlate == 1 && Sec.RadioButtonBrownOrder.Checked)
                                {
                                    LastRow = RefrigtzDLL.AllDraw.LastRow;
                                    LastColumn = RefrigtzDLL.AllDraw.LastColumn;
                                    NextRow = RefrigtzDLL.AllDraw.NextRow;
                                    NextColumn = RefrigtzDLL.AllDraw.NextRow;
                                }
                            }
                            else
                                    if (StateCP && Stockfish)
                            {
                                if (OrderPlate == -1 && Sec.RadioButtonGrayOrder.Checked)
                                {
                                    LastRow = RefrigtzDLL.AllDraw.LastRow;
                                    LastColumn = RefrigtzDLL.AllDraw.LastColumn;
                                    NextRow = RefrigtzDLL.AllDraw.NextRow;
                                    NextColumn = RefrigtzDLL.AllDraw.NextRow;
                                }
                            }

                        }
                        else
                        {
                            /* if (Move == MovmentsNumber && (!AllDo))
                             {
                                 DrawQ.SetRowColumn(0, true);
                             }
                             else
                                 Move = MovmentsNumber;
     */
                            QuantumRefrigiz.AllDraw.Deeperthandeeper = Deeperthandeeper;
                            QuantumRefrigiz.AllDraw.Root = Root;
                            QuantumRefrigiz.AllDraw.OrderPlate = OrderPlate;
                            QuantumRefrigiz.AllDraw.Blitz = Blitz;
                            ConvertWait = QuantumRefrigiz.AllDraw.ConvertWait;
                            QuantumRefrigiz.AllDraw.Stockfish = Stockfish;
                            QuantumRefrigiz.AllDraw.Person = Person;
                            QuantumRefrigiz.AllDraw.THISSecradioButtonGrayOrderChecked = Sec.RadioButtonGrayOrder.Checked;
                            QuantumRefrigiz.AllDraw.THISSecradioButtonBrownOrderChecked = Sec.RadioButtonBrownOrder.Checked;
                            QuantumRefrigiz.AllDraw.MovmentsNumber = MovmentsNumber;
                            /*while (!(QuantumRefrigiz.ChessRules.ObjectHittedRow != -1 && QuantumRefrigiz.ChessRules.ObjectHittedColumn != -1) &&
                                (!QuantumRefrigiz.AllDraw.ActionStringReady) &&
                                     (!(QuantumRefrigiz.AllDraw.OutPut.ToString() != "")) &&
                                         (!(QuantumRefrigiz.AllDraw.ConvertedKind == -1)) &&
                                             (!StateCC) &&
                                                 (!StateCP))
                            {
                                

                            }*/
                            if (QuantumRefrigiz.ChessRules.ObjectHittedRow != -1 && QuantumRefrigiz.ChessRules.ObjectHittedColumn != -1)
                            {
                                SetObjectInPictureBox(QuantumRefrigiz.ChessRules.ObjectHittedRow, QuantumRefrigiz.ChessRules.ObjectHittedColumn);
                                QuantumRefrigiz.ChessRules.ObjectHittedRow = -1;
                                QuantumRefrigiz.ChessRules.ObjectHittedColumn = -1;
                            }
                            if (QuantumRefrigiz.AllDraw.ActionStringReady)
                            {
                                SetBoxText(QuantumRefrigiz.AllDraw.ActionString.ToString());
                                //RefreshBoxText();
                                QuantumRefrigiz.AllDraw.ActionString.Clear();
                                QuantumRefrigiz.AllDraw.ActionStringReady = false;
                            }
                            if (QuantumRefrigiz.AllDraw.OutPut.ToString().Length != 0)
                            {
                                String Temp = "";
                                Object OO = new Object();
                                lock (OO)
                                {
                                    Temp = QuantumRefrigiz.AllDraw.OutPut.ToString();
                                }
                                SetBoxText(Temp);
                                //RefreshBoxText();
                                QuantumRefrigiz.AllDraw.OutPut.Clear();

                            }


                            if (QuantumRefrigiz.AllDraw.ConvertedKind == -1)
                            {
                                FormُSelectItems.Items = -1;
                                FormُSelectItems A = new FormُSelectItems();
                                A.ShowDialog();


                                var array = Task.Factory.StartNew(() => WaitOnQuantumConversion()); array.Wait(); array.Dispose();


                            }

                            if (LoadedDLL)
                            {
                                SetComboBoxText();
                                LoadedDLL = false;
                            }
                            //public static AllDraw THISDummy;
                            QuantumRefrigiz.AllDraw.StateCP = StateCP;
                            QuantumRefrigiz.AllDraw.StateCC = StateCC;
                            if (StateCP && (!Stockfish))
                            {
                                if (OrderPlate == -1 && Sec.RadioButtonGrayOrder.Checked)
                                {
                                    LastRow = QuantumRefrigiz.AllDraw.LastRowQ;
                                    LastColumn = QuantumRefrigiz.AllDraw.LastColumnQ;
                                    NextRow = QuantumRefrigiz.AllDraw.NextRowQ;
                                    NextColumn = QuantumRefrigiz.AllDraw.NextRowQ;
                                }
                                else if (OrderPlate == 1 && Sec.RadioButtonBrownOrder.Checked)
                                {
                                    LastRow = QuantumRefrigiz.AllDraw.LastRowQ;
                                    LastColumn = QuantumRefrigiz.AllDraw.LastColumnQ;
                                    NextRow = QuantumRefrigiz.AllDraw.NextRowQ;
                                    NextColumn = QuantumRefrigiz.AllDraw.NextRowQ;
                                }
                            }
                            else
                                    if (StateCP && Stockfish)
                            {
                                if (OrderPlate == -1 && Sec.RadioButtonGrayOrder.Checked)
                                {
                                    LastRow = QuantumRefrigiz.AllDraw.LastRowQ;
                                    LastColumn = QuantumRefrigiz.AllDraw.LastColumnQ;
                                    NextRow = QuantumRefrigiz.AllDraw.NextRowQ;
                                    NextColumn = QuantumRefrigiz.AllDraw.NextRowQ;

                                }
                            }
                        }

                    }
                }// while (true);


                //SetDLL = false;
            }

        }
        void Timerstart()
        {
            while (true)
            {
                //queueManagementTimer.Start();
                //queueManagementTimerMove.Start();
                //queueManagementTimerSetNodesCount.Start();
                //queueManagementTimerSetRefrigitDLL.Start();

            }
        }
        bool DrawManagement()
        {
            Object OO = new Object();
            lock (OO)
            {
                SetAllDrawKind();

                //Set Configuration To True for some unknown reason!.
                //UpdateConfigurationTableVal = true;                             
                SetAllDrawKindString();

                bool Found = false;
                String P = Path.GetFullPath(path3);
                AllDrawReplacement = Path.Combine(P, AllDrawKindString);
                if (!NotFoundBegin)
                {
                    if (File.Exists(AllDrawKindString))
                    {

                        if (File.Exists(AllDrawReplacement))
                        {
                            if ((!FOUND) && ((new System.IO.FileInfo(AllDrawKindString).Length) < (new System.IO.FileInfo(AllDrawReplacement)).Length))
                            {
                                File.Delete(AllDrawKindString);
                                File.Copy(AllDrawReplacement, AllDrawKindString);
                                Found = true;
                            }
                            else if (FOUND && ((new System.IO.FileInfo(AllDrawKindString).Length) > (new System.IO.FileInfo(AllDrawReplacement)).Length))
                            {
                                if (File.Exists(AllDrawReplacement))
                                    File.Delete(AllDrawReplacement);
                                File.Copy(AllDrawKindString, AllDrawReplacement);
                                Found = true;
                            }
                        }
                        else
                        {
                            if (!Directory.Exists(Path.GetFullPath(path3)))
                                Directory.CreateDirectory(Path.GetFullPath(path3));
                            File.Copy(AllDrawKindString, AllDrawReplacement);
                            Found = true;

                        }
                        Found = true;
                    }
                    else if (File.Exists(AllDrawReplacement))
                    {
                        File.Copy(AllDrawReplacement, AllDrawKindString);
                        Found = true;
                    }
                }
                else
                {
                    if (File.Exists(AllDrawKindString))
                        File.Delete(AllDrawKindString);
                    if (File.Exists(AllDrawReplacement))
                        File.Delete(AllDrawReplacement);
                    NotFoundBegin = false;
                }
                return Found;
            }
        }
        void DeleteSetADrawKindString(String S)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (File.Exists(S))
                    {
                        File.Delete(S);
                    }
                }
                catch (Exception t) { Log(t); }
            }
        }
        void DeleteSetAllDrawKindString()
        {
            Object O = new Object();
            lock (O)
            {
                if (AllDrawKind == 4)
                {


                    AllDrawKindString = "AllDrawBT.asd";//Both True
                    DeleteSetADrawKindString(AllDrawKindString);
                }
                if (AllDrawKind == 3)
                {
                    AllDrawKindString = "AllDrawFFST.asd";//First false second true
                    DeleteSetADrawKindString(AllDrawKindString);
                }
                if (AllDrawKind == 2)
                {
                    AllDrawKindString = "AllDrawFTSF.asd";//First true second false
                    DeleteSetADrawKindString(AllDrawKindString);
                }
                if (AllDrawKind == 1)
                {
                    AllDrawKindString = "AllDrawFFSF.asd";//Fist false second false
                    DeleteSetADrawKindString(AllDrawKindString);
                }


            }
        }
        void SetAllDrawKindString()
        {
            Object O = new Object();
            lock (O)
            {
                if (AllDrawKind == 4)
                    AllDrawKindString = "AllDrawBT.asd";//Both True
                else
                if (AllDrawKind == 3)
                    AllDrawKindString = "AllDrawFFST.asd";//First false second true
                else
                if (AllDrawKind == 2)
                    AllDrawKindString = "AllDrawFTSF.asd";//First true second false
                else
                if (AllDrawKind == 1)
                    AllDrawKindString = "AllDrawFFSF.asd";//Fist false second false


            }
        }
        void SetAllDrawKind()
        {
            Object O = new Object();
            lock (O)
            {
                if (UsePenaltyRegardMechnisam && AStarGreedyHeuristic)
                    AllDrawKind = 4;
                else
          if ((!UsePenaltyRegardMechnisam) && AStarGreedyHeuristic)
                    AllDrawKind = 3;
                if (UsePenaltyRegardMechnisam && (!AStarGreedyHeuristic))
                    AllDrawKind = 2;
                if ((!UsePenaltyRegardMechnisam) && (!AStarGreedyHeuristic))
                    AllDrawKind = 1;
            }
        }
        void LoadForm()
        {

        }
        private void Load_Form(object sender, EventArgs e)
        {

            Object O = new Object();
            lock (O)
            {
                DrawManagement();

                bool FDrawMangement = false;
                try
                {

                    TakeRoot y = new TakeRoot();

                    FDrawMangement = DrawManagement();


                    BrownTimer = new Refrigtz.Timer(false);
                    GrayTimer = new Refrigtz.Timer(false);
                    TimerText = new Refrigtz.Timer(true);

                    BrownTimer.TimerInitiate("BrownTimer");
                    GrayTimer.TimerInitiate("GrayTimer");
                    //TTimerSet = new Thread(new ThreadStart(SetTimer));
                    //TTimerSet.Start();

                    TimerText.TimerInitiate("TimerText");

                    TimerText.StartTime("TimerText");



                    //Thread tr = new Thread(new ThreadStart(Timerstart));
                    //tr.Start();
                    bool DrawDrawen = false;
                    BackgroundWorkerAllOp.RunWorkerAsync();
                    BackgroundWorkerSetNode.RunWorkerAsync();
                    BackgroundWorkerSetRefD.RunWorkerAsync();
                    // TimerAllOperation.Start();

                    //Set and syncronization with dynamic refregitzdll.   
                    //AllOperate = new Thread(new ThreadStart(AllOperations));
                    //Wehn no need to load.
                    if (File.Exists(Root + "\\Run.txt"))
                    {
                        AllDrawLoad = false;
                        NewTable = false;
                    }

                    //Determne of several refrigitz proccess.
                    if (!LoadAG)
                    {
                        List<Process> a = new List<Process>();
                        a.AddRange(Process.GetProcessesByName("Refrigtz"));
                        if (a.Count > 1)
                        {

                            Object OOooo = new Object();
                            lock (OOooo)
                            {
                                if (System.Windows.Forms.MessageBox.Show(null, "New Instant Of Refregitz!", "New Instant", MessageBoxButtons.YesNo) == DialogResult.No)
                                {

                                    for (int i = 0; i < a.Count; i++)
                                    {
                                        try
                                        {

                                            a[i].Kill();
                                            ExitToolStripMenuItem_Click(sender, e);
                                        }
                                        catch (Exception t) { Log(t); Application.ExitThread(); }

                                    }

                                }
                            }
                        }
                    }
                    //When direcrories not exist.
                    Object ooo = new Object();
                    lock (ooo)
                    {
                        if (!Directory.Exists(Root + "\\Database"))
                        {
                            if (!Directory.Exists(Root + "\\Database\\MainBank"))
                            {
                                Directory.CreateDirectory(Root + "\\Database\\MainBank");
                                File.Move(Root + "\\ChessBank.accdb", Root + "\\Database\\MainBank\\ChessBank.accdb");
                            }
                        }
                        if (!Directory.Exists(Root + "\\Images"))
                        {
                            if (!Directory.Exists(Root + "\\Images\\Original"))
                            {
                                Directory.CreateDirectory(Root + "\\Images\\Original");
                            }
                        }
                    }
                    //When file dos't exist.
                    Object ooooo = new Object();
                    lock (ooooo)
                    {
                        if (!AllDrawLoad)
                        {
                            if (!System.IO.File.Exists(Root + "\\Database\\CurrentBank.accdb"))
                            {
                                System.IO.File.Copy(Root + "\\Database\\MainBank\\ChessBank.accdb", Root + "\\Database\\CurrentBank.accdb");
                                if (!File.Exists(Root + "\\Database\\Monitor.html"))
                                    System.IO.File.Copy(Root + "\\Database\\MainBank\\Monitor_Log.html", Root + "\\Database\\Monitor.html");
                                if (File.Exists("List.txt"))
                                    File.Delete("List.txt");

                                try
                                {
                                    if (System.IO.File.Exists(Root + "\\Database\\CurrentBank.accdb"))
                                    {
                                        if (bookConn != null)
                                            bookConn.Close();
                                        bookConn = new OleDbConnection(connParam);
                                        oleDbCmd.Connection = bookConn;
                                        bookConn.Open();

                                    }
                                }
                                catch (FileNotFoundException t)
                                {
                                    Log(t);

                                }

                                InsertTableAtDatabase(Table);
                                CreateConfigurationTable();
                                SetAllDrawKind();

                                //Set Configuration To True for some unknown reason!.
                                //UpdateConfigurationTableVal = true;                             
                                SetAllDrawKindString();
                                if (FDrawMangement)
                                {
                                    if (!Quantum)
                                        RefrigtzDLL.AllDraw.FirstTraversalTree = false;
                                    else
                                        QuantumRefrigiz.AllDraw.FirstTraversalTree = false;
                                }
                                if (DrawManagement())
                                {
                                    //Load AllDraw.asd
                                    if (!Quantum)
                                        DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                    else
                                        DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                                }
                                else
                                {
                                    if (!Quantum)
                                    {

                                        Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                        Draw.TableList.Clear();
                                        Draw.TableList.Add(CloneATable(Table));
                                        Draw.SetRowColumn(0);
                                        RefrigtzDLL.AllDraw.DepthIterative = 0;
                                        y.t = Draw;

                                    }
                                    else
                                    {

                                        DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                        DrawQ.TableList.Clear();
                                        DrawQ.TableList.Add(CloneATable(Table));
                                        DrawQ.SetRowColumn(0);
                                        QuantumRefrigiz.AllDraw.DepthIterative = 0;
                                        y.tt = DrawQ;
                                    }
                                    y.Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                                    DrawManagement();

                                    if (!Quantum)
                                        DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                    else
                                        DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);


                                }

                            }
                            else
                            {
                                //When movments not occured.
                                if (!NewTable)
                                {
                                    try
                                    {
                                        if (System.IO.File.Exists(Root + "\\Database\\CurrentBank.accdb"))
                                        {
                                            if (bookConn != null)
                                            {
                                                bookConn.Close();
                                                oleDbCmd.Dispose();
                                                bookConn.Dispose();
                                            }
                                            //bookConn = new OleDbConnection(connParam);
                                            //oleDbCmd.Connection = bookConn;
                                            //bookConn.Open();

                                        }
                                    }
                                    catch (FileNotFoundException t)
                                    {
                                        Log(t);

                                    } //UpdateConfigurationTableVal = false;

                                    //When Configuration is Allowed Read Configuration.
                                    ReadConfigurationTable();

                                    SetAllDrawKind();

                                    //Set Configuration To True for some unknown reason!.
                                    //UpdateConfigurationTableVal = true;                             
                                    SetAllDrawKindString();


                                    //Read Last Table and Set MovementNumber 
                                    Table = ReadTable(0, ref MovmentsNumber);
                                    //OrderPlate *= -1;


                                    if (DrawManagement())
                                    {
                                        //Load AllDraw.asd
                                        if (!Quantum)
                                            DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                        else
                                            DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                                    }
                                    else
                                    {
                                        if (!Quantum)
                                        {
                                            Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                            Draw.TableList.Clear();
                                            Draw.TableList.Add(CloneATable(Table));
                                            Draw.SetRowColumn(0);
                                            RefrigtzDLL.AllDraw.DepthIterative = 0;
                                            y.t = Draw;
                                        }

                                        else
                                        {

                                            DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                            DrawQ.TableList.Clear();
                                            DrawQ.TableList.Add(CloneATable(Table));
                                            DrawQ.SetRowColumn(0);
                                            QuantumRefrigiz.AllDraw.DepthIterative = 0;
                                            y.tt = DrawQ;
                                        }
                                        y.Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                                        if (!Quantum)
                                            DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                        else
                                            DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);


                                    }
                                }
                                else
                                {

                                    int iii = 0;
                                    do { iii++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb"));
                                    System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb");
                                    System.IO.File.Copy(Root + "\\Database\\Monitor.html", Root + "\\Database\\Games\\Monitor" + iii.ToString() + ".html");
                                    System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                    System.IO.File.Delete(Root + "\\Database\\Monitor.html");
                                    System.IO.File.Copy(Root + "\\Database\\MainBank\\ChessBank.accdb", Root + "\\Database\\CurrentBank.accdb");
                                    System.IO.File.Copy(Root + "\\Database\\MainBank\\Monitor_Log.html", Root + "\\Database\\Monitor.html");
                                    try
                                    {
                                        if (System.IO.File.Exists(Root + "\\Database\\CurrentBank.accdb"))
                                        {
                                            if (bookConn != null)
                                                bookConn.Close();
                                            bookConn = new OleDbConnection(connParam);
                                            oleDbCmd.Connection = bookConn;
                                            bookConn.Open();
                                            InsertTableAtDatabase(Table);
                                            CreateConfigurationTable();

                                            SetAllDrawKind();

                                            //Set Configuration To True for some unknown reason!.
                                            //UpdateConfigurationTableVal = true;                             
                                            SetAllDrawKindString();

                                            Thread arr = new Thread(new ThreadStart(SetDrawFound));
                                            arr.Start();
                                            arr.Join();


                                            if (DrawManagement())
                                            {
                                                //Load AllDraw.asd
                                                if (!Quantum)
                                                    DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                                else
                                                    DrawDrawen = y.Load(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                                            }
                                            else
                                            {

                                                SetAllDrawKind();
                                                //Set Configuration To True for some unknown reason!.
                                                //UpdateConfigurationTableVal = true;                             
                                                SetAllDrawKindString();
                                                y.Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                            }
                                        }

                                    }
                                    catch (FileNotFoundException t)
                                    {
                                        Log(t);

                                    }
                                }
                            }

                            //Set Level Variable from selection.
                            ComboBoxMaxLevelText = ComboBoxMaxLevel.Text;




                        }

                    }

                    Object oooo = new Object();
                    lock (oooo)
                    {
                        if (File.Exists(Root + "\\Run.txt"))
                        {
                            String _0 = File.ReadAllText(Root + "\\Run.txt");
                            if (_0[0] == '1') _1 = true; else _1 = false;
                            if (_0[1] == '1') _2 = true; else _2 = false;
                            if (_0[2] == '1') _3 = true; else _3 = false;
                            if (_0[3] == '1') _4 = true; else _4 = false;
                            File.Delete(Root + "Run.txt");
                            ContinueAGameToolStripMenuItem.Visible = false; if (_1) { ComputerWithComputerToolStripMenuItem_Click(sender, e); } else if (_2) { ComputerWithComputerToolStripMenuItem1_Click(sender, e); } else if (_3) { ToolStripMenuItem3_Click(sender, e); } else if (_4) { ToolStripMenuItem6_Click(sender, e); }

                        }

                    }

                    //Loaded = true;
                    LoadedDLL = true;

                    if (Sec.RadioButtonGrayOrder.Checked && MovmentsNumber == 1)
                        OrderPlate = 1;
                    else
                     if (Sec.RadioButtonBrownOrder.Checked && MovmentsNumber == 1)
                        OrderPlate = -1;

                    if (Sec.RadioButtonGrayOrder.Checked && OrderPlate == 1)
                    {
                        BobSection = true;
                        Person = true;
                    }
                    else
                        if (Sec.RadioButtonBrownOrder.Checked && OrderPlate == -1)
                    {
                        BobSection = false;
                        Person = true;
                    }


                    //tttt.Start();
                    //ttt.Start();
                    AllOperate = new Thread(new ThreadStart(AllOperations));
                    AllOperate.Start();
                    if (!Quantum)
                    {
                        if (!DrawDrawen)
                        {
                            Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                            Draw.TableList.Clear();
                            Draw.TableList.Add(CloneATable(Table));
                            Draw.SetRowColumn(0);
                            RefrigtzDLL.AllDraw.DepthIterative = 0;

                            //MessageBox.Show("Draw Not Found.");
                        }
                        else
                        {
                            FOUND = false;
                            Draw = y.t;
                            Thread arr = new Thread(new ThreadStart(SetDrawFound));
                            arr.Start();
                            arr.Join();

                        }
                    }
                    else
                    {
                        if (!DrawDrawen)
                        {
                            DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                            DrawQ.TableList.Clear();
                            DrawQ.TableList.Add(CloneATable(Table));
                            DrawQ.SetRowColumn(0);
                            QuantumRefrigiz.AllDraw.DepthIterative = 0;

                            //MessageBox.Show("Draw Not Found.");
                        }
                        else
                        {
                            FOUND = false;
                            DrawQ = y.tt;
                            Thread arr = new Thread(new ThreadStart(SetDrawFound));
                            arr.Start();
                            arr.Join();


                        }
                    }
                    if (Blitz)
                    {
                        BrownTimer = new Refrigtz.Timer(true);
                        GrayTimer = new Refrigtz.Timer(true);

                        if (OrderPlate == 1)
                        {
                            GrayTimer.StartTime("GrayTimer");
                            BrownTimer.StopTime();
                        }
                        else
                        {
                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                        }
                    }
                    else if (FullGame)
                    {

                        BrownTimer = new Refrigtz.Timer(true);
                        GrayTimer = new Refrigtz.Timer(true);

                        if (OrderPlate == 1)
                        {
                            GrayTimer.StartTime("GrayTimer");
                            BrownTimer.StopTime();
                        }
                        else
                        {
                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                        }
                    }
                    else if (StateCC)
                    {
                        GrayTimer = new Refrigtz.Timer(true);
                        BrownTimer = new Refrigtz.Timer(true);
                        if (OrderPlate == 1)
                        {
                            BobSection = true;
                            AliceSection = false;
                            GrayTimer.StartTime("GrayTimer");
                            BrownTimer.StopTime();
                        }
                        else
                        {
                            BobSection = false;
                            AliceSection = true;
                            BrownTimer.StartTime("BrownTimer");
                            GrayTimer.StopTime();
                        }
                        //UpdateConfigurationTableVal = true;
                    }
                    else if (Stockfish)
                    {
                        GrayTimer = new Refrigtz.Timer(true);
                        BrownTimer = new Refrigtz.Timer(true);

                        if (OrderPlate == 1)
                        {
                            GrayTimer.StartTime("GrayTimer");
                            BrownTimer.StopTime();
                            BobSection = true;
                            AliceSection = false;
                        }
                        else
                        {
                            BrownTimer.StartTime("BrownTimer");
                            GrayTimer.StopTime();
                            BobSection = false;
                            AliceSection = true;
                        }


                    }
                    if (!Quantum)
                    {
                        if (RefrigtzDLL.AllDraw.TableListAction.Count == 0)
                            RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(Table));
                    }
                    else
                    {
                        if (QuantumRefrigiz.AllDraw.TableListAction.Count == 0)
                            QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(Table));
                    }



                    DrawImageOfMain();


                    // SetPrictureBoxRefregitzInvalidate(PictureBoxTimerBrown);
                    //SetPrictureBoxRefregitzUpdate(PictureBoxTimerBrown);

                    if (Quantum)
                    {
                        String SFile = "QBN.aqs";
                        if (File.Exists(SFile))
                        {
                            String SCoun = File.ReadAllText(SFile);
                            int L = 0, k = 0;
                            String S = "";
                            do
                            {
                                int kk = (L) % 8;
                                int jj = ((L) / 8) % 8;
                                int i = (((L) / 8) / 8) % 2;
                                {
                                    S = SCoun.Substring(k, SCoun.IndexOf(','));
                                    S = S.Replace(",", "");
                                    QuantumRefrigiz.AllDraw.QuntumTable[i, jj, kk] = System.Convert.ToInt32(S);
                                    k += S.Length + 1;
                                    L++;
                                }
                            } while (k < SCoun.Length);
                        }
                    }

                }
                catch (Exception t) { Log(t); }
                CheckBoxAStarGreedyHeuristic.Update();
                CheckBoxAStarGreedyHeuristic.Invalidate();

                CheckBoxUsePenaltyRegradMechnisam.Update();
                CheckBoxUsePenaltyRegradMechnisam.Invalidate();
                LoadO = true;

                Thread tNewGame = new Thread(new ThreadStart(NewGame));
                tNewGame.Start();

                //SetPrictureBoxRefregitzInvalidate(PictureBoxRefrigtz);
                //(PictureBoxRefrigtz);

                LoadedTable = true;
            }
        }
        //Load Refregitz Form.
        private void Form1_Load(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                //        var array = Task.Factory.StartNew(() => Load_Form(sender, e));
                Load_Form(sender, e);
                if (!Quantum)
                    RefrigtzDLL.AllDraw.OrderPlateDraw = FormSelect.OrderPlateDraw;
                else
                    QuantumRefrigiz.AllDraw.OrderPlateDraw = FormSelect.OrderPlateDraw;

            }

        }
        //Reading Table Database.
        int[,] ReadTable(int Movment, ref int MoveNumber)
        {
            Object OO = new Object();
            lock (OO)
            {
                if (Sec.RadioButtonGrayOrder.Checked)
                    OrderPlate = 1;
                else
                    OrderPlate = -1;
                RefrigtzDLL.ChessRules.CastleActBrown = false;
                int[,] Tab = Table;
                int Move = 0;
                if (!Quantum)
                    RefrigtzDLL.AllDraw.TableListAction.Clear();
                else
                    QuantumRefrigiz.AllDraw.TableListAction.Clear();
                bool Do = false;
                do
                {
                    oleDbCmd = new OleDbCommand();
                    bookConn = new OleDbConnection(connParam);
                    bookConn.Open();
                    oleDbCmd.Connection = bookConn;

                    OrderPlate *= -1;
                    if (!Quantum)
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                    else
                        QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                    try
                    {

                        String TableName = Move.ToString();
                        String Zero = "Table";
                        for (int i = 0; i < 8 - TableName.Length; i++)
                            Zero += "0";
                        TableName = Zero + TableName;

                        oleDbCmd.CommandText = String.Concat("Select * From ", TableName);
                        OleDbDataReader dr = null;




                        dr = oleDbCmd.ExecuteReader();

                        int ii = 0;
                        while (dr.Read())
                        {
                            Tab[0, ii] = System.Convert.ToInt32(dr["a"]);
                            Tab[1, ii] = System.Convert.ToInt32(dr["b"]);
                            Tab[2, ii] = System.Convert.ToInt32(dr["c"]);
                            Tab[3, ii] = System.Convert.ToInt32(dr["d"]);
                            Tab[4, ii] = System.Convert.ToInt32(dr["e"]);
                            Tab[5, ii] = System.Convert.ToInt32(dr["f"]);
                            Tab[6, ii] = System.Convert.ToInt32(dr["g"]);
                            Tab[7, ii] = System.Convert.ToInt32(dr["h"]);
                            ii++;
                        }
                        int[,] TableA = new int[8, 8];

                        Table = new int[8, 8];

                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableA[i, j] = Tab[i, j];
                                Table[i, j] = Tab[i, j];

                            }

                        }
                        if (MoveNumber > 0)
                            SetAndConfirmSyntax();
                        else
                        {
                            if (!Quantum)
                                RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(Table));
                            else
                                QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(Table));
                        }
                        Move++;
                        if (Move > 2)
                            GameStarted = true;
                        MoveNumber++;




                        if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, TableA, OrderPlate, -1, -1).CheckMate(TableA, OrderPlate)))
                        {
                            int iii = 0;
                            do { iii++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb"));
                            System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", "Database\\Games\\CurrentBank" + iii.ToString() + ".accdb");
                            System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                            break;

                        }
                        bookConn.Close();
                        oleDbCmd.Clone();
                        bookConn.Dispose();

                    }
                    catch (Exception t)
                    {
                        Do = true;
                        Log(t);
                        bookConn.Close();
                        oleDbCmd.Clone();
                        bookConn.Dispose();
                        /*
                        oleDbCmd = new OleDbCommand();
                        bookConn = new OleDbConnection(connParam);
                        bookConn.Open();
                        oleDbCmd.Connection = bookConn;

                        try
                        {

                            // Move++;


                            String TableName = (Move).ToString();
                            String Zero = "Table";
                            for (int i = 0; i < 8 - TableName.Length; i++)
                                Zero += "0";
                            TableName = Zero + TableName;

                            oleDbCmd.CommandText = String.Concat("Select * From ", TableName);
                            OleDbDataReader dr = oleDbCmd.ExecuteReader();
                            int ii = 0;
                            while (dr.Read())
                            {
                                Tab[0, ii] = System.Convert.ToInt32(dr["a"]);
                                Tab[1, ii] = System.Convert.ToInt32(dr["b"]);
                                Tab[2, ii] = System.Convert.ToInt32(dr["c"]);
                                Tab[3, ii] = System.Convert.ToInt32(dr["d"]);
                                Tab[4, ii] = System.Convert.ToInt32(dr["e"]);
                                Tab[5, ii] = System.Convert.ToInt32(dr["f"]);
                                Tab[6, ii] = System.Convert.ToInt32(dr["g"]);
                                Tab[7, ii] = System.Convert.ToInt32(dr["h"]);
                                ii++;
                            }
                            if (Move > 2)
                                GameStarted = true;



                            int[,] TableA = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableA[i, j] = Tab[i, j];
                                    Table[i, j] = Tab[i, j];

                                }
                            }

                            if (MoveNumber > 0)
                                SetAndConfirmSyntax();
                            else
                            {
                                if (!Quantum)
                                    RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(Table));
                                else
                                    QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(Table));
                            }
                            if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, TableA, OrderPlate, -1, -1).CheckMate(TableA, OrderPlate)))
                            {
                                int iii = 0;
                                do { iii++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", "Database\\Games\\CurrentBank" + iii.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                break;

                            }
                            bookConn.Close();
                            oleDbCmd.Clone();
                            //oleDbCmd.Dispose();
                            bookConn.Dispose();

                        }
                        catch (Exception tt)
                        {
                            bookConn.Close();
                            oleDbCmd.Clone();
                            bookConn.Dispose();

                            Log(tt);
                            break;
                        }               
                    */
                    }
                } while (!Do);
                MovmentsNumberMax = MoveNumber;

                return Tab;

            }
        }
        //Verify Accuarance of Table Games Methos.
        bool VerifyTable(String FileName, int Movment, ref int MoveNumber)
        {
            Object O = new Object();
            lock (O)
            {
                bool PreviouseCheck = false;

                int[,] Tab = Table;
                int Move = 1;
                int Order = 1;
                bool TowCheckFromOneKind = false;
                do
                {
                    try
                    {
                        if (Move % 2 == 1)
                            Order = 1;
                        else
                            Order = -1;
                        String connParam = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + FileName + ";;Persist Security Info=False; Jet OLEDB:Database Password='!HN#BGHHN&N$G$V4'";
                        String TableName = Move.ToString();
                        String Zero = "Table";
                        for (int i = 0; i < 8 - TableName.Length; i++)
                            Zero += "0";
                        TableName = Zero + TableName;

                        oleDbCmd.CommandText = String.Concat("Select * From ", TableName);
                        OleDbDataReader dr = null;
                        try
                        {
                            dr = oleDbCmd.ExecuteReader();
                        }
                        catch (Exception t)
                        {
                            Log(t);
                            Move++;
                            break;
                        }
                        int ii = 0;
                        while (dr.Read())
                        {
                            Tab[0, ii] = System.Convert.ToInt32(dr["a"]);
                            Tab[1, ii] = System.Convert.ToInt32(dr["b"]);
                            Tab[2, ii] = System.Convert.ToInt32(dr["c"]);
                            Tab[3, ii] = System.Convert.ToInt32(dr["d"]);
                            Tab[4, ii] = System.Convert.ToInt32(dr["e"]);
                            Tab[5, ii] = System.Convert.ToInt32(dr["f"]);
                            Tab[6, ii] = System.Convert.ToInt32(dr["g"]);
                            Tab[7, ii] = System.Convert.ToInt32(dr["h"]);
                            ii++;
                        }
                        int[,] TableA = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableA[i, j] = Tab[i, j];
                            }
                        }
                        if (!Quantum)
                        {

                            Thread arr = new Thread(new ThreadStart(SetDrawFound));
                            arr.Start();
                            arr.Join();


                            if (!Draw.IsEnemyThingsinStable(TableA, RefrigtzDLL.AllDraw.TableVeryfy, Order))
                            {
                                Tab = null;
                                Tab[0, 0] = -1;
                            }
                            else
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    for (int j = 0; j < 8; j++)
                                    {
                                        RefrigtzDLL.AllDraw.TableVeryfy[i, j] = Tab[i, j];
                                    }
                                }

                            }

                        }
                        else
                        {
                            Thread arr = new Thread(new ThreadStart(SetDrawFound));
                            arr.Start();
                            arr.Join();

                            if (!DrawQ.IsEnemyThingsinStable(TableA, QuantumRefrigiz.AllDraw.TableVeryfy, Order))
                            {
                                Tab = null;
                                Tab[0, 0] = -1;
                            }
                            else
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    for (int j = 0; j < 8; j++)
                                    {
                                        QuantumRefrigiz.AllDraw.TableVeryfy[i, j] = Tab[i, j];
                                    }
                                }

                            }
                        }
                        Move++;
                        if (Move >= 1)
                        {
                            MoveNumber++;
                        }
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableA[i, j] = Tab[i, j];
                            }
                        }
                        if (!Quantum)
                        {
                            RefrigtzDLL.ChessRules A = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, TableA, OrderPlate, -1, -1);
                            if (A.CheckMate(TableA, OrderPlate))
                            {

                                int iii = 0;
                                do { iii++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                break;

                            }
                            if (A.CheckGray && TowCheckFromOneKind)
                            {
                                Tab = null;
                                Tab[0, 0] = -1;

                            }
                            else
                                if (Order == 1 && A.CheckGray)
                                TowCheckFromOneKind = true;
                            else
                                TowCheckFromOneKind = false;

                            if (A.CheckGray && TowCheckFromOneKind)
                            {
                                Tab = null;
                                Tab[0, 0] = -1;

                            }
                            else
                                if (Order == 1 && A.CheckGray)
                                TowCheckFromOneKind = true;
                            else
                                TowCheckFromOneKind = false;

                            if (A.CheckBrown || A.CheckGray)
                            {
                                if (PreviouseCheck)
                                    return false;
                                else
                                    PreviouseCheck = true;
                            }
                            else
                                PreviouseCheck = false;
                        }
                        else
                        {
                            QuantumRefrigiz.ChessRules A = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, TableA, OrderPlate, -1, -1);
                            if (A.CheckMate(TableA, OrderPlate))
                            {

                                int iii = 0;
                                do { iii++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                //break;

                                if (A.CheckGray && TowCheckFromOneKind)
                                {
                                    Tab = null;
                                    Tab[0, 0] = -1;

                                }
                                else
                                   if (Order == 1 && A.CheckGray)
                                    TowCheckFromOneKind = true;
                                else
                                    TowCheckFromOneKind = false;

                                if (A.CheckGray && TowCheckFromOneKind)
                                {
                                    Tab = null;
                                    Tab[0, 0] = -1;

                                }
                                else
                                    if (Order == 1 && A.CheckGray)
                                    TowCheckFromOneKind = true;
                                else
                                    TowCheckFromOneKind = false;

                                if (A.CheckBrown || A.CheckGray)
                                {
                                    if (PreviouseCheck)
                                        return false;
                                    else
                                        PreviouseCheck = true;
                                }
                                else
                                    PreviouseCheck = false;
                            }
                        }
                    }
                    catch (Exception t)
                    {

                        Log(t);

                        do
                        {
                            try
                            {

                                Move++;

                                String connParam = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + FileName + ";;Persist Security Info=False; Jet OLEDB:Database Password='!HN#BGHHN&N$G$V4'";
                                String TableName = (Move).ToString();
                                String Zero = "Table";
                                for (int i = 0; i < 8 - TableName.Length; i++)
                                    Zero += "0";
                                TableName = Zero + TableName;

                                oleDbCmd.CommandText = String.Concat("Drop Table ", TableName);
                                OleDbDataReader dr = null;
                                dr = oleDbCmd.ExecuteReader();
                                return true;

                            }
                            catch (Exception tt)
                            {
                                Log(tt);
                                return false;
                            }
                        } while (true);
                    }
                    if (!Quantum)
                    {
                        if (Move > 1)
                        {
                            OrderPlate *= -1;
                            RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                        }
                    }
                    else
                    {
                        if (Move > 1)
                        {
                            OrderPlate *= -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;
                        }
                    }
                } while (Move <= MovmentsNumberMax);

                return true;
            }

        }
        //Read Specific Table Number.
        int[,] ReadTableMovmentNumber()
        {
            Object O = new Object();
            lock (O)
            {
                oleDbCmd = new OleDbCommand();
                bookConn = new OleDbConnection(connParam);
                bookConn.Open();
                oleDbCmd.Connection = bookConn;

                int[,] Tab = Table;
                int Move = MovmentsNumber;
                if (!Quantum)
                    RefrigtzDLL.AllDraw.TableListAction.Clear();
                else
                    QuantumRefrigiz.AllDraw.TableListAction.Clear();

                try
                {
                    if (Move > 1)
                    {
                        if (MovmentsNumber % 2 == 0)
                            OrderPlate = 1;
                        else
                            OrderPlate = -1;
                        if (!Quantum)
                            RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                        else
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                    }

                    String TableName = Move.ToString();
                    String Zero = "Table";
                    for (int i = 0; i < 8 - TableName.Length; i++)
                        Zero += "0";
                    TableName = Zero + TableName;

                    oleDbCmd.CommandText = String.Concat("Select * From ", TableName);
                    OleDbDataReader dr = null;
                    dr = oleDbCmd.ExecuteReader();
                    int ii = 0;
                    while (dr.Read())
                    {
                        Tab[0, ii] = System.Convert.ToInt32(dr["a"]);
                        Tab[1, ii] = System.Convert.ToInt32(dr["b"]);
                        Tab[2, ii] = System.Convert.ToInt32(dr["c"]);
                        Tab[3, ii] = System.Convert.ToInt32(dr["d"]);
                        Tab[4, ii] = System.Convert.ToInt32(dr["e"]);
                        Tab[5, ii] = System.Convert.ToInt32(dr["f"]);
                        Tab[6, ii] = System.Convert.ToInt32(dr["g"]);
                        Tab[7, ii] = System.Convert.ToInt32(dr["h"]);
                        ii++;
                    }
                    int[,] TableA = new int[8, 8];
                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            TableA[i, j] = Tab[i, j];
                        }
                    }


                    Move++;


                }
                catch (Exception t)
                {
                    Log(t);
                    try
                    {

                        Move++;


                        String TableName = (Move).ToString();
                        String Zero = "Table";
                        for (int i = 0; i < 8 - TableName.Length; i++)
                            Zero += "0";
                        TableName = Zero + TableName;

                        oleDbCmd.CommandText = String.Concat("Select * From ", TableName);
                        OleDbDataReader dr = null;
                        dr = oleDbCmd.ExecuteReader();
                        int ii = 0;
                        while (dr.Read())
                        {
                            Tab[0, ii] = System.Convert.ToInt32(dr["a"]);
                            Tab[1, ii] = System.Convert.ToInt32(dr["b"]);
                            Tab[2, ii] = System.Convert.ToInt32(dr["c"]);
                            Tab[3, ii] = System.Convert.ToInt32(dr["d"]);
                            Tab[4, ii] = System.Convert.ToInt32(dr["e"]);
                            Tab[5, ii] = System.Convert.ToInt32(dr["f"]);
                            Tab[6, ii] = System.Convert.ToInt32(dr["g"]);
                            Tab[7, ii] = System.Convert.ToInt32(dr["h"]);
                            ii++;
                        }
                        int[,] TableA = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableA[i, j] = Tab[i, j];
                            }
                        }


                    }
                    catch (Exception tt)
                    {
                        Log(tt);
                        return null;
                    }
                }

                bookConn.Close();
                oleDbCmd.Clone();
                //oleDbCmd.Dispose();
                bookConn.Dispose();


                return Tab;


            }
        }
        //Creation of New Tables at DatabaseMethod.
        String CreatTable()
        {
            Object O = new Object();
            lock (O)
            {
                String TableName = null;
                Begin12:
                try
                {

                    oleDbCmd = new OleDbCommand();
                    bookConn = new OleDbConnection(connParam);
                    bookConn.Open();
                    oleDbCmd.Connection = bookConn;
                    TableName = MovmentsNumber.ToString();
                    String Zero = "Table";
                    for (int i = 0; i < 8 - TableName.Length; i++)
                        Zero += "0";
                    TableName = Zero + TableName;

                    /* if (bookConn != null)
                         bookConn.Close();
                     bookConn = new OleDbConnection(connParam);
                     oleDbCmd.Connection = bookConn;
                     bookConn.Open();
                     */
                    oleDbCmd.CommandText = String.Concat("Create Table ", TableName, " (a Number NOT NULL,b Number NOT NULL,c Number NOT NULL,d Number NOT NULL,e Number NOT NULL,f Number NOT NULL,g Number NOT NULL,h Number NOT NULL)");
                    int temp = 0;
                    temp = oleDbCmd.ExecuteNonQuery();
                    bookConn.Close();
                    oleDbCmd.Clone();
                    //oleDbCmd.Dispose();
                    bookConn.Dispose();

                    return TableName;
                }
                catch (Exception t)
                {
                    Log(t);


                    TableName = MovmentsNumber.ToString();
                    String Zero = "Table";
                    for (int i = 0; i < 8 - TableName.Length; i++)
                        Zero += "0";
                    TableName = Zero + TableName;

                    /*  if (bookConn != null)
                          bookConn.Close();
                      bookConn = new OleDbConnection(connParam);
                      oleDbCmd.Connection = bookConn;
                      bookConn.Open();
                      */
                    oleDbCmd.CommandText = String.Concat("Drop Table ", TableName);
                    int temp = 0;
                    temp = oleDbCmd.ExecuteNonQuery();
                    goto Begin12;


                }
                //#pragma warning disable CS0162 // Unreachable code detected
                return TableName;
                //#pragma warning restore CS0162 // Unreachable code detected
            }
        }
        //Creatiopn of Configuration Table
        void CreateConfigurationTable()
        {
            Object O = new Object();
            lock (O)
            {
                Begin12:
                oleDbCmd = new OleDbCommand();
                bookConn = new OleDbConnection(connParam);
                bookConn.Open();
                oleDbCmd.Connection = bookConn;

                try
                {
                    if (!AllDrawLoad)
                    {

                        try
                        {
                            if (bookConn != null)
                            {
                                bookConn.Close();
                                oleDbCmd.Clone();
                                oleDbCmd.Dispose();
                                bookConn.Dispose();
                            }
                            bookConn = new OleDbConnection(connParam);
                            oleDbCmd.Connection = bookConn;
                            bookConn.Open();

                            oleDbCmd.CommandText = @"Create Table Configuration (CheckBoxAStarGreedyHeuristic Number NOT NULL,CheckBoxPredictHuristci Number NOT NULL,CheckBoxAStarGreadyFirstSearch Number NOT NULL,CheckBoxBestMovments Number NOT NULL,CheckBoxOnlySelf Number NOT NULL,RadioButtonOriginalImages Number NOT NULL,RadioButtonBigFittingImages Number NOT NULL,RadioButtonSmallFittingImages Number NOT NULL,CheckBoxAStarGreedyMovement Number NOT NULL,CheckBoxUseDoubleTime Number NOT NULL,CheckBoxUsePenaltyRegradMechnisam Number NOT NULL,CheckBoxDynamicProgrammingAStarGreedyt Number NOT NULL,ComboBoxMaxTree Number NOT NULL,ComboBoxAttack Number NOT NULL,ComboBoxObjectDangour Number NOT NULL,ComboBoxReducedAttacked Number NOT NULL,ComboBoxSupport Number NOT NULL,ComboBoxHitting Number NOT NULL,ComboBoxMovments Number NOT NULL,ArrangmentsChanged Number NOT NULL,GrayTimer Number NOT NULL,BrownTimer Number NOT NULL,BobSection Number NOT NULL,AliceSection Number NOT NULL,StateCP Number NOT NULL,StateCC Number NOT NULL,StateGe Number NOT NULL,Blitz Number NOT NULL,Person Number NOT NULL,SettingPRFALSE Number NOT NULL,FullGame Number NOT NULL,Stockfish Number NOT NULL,lable1 Text NOT NULL,lable2 Text NOT NULL,MovmentsNumber Number NOT NULL,Quantum Number NOT NULL,Sugar Number NOT NULL,MenueSelecte Number NOT NULL,AllDrawKind Number NOT NULL,OrderPlate Number NOT NULL,Deeperthandeeper Number NOT NULL,Colleralation Number NOT NULL,DeColleralation Number NOT NULL)";
                            int temp = 0;
                            temp = oleDbCmd.ExecuteNonQuery();

                            /* if (bookConn != null)
                                 bookConn.Close();
                             bookConn = new OleDbConnection(connParam);
                             oleDbCmd.Connection = bookConn;
                             bookConn.Open();
                             */
                            if (!Quantum)
                                oleDbCmd.CommandText = String.Concat("Insert into Configuration (CheckBoxAStarGreedyHeuristic,CheckBoxPredictHuristci,CheckBoxAStarGreadyFirstSearch,CheckBoxBestMovments,CheckBoxOnlySelf,RadioButtonOriginalImages,RadioButtonBigFittingImages,RadioButtonSmallFittingImages,CheckBoxAStarGreedyMovement,CheckBoxUseDoubleTime,CheckBoxUsePenaltyRegradMechnisam,CheckBoxDynamicProgrammingAStarGreedyt,ComboBoxMaxTree,ComboBoxAttack,ComboBoxObjectDangour,ComboBoxReducedAttacked,ComboBoxSupport,ComboBoxHitting,ComboBoxMovments,ArrangmentsChanged,GrayTimer,BrownTimer,BobSection,AliceSection,StateCP,StateCC,StateGe,Blitz,Person,SettingPRFALSE,FullGame,Stockfish,lable1,lable2,MovmentsNumber,Quantum,Sugar,MenueSelecte,AllDrawKind,OrderPlate,Deeperthandeeper,,Colleralation,DeColleralation) values(", System.Convert.ToInt32(CheckBoxAStarGreedyHeuristic.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxPredictHuristci.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxAStarGreadyFirstSearch.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxBestMovments.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxOnlySelf.Checked).ToString(), ",", System.Convert.ToInt32(RadioButtonOriginalImages.Checked).ToString(), ",", System.Convert.ToInt32(RadioButtonBigFittingImages.Checked).ToString(), ",", System.Convert.ToInt32(RadioButtonSmallFittingImages.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxBestMovments.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxUseDoubleTime.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxUsePenaltyRegradMechnisam.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxDynamicProgrammingAStarGreedyt.Checked).ToString(), ",", System.Convert.ToInt32(ComboBoxMaxLevel.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxAttack.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxObjectDangour.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxReducedAttacked.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxSupport.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxKiller.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxMovments.Text).ToString(), ",", System.Convert.ToInt32(ArrangmentsChanged).ToString(), ",", GrayTimer.Times.ToString(), ",", BrownTimer.Times.ToString(), ",", System.Convert.ToInt32(BobSection).ToString(), ",", System.Convert.ToInt32(AliceSection).ToString(), ",", System.Convert.ToInt32(StateCP).ToString(), ",", System.Convert.ToInt32(StateCC).ToString(), ",", System.Convert.ToInt32(StateGe).ToString(), ",", System.Convert.ToInt32(Blitz).ToString(), ",", System.Convert.ToInt32(Person).ToString(), ",", System.Convert.ToInt32(SettingPRFALSE).ToString(), ",", System.Convert.ToInt32(FullGame).ToString(), ",", System.Convert.ToInt32(Stockfish).ToString(), ",'", label1.Text, "','", label2.Text, "','", MovmentsNumber.ToString(), "','", System.Convert.ToInt32(Quantum).ToString(), "','", System.Convert.ToInt32(Sugar).ToString(), "','", System.Convert.ToInt32(MenueSelecte).ToString(), "','", System.Convert.ToInt32(AllDrawKind).ToString(), "','", System.Convert.ToInt32(OrderPlate).ToString(), "','" + System.Convert.ToInt32(Deeperthandeeper).ToString() + "',", RefrigtzDLL.ThinkingChess.Colleralation.ToString(), "',", RefrigtzDLL.ThinkingChess.DeColleralation.ToString(), ")");
                            else
                                oleDbCmd.CommandText = String.Concat("Insert into Configuration (CheckBoxAStarGreedyHeuristic,CheckBoxPredictHuristci,CheckBoxAStarGreadyFirstSearch,CheckBoxBestMovments,CheckBoxOnlySelf,RadioButtonOriginalImages,RadioButtonBigFittingImages,RadioButtonSmallFittingImages,CheckBoxAStarGreedyMovement,CheckBoxUseDoubleTime,CheckBoxUsePenaltyRegradMechnisam,CheckBoxDynamicProgrammingAStarGreedyt,ComboBoxMaxTree,ComboBoxAttack,ComboBoxObjectDangour,ComboBoxReducedAttacked,ComboBoxSupport,ComboBoxHitting,ComboBoxMovments,ArrangmentsChanged,GrayTimer,BrownTimer,BobSection,AliceSection,StateCP,StateCC,StateGe,Blitz,Person,SettingPRFALSE,FullGame,Stockfish,lable1,lable2,MovmentsNumber,Quantum,Sugar,MenueSelecte,AllDrawKind,OrderPlate,Deeperthandeeper,Colleralation,DeColleralation) values(", System.Convert.ToInt32(CheckBoxAStarGreedyHeuristic.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxPredictHuristci.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxAStarGreadyFirstSearch.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxBestMovments.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxOnlySelf.Checked).ToString(), ",", System.Convert.ToInt32(RadioButtonOriginalImages.Checked).ToString(), ",", System.Convert.ToInt32(RadioButtonBigFittingImages.Checked).ToString(), ",", System.Convert.ToInt32(RadioButtonSmallFittingImages.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxBestMovments.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxUseDoubleTime.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxUsePenaltyRegradMechnisam.Checked).ToString(), ",", System.Convert.ToInt32(CheckBoxDynamicProgrammingAStarGreedyt.Checked).ToString(), ",", System.Convert.ToInt32(ComboBoxMaxLevel.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxAttack.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxObjectDangour.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxReducedAttacked.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxSupport.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxKiller.Text).ToString(), ",", System.Convert.ToInt32(ComboBoxMovments.Text).ToString(), ",", System.Convert.ToInt32(ArrangmentsChanged).ToString(), ",", GrayTimer.Times.ToString(), ",", BrownTimer.Times.ToString(), ",", System.Convert.ToInt32(BobSection).ToString(), ",", System.Convert.ToInt32(AliceSection).ToString(), ",", System.Convert.ToInt32(StateCP).ToString(), ",", System.Convert.ToInt32(StateCC).ToString(), ",", System.Convert.ToInt32(StateGe).ToString(), ",", System.Convert.ToInt32(Blitz).ToString(), ",", System.Convert.ToInt32(Person).ToString(), ",", System.Convert.ToInt32(SettingPRFALSE).ToString(), ",", System.Convert.ToInt32(FullGame).ToString(), ",", System.Convert.ToInt32(Stockfish).ToString(), ",'", label1.Text, "','", label2.Text, "','", MovmentsNumber.ToString(), "','", System.Convert.ToInt32(Quantum).ToString(), "','", System.Convert.ToInt32(Sugar).ToString(), "','", System.Convert.ToInt32(MenueSelecte).ToString(), "','", System.Convert.ToInt32(AllDrawKind).ToString(), "','", System.Convert.ToInt32(OrderPlate).ToString(), "','" + System.Convert.ToInt32(Deeperthandeeper).ToString() + "',", QuantumRefrigiz.ThinkingQuantumChess.Colleralation.ToString(), "',", QuantumRefrigiz.ThinkingQuantumChess.DeColleralation.ToString(), ")");

                            oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreedyHeuristic", System.Convert.ToInt32(CheckBoxAStarGreedyHeuristic.Checked));
                            oleDbCmd.Parameters.AddWithValue("@CheckBoxPredictHuristci", System.Convert.ToInt32(CheckBoxPredictHuristci.Checked));
                            oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreadyFirstSearch", System.Convert.ToInt32(CheckBoxAStarGreadyFirstSearch.Checked));
                            oleDbCmd.Parameters.AddWithValue("@CheckBoxBestMovments", System.Convert.ToInt32(CheckBoxBestMovments.Checked));
                            oleDbCmd.Parameters.AddWithValue("@CheckBoxOnlySelf", System.Convert.ToInt32(CheckBoxOnlySelf.Checked));
                            oleDbCmd.Parameters.AddWithValue("@RadioButtonOriginalImages", System.Convert.ToInt32(RadioButtonOriginalImages.Checked));
                            oleDbCmd.Parameters.AddWithValue("@RadioButtonBigFittingImages", System.Convert.ToInt32(RadioButtonBigFittingImages.Checked));
                            oleDbCmd.Parameters.AddWithValue("@RadioButtonSmallFittingImages", System.Convert.ToInt32(RadioButtonSmallFittingImages.Checked));
                            oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreedyMovement", System.Convert.ToInt32(CheckBoxAStarGreedyMovement.Checked));
                            oleDbCmd.Parameters.AddWithValue("@CheckBoxUseDoubleTime", System.Convert.ToInt32(CheckBoxUseDoubleTime.Checked));
                            oleDbCmd.Parameters.AddWithValue("@CheckBoxUsePenaltyRegradMechnisam", System.Convert.ToInt32(CheckBoxUsePenaltyRegradMechnisam.Checked));
                            oleDbCmd.Parameters.AddWithValue("@CheckBoxDynamicProgrammingAStarGreedyt", System.Convert.ToInt32(CheckBoxDynamicProgrammingAStarGreedyt.Checked));
                            oleDbCmd.Parameters.AddWithValue("@ComboBoxMaxTree", System.Convert.ToInt32(ComboBoxMaxLevel.Text));
                            oleDbCmd.Parameters.AddWithValue("@ComboBoxAttack", System.Convert.ToInt32(ComboBoxAttack.Text));
                            oleDbCmd.Parameters.AddWithValue("@ComboBoxObjectDangour", System.Convert.ToInt32(ComboBoxObjectDangour.Text));
                            oleDbCmd.Parameters.AddWithValue("@ComboBoxReducedAttacked", System.Convert.ToInt32(ComboBoxReducedAttacked.Text));
                            oleDbCmd.Parameters.AddWithValue("@ComboBoxSupport", System.Convert.ToInt32(ComboBoxSupport.Text));
                            oleDbCmd.Parameters.AddWithValue("@ComboBoxHitting", System.Convert.ToInt32(ComboBoxKiller.Text));
                            oleDbCmd.Parameters.AddWithValue("@ComboBoxMovments", System.Convert.ToInt32(ComboBoxMovments.Text));
                            oleDbCmd.Parameters.AddWithValue("@ArrangmentsChanged", System.Convert.ToInt32(ArrangmentsChanged));
                            oleDbCmd.Parameters.AddWithValue("@GrayTimer", System.Convert.ToInt32(GrayTimer.Times));
                            oleDbCmd.Parameters.AddWithValue("@BrownTimer", System.Convert.ToInt32(BrownTimer.Times));
                            oleDbCmd.Parameters.AddWithValue("@BobSection", System.Convert.ToInt32(BobSection));
                            oleDbCmd.Parameters.AddWithValue("@AliceSection", System.Convert.ToInt32(AliceSection));
                            oleDbCmd.Parameters.AddWithValue("@StateCP", System.Convert.ToInt32(StateCP));
                            oleDbCmd.Parameters.AddWithValue("@StateCC", System.Convert.ToInt32(StateCC));
                            oleDbCmd.Parameters.AddWithValue("@StateGe", System.Convert.ToInt32(StateGe));
                            oleDbCmd.Parameters.AddWithValue("@Blitz", System.Convert.ToInt32(Blitz));
                            oleDbCmd.Parameters.AddWithValue("@Person", System.Convert.ToInt32(Person));
                            oleDbCmd.Parameters.AddWithValue("@SettingPRFALSE", System.Convert.ToInt32(SettingPRFALSE));
                            oleDbCmd.Parameters.AddWithValue("@FullGame", System.Convert.ToInt32(FullGame));
                            oleDbCmd.Parameters.AddWithValue("@Stockfish", System.Convert.ToInt32(Stockfish));
                            oleDbCmd.Parameters.AddWithValue("@lable1", label1.Text);
                            oleDbCmd.Parameters.AddWithValue("@lable2", label2.Text);
                            oleDbCmd.Parameters.AddWithValue("@MovmentsNumber", System.Convert.ToInt32(MovmentsNumber));
                            oleDbCmd.Parameters.AddWithValue("@Quantum", System.Convert.ToInt32(Quantum));
                            oleDbCmd.Parameters.AddWithValue("@Sugar", System.Convert.ToInt32(Sugar));
                            oleDbCmd.Parameters.AddWithValue("@MenueSelecte", System.Convert.ToInt32(MenueSelecte));
                            oleDbCmd.Parameters.AddWithValue("@AllDrawKind", System.Convert.ToInt32(AllDrawKind));
                            oleDbCmd.Parameters.AddWithValue("@OrderPlate", System.Convert.ToInt32(OrderPlate));
                            oleDbCmd.Parameters.AddWithValue("@Deeperthandeeper", System.Convert.ToInt32(Deeperthandeeper));
                            if (!Quantum)
                                oleDbCmd.Parameters.AddWithValue("@Colleralation", RefrigtzDLL.ThinkingChess.Colleralation);
                            else
                                oleDbCmd.Parameters.AddWithValue("@Colleralation", QuantumRefrigiz.ThinkingQuantumChess.Colleralation);
                            if (!Quantum)
                                oleDbCmd.Parameters.AddWithValue("@DeColleralation", RefrigtzDLL.ThinkingChess.DeColleralation);
                            else
                                oleDbCmd.Parameters.AddWithValue("@DeColleralation", QuantumRefrigiz.ThinkingQuantumChess.DeColleralation);
                            temp = oleDbCmd.ExecuteNonQuery();

                        }
                        catch (Exception t)
                        {

                            Log(t);

                            bookConn.Close();
                            oleDbCmd.Clone();
                            oleDbCmd.Dispose();
                            bookConn.Dispose();
                            oleDbCmd.CommandText = @"Drop Table Configuration";
                            int temp = 0;
                            temp = oleDbCmd.ExecuteNonQuery();
                            goto Begin12;
                        }

                    }

                }
                //#pragma warning disable CS0168 // The variable 't' is declared but never used
                catch (Exception t)
                //#pragma warning restore CS0168 // The variable 't' is declared but never used
                {
                }
                bookConn.Close();
                oleDbCmd.Clone();
                //oleDbCmd.Dispose();
                bookConn.Dispose();
            }
        }
        void UpdateTable(int[,] Tabl, String TableName)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    oleDbCmd = new OleDbCommand();
                    bookConn = new OleDbConnection(connParam);
                    bookConn.Open();
                    oleDbCmd.Connection = bookConn;

                    oleDbCmd.CommandText = @"Drop Table " + TableName;
                    int temp = 0;
                    temp = oleDbCmd.ExecuteNonQuery();
                    InsertTableAtDatabase(Tabl);

                }
                catch (Exception t)
                {
                    Log(t);

                }

            }
        }

        //Reading of Configuration Table Method.
        void ReadConfigurationTable()
        {
            Object O = new Object();
            lock (O)
            {
                oleDbCmd = new OleDbCommand();
                bookConn = new OleDbConnection(connParam);
                bookConn.Open();
                oleDbCmd.Connection = bookConn;

                if (!AllDrawLoad)
                {
                    Begin12:
                    try
                    {


                        /* if (bookConn != null)
                         {
                             bookConn.Close();
                             //oleDbCmd.Dispose();
                             bookConn.Dispose();
                         }*/
                        /*bookConn = new OleDbConnection(connParam);
                        oleDbCmd.Connection = bookConn;
                        bookConn.Open();
                        */
                        oleDbCmd.CommandText = @"Select * from Configuration";
                        OleDbDataReader dr = null;
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreedyHeuristic", System.Convert.ToInt32(CheckBoxAStarGreedyHeuristic.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxPredictHuristci", System.Convert.ToInt32(CheckBoxPredictHuristci.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreadyFirstSearch", System.Convert.ToInt32(CheckBoxAStarGreadyFirstSearch.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxBestMovments", System.Convert.ToInt32(CheckBoxBestMovments.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxOnlySelf", System.Convert.ToInt32(CheckBoxOnlySelf.Checked));
                        oleDbCmd.Parameters.AddWithValue("@RadioButtonOriginalImages", System.Convert.ToInt32(RadioButtonOriginalImages.Checked));
                        oleDbCmd.Parameters.AddWithValue("@RadioButtonBigFittingImages", System.Convert.ToInt32(RadioButtonBigFittingImages.Checked));
                        oleDbCmd.Parameters.AddWithValue("@RadioButtonSmallFittingImages", System.Convert.ToInt32(RadioButtonSmallFittingImages.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreedyMovement", System.Convert.ToInt32(CheckBoxAStarGreedyMovement.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxUseDoubleTime", System.Convert.ToInt32(CheckBoxUseDoubleTime.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxUsePenaltyRegradMechnisam", System.Convert.ToInt32(CheckBoxUsePenaltyRegradMechnisam.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxDynamicProgrammingAStarGreedyt", System.Convert.ToInt32(CheckBoxDynamicProgrammingAStarGreedyt.Checked));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxMaxTree", System.Convert.ToInt32(ComboBoxMaxLevel.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxAttack", System.Convert.ToInt32(ComboBoxAttack.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxObjectDangour", System.Convert.ToInt32(ComboBoxObjectDangour.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxReducedAttacked", System.Convert.ToInt32(ComboBoxReducedAttacked.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxSupport", System.Convert.ToInt32(ComboBoxSupport.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxHitting", System.Convert.ToInt32(ComboBoxKiller.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxMovments", System.Convert.ToInt32(ComboBoxMovments.Text));
                        oleDbCmd.Parameters.AddWithValue("@ArrangmentsChanged", System.Convert.ToInt32(ArrangmentsChanged));
                        oleDbCmd.Parameters.AddWithValue("@GrayTimer", System.Convert.ToInt32(GrayTimer.Times));
                        oleDbCmd.Parameters.AddWithValue("@BrownTimer", System.Convert.ToInt32(BrownTimer.Times));
                        oleDbCmd.Parameters.AddWithValue("@BobSection", System.Convert.ToInt32(BobSection));
                        oleDbCmd.Parameters.AddWithValue("@AliceSection", System.Convert.ToInt32(AliceSection));
                        oleDbCmd.Parameters.AddWithValue("@StateCP", System.Convert.ToInt32(StateCP));
                        oleDbCmd.Parameters.AddWithValue("@StateCC", System.Convert.ToInt32(StateCC));
                        oleDbCmd.Parameters.AddWithValue("@StateGe", System.Convert.ToInt32(StateGe));
                        oleDbCmd.Parameters.AddWithValue("@Blitz", System.Convert.ToInt32(Blitz));
                        oleDbCmd.Parameters.AddWithValue("@Person", System.Convert.ToInt32(Person));
                        oleDbCmd.Parameters.AddWithValue("@SettingPRFALSE", System.Convert.ToInt32(SettingPRFALSE));
                        oleDbCmd.Parameters.AddWithValue("@FullGame", System.Convert.ToInt32(FullGame));
                        oleDbCmd.Parameters.AddWithValue("@Stockfish", System.Convert.ToInt32(Stockfish));
                        oleDbCmd.Parameters.AddWithValue("@lable1", label1.Text);
                        oleDbCmd.Parameters.AddWithValue("@lable2", label2.Text);
                        oleDbCmd.Parameters.AddWithValue("@MovmentsNumber", System.Convert.ToInt32(MovmentsNumber));
                        oleDbCmd.Parameters.AddWithValue("@Quantum", System.Convert.ToInt32(Quantum));
                        oleDbCmd.Parameters.AddWithValue("@Sugar", System.Convert.ToInt32(Sugar));
                        oleDbCmd.Parameters.AddWithValue("@MenueSelecte", System.Convert.ToInt32(MenueSelecte));
                        oleDbCmd.Parameters.AddWithValue("@AllDrawKind", System.Convert.ToInt32(AllDrawKind));
                        oleDbCmd.Parameters.AddWithValue("@OrderPlate", System.Convert.ToInt32(OrderPlate));
                        oleDbCmd.Parameters.AddWithValue("@Deeperthandeeper", System.Convert.ToInt32(Deeperthandeeper));
                        if (!Quantum)
                            oleDbCmd.Parameters.AddWithValue("@Colleralation", RefrigtzDLL.ThinkingChess.Colleralation);
                        else
                            oleDbCmd.Parameters.AddWithValue("@Colleralation", QuantumRefrigiz.ThinkingQuantumChess.Colleralation);
                        if (!Quantum)
                            oleDbCmd.Parameters.AddWithValue("@DeColleralation", RefrigtzDLL.ThinkingChess.DeColleralation);
                        else
                            oleDbCmd.Parameters.AddWithValue("@DeColleralation", QuantumRefrigiz.ThinkingQuantumChess.DeColleralation);
                        dr = oleDbCmd.ExecuteReader();
                        bool ARead = false;

                        if (dr.Read())
                        {
                            CheckBoxAStarGreedyHeuristic.Checked = System.Convert.ToBoolean(dr["CheckBoxAStarGreedyHeuristic"]);
                            if (CheckBoxAStarGreedyHeuristic.Checked)
                                AStarGreedyHeuristic = true;
                            else
                                AStarGreedyHeuristic = false;
                            CheckBoxPredictHuristci.Checked = System.Convert.ToBoolean(dr["CheckBoxPredictHuristci"]);
                            if (CheckBoxPredictHuristci.Checked)
                                PredictHeuristic = true;
                            else
                                PredictHeuristic = false;
                            CheckBoxAStarGreadyFirstSearch.Checked = System.Convert.ToBoolean(dr["CheckBoxAStarGreadyFirstSearch"]);

                            CheckBoxBestMovments.Checked = System.Convert.ToBoolean(dr["CheckBoxBestMovments"]);
                            if (CheckBoxBestMovments.Checked)
                                BestMovments = true;
                            else
                                BestMovments = false;
                            CheckBoxOnlySelf.Checked = System.Convert.ToBoolean(dr["CheckBoxOnlySelf"]);
                            if (CheckBoxOnlySelf.Checked)
                                OnlySelf = true;
                            else
                                OnlySelf = false;
                            RadioButtonOriginalImages.Checked = System.Convert.ToBoolean(dr["RadioButtonOriginalImages"]);
                            RadioButtonBigFittingImages.Checked = System.Convert.ToBoolean(dr["RadioButtonBigFittingImages"]);
                            RadioButtonSmallFittingImages.Checked = System.Convert.ToBoolean(dr["RadioButtonSmallFittingImages"]);
                            CheckBoxAStarGreedyMovement.Checked = System.Convert.ToBoolean(dr["CheckBoxAStarGreedyMovement"]);
                            CheckBoxUseDoubleTime.Checked = System.Convert.ToBoolean(dr["CheckBoxUseDoubleTime"]);
                            CheckBoxUsePenaltyRegradMechnisam.Checked = System.Convert.ToBoolean(dr["CheckBoxUsePenaltyRegradMechnisam"]);
                            if (CheckBoxUsePenaltyRegradMechnisam.Checked)
                                UsePenaltyRegardMechnisam = true;
                            else
                                UsePenaltyRegardMechnisam = false;
                            CheckBoxDynamicProgrammingAStarGreedyt.Checked = System.Convert.ToBoolean(dr["CheckBoxDynamicProgrammingAStarGreedyt"]);
                            ComboBoxMaxLevel.Text = System.Convert.ToString(dr["ComboBoxMaxTree"]);
                            ComboBoxAttack.Text = System.Convert.ToString(dr["ComboBoxAttack"]);
                            ComboBoxObjectDangour.Text = System.Convert.ToString(dr["ComboBoxObjectDangour"]);
                            ComboBoxReducedAttacked.Text = System.Convert.ToString(dr["ComboBoxReducedAttacked"]);
                            ComboBoxSupport.Text = System.Convert.ToString(dr["ComboBoxSupport"]);
                            ComboBoxKiller.Text = System.Convert.ToString(dr["ComboBoxHitting"]);
                            ComboBoxMovments.Text = System.Convert.ToString(dr["ComboBoxMovments"]);
                            ArrangmentsChanged = System.Convert.ToBoolean(dr["ArrangmentsChanged"]);
                            GrayTimer.Times = System.Convert.ToInt64(dr["GrayTimer"]);
                            BrownTimer.Times = System.Convert.ToInt64(dr["BrownTimer"]);
                            BobSection = System.Convert.ToBoolean(dr["BobSection"]);
                            AliceSection = System.Convert.ToBoolean(dr["AliceSection"]);
                            StateCP = System.Convert.ToBoolean(dr["StateCP"]);
                            StateCC = System.Convert.ToBoolean(dr["StateCC"]);
                            StateGe = System.Convert.ToBoolean(dr["StateGe"]);
                            Blitz = System.Convert.ToBoolean(dr["Blitz"]);
                            Person = System.Convert.ToBoolean(dr["Person"]);
                            SettingPRFALSE = System.Convert.ToBoolean(dr["SettingPRFALSE"]);
                            FullGame = System.Convert.ToBoolean(dr["FullGame"]);
                            Stockfish = System.Convert.ToBoolean(dr["Stockfish"]);
                            label1.Text = System.Convert.ToString(dr["lable1"]);
                            label2.Text = System.Convert.ToString(dr["lable2"]);
                            MovmentsNumberMax = System.Convert.ToInt32(dr["MovmentsNumber"]);
                            //MovmentsNumber = MovmentsNumberMax;
                            Quantum = System.Convert.ToBoolean(dr["Quantum"]);
                            Sugar = System.Convert.ToBoolean(dr["Sugar"]);
                            MenueSelecte = System.Convert.ToBoolean(dr["MenueSelecte"]);
                            AllDrawKind = System.Convert.ToInt32(dr["AllDrawKind"]);
                            OrderPlate = System.Convert.ToInt32(dr["OrderPlate"]);
                            Deeperthandeeper = System.Convert.ToBoolean(dr["Deeperthandeeper"]);
                            if (Deeperthandeeper)
                                checkBoxDeeperthandeeper.Checked = true;
                            else
                                checkBoxDeeperthandeeper.Checked = false;
                            if (!Quantum)
                                RefrigtzDLL.ThinkingChess.Colleralation = System.Convert.ToInt32(dr["Colleralation"]);
                            else
                                QuantumRefrigiz.ThinkingQuantumChess.Colleralation = System.Convert.ToInt32(dr["Colleralation"]);
                            if (!Quantum)
                                RefrigtzDLL.ThinkingChess.DeColleralation = System.Convert.ToInt32(dr["DeColleralation"]);
                            else
                                QuantumRefrigiz.ThinkingQuantumChess.DeColleralation = System.Convert.ToInt32(dr["DeColleralation"]);
                        }
                        bookConn.Close();
                        oleDbCmd.Clone();
                        //oleDbCmd.Dispose();
                        bookConn.Dispose();

                        if (!ARead)
                            CreateConfigurationTable();



                    }
                    catch (Exception t)
                    {
                        Log(t);
                        try
                        {


                            oleDbCmd.CommandText = @"Drop Table Configuration";
                            int temp = 0;
                            temp = oleDbCmd.ExecuteNonQuery();
                            bookConn.Close();
                            oleDbCmd.Clone();
                            //oleDbCmd.Dispose();
                            bookConn.Dispose();
                        }
                        catch (Exception tt)
                        {
                            Log(tt);
                            bookConn.Close();
                            oleDbCmd.Clone();
                            //oleDbCmd.Dispose();
                            bookConn.Dispose();
                            CreateConfigurationTable();
                        }
                        goto Begin12;

                    }
                }
            }
        }
        //Updating of Configuration Method.
        void UpdateConfigurationTable()
        {
            Object O = new Object();
            lock (O)
            {
                Begin12:
                if (bookConn != null)
                {
                    bookConn.Close();
                    oleDbCmd.Dispose();
                    bookConn.Dispose();
                }
                bookConn = new OleDbConnection(connParam);
                bookConn.Open();
                oleDbCmd.Connection = bookConn;

                //if (UpdateConfigurationTableVal)
                {

                    //Begin12:
                    //#pragma warning disable CS0164 // This label has not been referenced
                    try
                    {
                        //#pragma warning restore CS0164 // This label has not been referenced
                        /* if (AStarGreedyHeuristic)
                             CheckBoxAStarGreedyHeuristic.Checked = true;
                         else
                             CheckBoxAStarGreedyHeuristic.Checked = false;
                         if (PredictHeuristic)
                             CheckBoxPredictHuristci.Checked = true;
                         else
                             CheckBoxPredictHuristci.Checked = false;
                         if (AStarGreedyHeuristic)
                             CheckBoxAStarGreadyFirstSearch.Checked = true;
                         else
                             CheckBoxAStarGreadyFirstSearch.Checked = false;
                         if (BestMovments)
                             CheckBoxBestMovments.Checked = true;
                         else
                             CheckBoxBestMovments.Checked = false;
                         if (OnlySelf)
                             CheckBoxOnlySelf.Checked = true;
                         else
                             CheckBoxOnlySelf.Checked = false;
                         if (UsePenaltyRegardMechnisam)
                             CheckBoxUsePenaltyRegradMechnisam.Checked = true;
                         else
                             CheckBoxUsePenaltyRegradMechnisam.Checked = false;
                         TimersSet = false;

                         */
                        /*if (bookConn != null)
                        {
                            bookConn.Close();
                            bookConn.Dispose();
                        }*/
                        /* bookConn = new OleDbConnection(connParam);
                         oleDbCmd.Connection = bookConn;
                         bookConn.Open();
                         */
                        if (!Quantum)
                            oleDbCmd.CommandText = String.Concat("Update Configuration Set CheckBoxAStarGreedyHeuristic=", System.Convert.ToInt32(CheckBoxAStarGreedyHeuristic.Checked).ToString(), ",CheckBoxPredictHuristci=", System.Convert.ToInt32(CheckBoxPredictHuristci.Checked).ToString(), ",CheckBoxAStarGreadyFirstSearch=", System.Convert.ToInt32(CheckBoxAStarGreadyFirstSearch.Checked).ToString(), ",CheckBoxBestMovments=", System.Convert.ToInt32(CheckBoxBestMovments.Checked).ToString(), ",CheckBoxOnlySelf=", System.Convert.ToInt32(CheckBoxOnlySelf.Checked).ToString(), ",RadioButtonOriginalImages=", System.Convert.ToInt32(RadioButtonOriginalImages.Checked).ToString(), ",RadioButtonBigFittingImages=", System.Convert.ToInt32(RadioButtonBigFittingImages.Checked).ToString(), ",RadioButtonSmallFittingImages=", System.Convert.ToInt32(RadioButtonSmallFittingImages.Checked).ToString(), ",CheckBoxAStarGreedyMovement=", System.Convert.ToInt32(CheckBoxAStarGreedyMovement.Checked).ToString(), ",CheckBoxUseDoubleTime=", System.Convert.ToInt32(CheckBoxUseDoubleTime.Checked).ToString(), ",CheckBoxUsePenaltyRegradMechnisam=", System.Convert.ToInt32(CheckBoxUsePenaltyRegradMechnisam.Checked).ToString(), ",CheckBoxDynamicProgrammingAStarGreedyt=", System.Convert.ToInt32(CheckBoxDynamicProgrammingAStarGreedyt.Checked).ToString(), ",ComboBoxMaxTree=", ComboBoxMaxLevel.Text, ",ComboBoxAttack=", ComboBoxAttack.Text, ",ComboBoxObjectDangour=", ComboBoxObjectDangour.Text, ",ComboBoxReducedAttacked=", ComboBoxReducedAttacked.Text, ",ComboBoxSupport=", ComboBoxSupport.Text, ",ComboBoxHitting=", ComboBoxKiller.Text, ",ComboBoxMovments=", ComboBoxMovments.Text, ",ArrangmentsChanged=", System.Convert.ToString(System.Convert.ToInt32(ArrangmentsChanged)), ",GrayTimer=", GrayTimer.Times.ToString(), ",BrownTimer=", BrownTimer.Times.ToString(), ",BobSection = ", System.Convert.ToUInt32(BobSection).ToString(), ",AliceSection =", System.Convert.ToUInt32(AliceSection).ToString(), ",StateCP = ", System.Convert.ToUInt32(StateCP).ToString(), ",StateCC = ", System.Convert.ToUInt32(StateCC).ToString(), ",StateGe=", System.Convert.ToUInt32(StateGe).ToString(), ",Blitz=", System.Convert.ToUInt32(Blitz).ToString(), ",Person=", System.Convert.ToUInt32(Person).ToString(), ",SettingPRFALSE=", System.Convert.ToUInt32(SettingPRFALSE).ToString(), ",FullGame=", System.Convert.ToUInt32(FullGame).ToString(), ",Stockfish=", System.Convert.ToUInt32(Stockfish).ToString(), ",lable1='", label1.Text, "',lable2='", label2.Text, "',MovmentsNumber='", MovmentsNumber.ToString(), "',", "Quantum = '", System.Convert.ToInt32(Quantum).ToString(), "',", "Sugar = '", System.Convert.ToInt32(Sugar).ToString(), "',", "MenueSelecte='", System.Convert.ToInt32(MenueSelecte).ToString(), "',", "AllDrawKind='", System.Convert.ToInt32(AllDrawKind).ToString(), "',", "OrderPlate='", System.Convert.ToInt32(OrderPlate).ToString(), "'," + "Deeperthandeeper='" + System.Convert.ToInt32(Deeperthandeeper).ToString(), "',", "Colleralation='", RefrigtzDLL.ThinkingChess.Colleralation.ToString(), "',", "DeColleralation='", RefrigtzDLL.ThinkingChess.DeColleralation.ToString(), "'");
                        else
                            oleDbCmd.CommandText = String.Concat("Update Configuration Set CheckBoxAStarGreedyHeuristic=", System.Convert.ToInt32(CheckBoxAStarGreedyHeuristic.Checked).ToString(), ",CheckBoxPredictHuristci=", System.Convert.ToInt32(CheckBoxPredictHuristci.Checked).ToString(), ",CheckBoxAStarGreadyFirstSearch=", System.Convert.ToInt32(CheckBoxAStarGreadyFirstSearch.Checked).ToString(), ",CheckBoxBestMovments=", System.Convert.ToInt32(CheckBoxBestMovments.Checked).ToString(), ",CheckBoxOnlySelf=", System.Convert.ToInt32(CheckBoxOnlySelf.Checked).ToString(), ",RadioButtonOriginalImages=", System.Convert.ToInt32(RadioButtonOriginalImages.Checked).ToString(), ",RadioButtonBigFittingImages=", System.Convert.ToInt32(RadioButtonBigFittingImages.Checked).ToString(), ",RadioButtonSmallFittingImages=", System.Convert.ToInt32(RadioButtonSmallFittingImages.Checked).ToString(), ",CheckBoxAStarGreedyMovement=", System.Convert.ToInt32(CheckBoxAStarGreedyMovement.Checked).ToString(), ",CheckBoxUseDoubleTime=", System.Convert.ToInt32(CheckBoxUseDoubleTime.Checked).ToString(), ",CheckBoxUsePenaltyRegradMechnisam=", System.Convert.ToInt32(CheckBoxUsePenaltyRegradMechnisam.Checked).ToString(), ",CheckBoxDynamicProgrammingAStarGreedyt=", System.Convert.ToInt32(CheckBoxDynamicProgrammingAStarGreedyt.Checked).ToString(), ",ComboBoxMaxTree=", ComboBoxMaxLevel.Text, ",ComboBoxAttack=", ComboBoxAttack.Text, ",ComboBoxObjectDangour=", ComboBoxObjectDangour.Text, ",ComboBoxReducedAttacked=", ComboBoxReducedAttacked.Text, ",ComboBoxSupport=", ComboBoxSupport.Text, ",ComboBoxHitting=", ComboBoxKiller.Text, ",ComboBoxMovments=", ComboBoxMovments.Text, ",ArrangmentsChanged=", System.Convert.ToString(System.Convert.ToInt32(ArrangmentsChanged)), ",GrayTimer=", GrayTimer.Times.ToString(), ",BrownTimer=", BrownTimer.Times.ToString(), ",BobSection = ", System.Convert.ToUInt32(BobSection).ToString(), ",AliceSection =", System.Convert.ToUInt32(AliceSection).ToString(), ",StateCP = ", System.Convert.ToUInt32(StateCP).ToString(), ",StateCC = ", System.Convert.ToUInt32(StateCC).ToString(), ",StateGe=", System.Convert.ToUInt32(StateGe).ToString(), ",Blitz=", System.Convert.ToUInt32(Blitz).ToString(), ",Person=", System.Convert.ToUInt32(Person).ToString(), ",SettingPRFALSE=", System.Convert.ToUInt32(SettingPRFALSE).ToString(), ",FullGame=", System.Convert.ToUInt32(FullGame).ToString(), ",Stockfish=", System.Convert.ToUInt32(Stockfish).ToString(), ",lable1='", label1.Text, "',lable2='", label2.Text, "',MovmentsNumber='", MovmentsNumber.ToString(), "',", "Quantum = '", System.Convert.ToInt32(Quantum).ToString(), "',", "Sugar = '", System.Convert.ToInt32(Sugar).ToString(), "',", "MenueSelecte='", System.Convert.ToInt32(MenueSelecte).ToString(), "',", "AllDrawKind='", System.Convert.ToInt32(AllDrawKind).ToString(), "',", "OrderPlate='", System.Convert.ToInt32(OrderPlate).ToString(), "'," + "Deeperthandeeper='" + System.Convert.ToInt32(Deeperthandeeper).ToString(), "',", "Colleralation='", QuantumRefrigiz.ThinkingQuantumChess.Colleralation.ToString(), "',", "DeColleralation='", QuantumRefrigiz.ThinkingQuantumChess.DeColleralation.ToString(), "'");

                        oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreedyHeuristic", System.Convert.ToInt32(CheckBoxAStarGreedyHeuristic.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxPredictHuristci", System.Convert.ToInt32(CheckBoxPredictHuristci.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreadyFirstSearch", System.Convert.ToInt32(CheckBoxAStarGreadyFirstSearch.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxBestMovments", System.Convert.ToInt32(CheckBoxBestMovments.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxOnlySelf", System.Convert.ToInt32(CheckBoxOnlySelf.Checked));
                        oleDbCmd.Parameters.AddWithValue("@RadioButtonOriginalImages", System.Convert.ToInt32(RadioButtonOriginalImages.Checked));
                        oleDbCmd.Parameters.AddWithValue("@RadioButtonBigFittingImages", System.Convert.ToInt32(RadioButtonBigFittingImages.Checked));
                        oleDbCmd.Parameters.AddWithValue("@RadioButtonSmallFittingImages", System.Convert.ToInt32(RadioButtonSmallFittingImages.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxAStarGreedyMovement", System.Convert.ToInt32(CheckBoxAStarGreedyMovement.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxUseDoubleTime", System.Convert.ToInt32(CheckBoxUseDoubleTime.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxUsePenaltyRegradMechnisam", System.Convert.ToInt32(CheckBoxUsePenaltyRegradMechnisam.Checked));
                        oleDbCmd.Parameters.AddWithValue("@CheckBoxDynamicProgrammingAStarGreedyt", System.Convert.ToInt32(CheckBoxDynamicProgrammingAStarGreedyt.Checked));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxMaxTree", System.Convert.ToInt32(ComboBoxMaxLevel.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxAttack", System.Convert.ToInt32(ComboBoxAttack.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxObjectDangour", System.Convert.ToInt32(ComboBoxObjectDangour.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxReducedAttacked", System.Convert.ToInt32(ComboBoxReducedAttacked.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxSupport", System.Convert.ToInt32(ComboBoxSupport.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxHitting", System.Convert.ToInt32(ComboBoxKiller.Text));
                        oleDbCmd.Parameters.AddWithValue("@ComboBoxMovments", System.Convert.ToInt32(ComboBoxMovments.Text));
                        oleDbCmd.Parameters.AddWithValue("@ArrangmentsChanged", System.Convert.ToInt32(ArrangmentsChanged));
                        oleDbCmd.Parameters.AddWithValue("@GrayTimer", System.Convert.ToInt32(GrayTimer.Times));
                        oleDbCmd.Parameters.AddWithValue("@BrownTimer", System.Convert.ToInt32(BrownTimer.Times));
                        oleDbCmd.Parameters.AddWithValue("@BobSection", System.Convert.ToInt32(BobSection));
                        oleDbCmd.Parameters.AddWithValue("@AliceSection", System.Convert.ToInt32(AliceSection));
                        oleDbCmd.Parameters.AddWithValue("@StateCP", System.Convert.ToInt32(StateCP));
                        oleDbCmd.Parameters.AddWithValue("@StateCC", System.Convert.ToInt32(StateCC));
                        oleDbCmd.Parameters.AddWithValue("@StateGe", System.Convert.ToInt32(StateGe));
                        oleDbCmd.Parameters.AddWithValue("@Blitz", System.Convert.ToInt32(Blitz));
                        oleDbCmd.Parameters.AddWithValue("@Person", System.Convert.ToInt32(Person));
                        oleDbCmd.Parameters.AddWithValue("@SettingPRFALSE", System.Convert.ToInt32(SettingPRFALSE));
                        oleDbCmd.Parameters.AddWithValue("@FullGame", System.Convert.ToInt32(FullGame));
                        oleDbCmd.Parameters.AddWithValue("@Stockfish", System.Convert.ToInt32(Stockfish));
                        oleDbCmd.Parameters.AddWithValue("@lable1", label1.Text);
                        oleDbCmd.Parameters.AddWithValue("@lable2", label2.Text);
                        oleDbCmd.Parameters.AddWithValue("@MovmentsNumber", System.Convert.ToInt32(MovmentsNumber));
                        oleDbCmd.Parameters.AddWithValue("@Quantum", System.Convert.ToInt32(Quantum));
                        oleDbCmd.Parameters.AddWithValue("@Sugar", System.Convert.ToInt32(Sugar));
                        oleDbCmd.Parameters.AddWithValue("@MenueSelecte", System.Convert.ToInt32(MenueSelecte));
                        oleDbCmd.Parameters.AddWithValue("@AllDrawKind", System.Convert.ToInt32(AllDrawKind));
                        oleDbCmd.Parameters.AddWithValue("@OrderPlate", System.Convert.ToInt32(OrderPlate));
                        oleDbCmd.Parameters.AddWithValue("@Deeperthandeeper", System.Convert.ToInt32(Deeperthandeeper));
                        if (!Quantum)
                            oleDbCmd.Parameters.AddWithValue("@Colleralation", RefrigtzDLL.ThinkingChess.Colleralation);
                        else
                            oleDbCmd.Parameters.AddWithValue("@Colleralation", QuantumRefrigiz.ThinkingQuantumChess.Colleralation);
                        if (!Quantum)
                            oleDbCmd.Parameters.AddWithValue("@DeColleralation", RefrigtzDLL.ThinkingChess.DeColleralation);
                        else
                            oleDbCmd.Parameters.AddWithValue("@DeColleralation", QuantumRefrigiz.ThinkingQuantumChess.DeColleralation);

                        /*   if (bookConn != null)
                               bookConn.Close();
                           bookConn = new OleDbConnection(connParam);
                           oleDbCmd.Connection = bookConn;
                           bookConn.Open();
                           */
                        int temp = oleDbCmd.ExecuteNonQuery();
                        TimersSet = true;
                    }
                    catch (Exception t)
                    {
                        //TimersSet = true;
                        Log(t);
                        try
                        {

                            if (bookConn != null)
                            {
                                bookConn.Close();
                                oleDbCmd.Dispose();
                                bookConn.Dispose();
                            }
                            bookConn = new OleDbConnection(connParam);
                            bookConn.Open();
                            oleDbCmd.Connection = bookConn;


                            oleDbCmd.CommandText = @"Drop Table Configuration";
                            int temp = 0;
                            temp = oleDbCmd.ExecuteNonQuery();

                            //CreateConfigurationTable();

                            goto Begin12;
                        }
                        catch (Exception tt)
                        {
                            Log(tt);

                        }

                    }
                }
                bookConn.Close();
                oleDbCmd.Clone();
                //oleDbCmd.Dispose();
                bookConn.Dispose();
            }
        }
        //Inserting of New Tabler at Database.
        void InsertTableAtDatabase(int[,] Table)
        {
            Object O = new Object();
            lock (O)
            {         //TimersSet = false;
                int[,] Tab = new int[8, 8];
                for (int i = 0; i < 8; i++)
                {
                    for (int j = 0; j < 8; j++)
                    {
                        Tab[i, j] = Table[i, j];
                    }
                }

                String TableName = CreatTable();

                oleDbCmd = new OleDbCommand();
                bookConn = new OleDbConnection(connParam);
                bookConn.Open();
                oleDbCmd.Connection = bookConn;


                for (int i = 0; i < 8; i++)
                {
                    /*  if (bookConn != null)
                          bookConn.Close();
                      bookConn = new OleDbConnection(connParam);
                      oleDbCmd.Connection = bookConn;
                      bookConn.Open();
      */
                    oleDbCmd.CommandText = @"insert into " + TableName + "(a,b,c,d,e,f,g,h)  values (" + Tab[0, i].ToString() + "," + Tab[1, i].ToString() + "," + Tab[2, i].ToString() + "," + Tab[3, i].ToString() + "," + Tab[4, i].ToString() + "," + Tab[5, i].ToString() + "," + Tab[6, i].ToString() + "," + Tab[7, i].ToString() + ")";

                    /* oleDbCmd.Parameters.AddWithValue("@a", System.Convert.ToInt32(Tab[0, i]));
                     oleDbCmd.Parameters.AddWithValue("@b", System.Convert.ToInt32(Tab[1, i]));
                     oleDbCmd.Parameters.AddWithValue("@c", System.Convert.ToInt32(Tab[2, i]));
                     oleDbCmd.Parameters.AddWithValue("@d", System.Convert.ToInt32(Tab[3, i]));
                     oleDbCmd.Parameters.AddWithValue("@e", System.Convert.ToInt32(Tab[4, i]));
                     oleDbCmd.Parameters.AddWithValue("@f", System.Convert.ToInt32(Tab[5, i]));
                     oleDbCmd.Parameters.AddWithValue("@g", System.Convert.ToInt32(Tab[6, i]));
                     oleDbCmd.Parameters.AddWithValue("@h", System.Convert.ToInt32(Tab[7, i]));
     */
                    int temp = 0;
                    temp = oleDbCmd.ExecuteNonQuery();

                }
                //MaxCurrent
                bookConn.Close();
                oleDbCmd.Clone();
                //oleDbCmd.Dispose();
                bookConn.Dispose();
                if (MovmentsNumber >= 1)
                    GameStarted = true;
                MovmentsNumber++;
                MovmentsNumberMax = MovmentsNumber;

            }
        }
        void DrawObjects()
        {
            Object OO = new Object();
            lock (OO)
            {
                if (Draw == null || g == null)
                    return;



                for (int i = 0; i < Draw.SodierHigh; i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (Draw.SolderesOnTable != null && Draw.SolderesOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Draw.SolderesOnTable[i].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                }
                //}, () =>
                //{
                //for(int i = 0;i< Draw.ElefantHigh;i++)
                for (int i = 0; i < Draw.ElefantHigh; i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (Draw.ElephantOnTable != null && Draw.ElephantOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Draw.ElephantOnTable[i].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                }
                //}, () =>
                //{
                //for(int i = 0;i< Draw.HourseHight;i++)
                for (int i = 0; i < Draw.HourseHight; i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (Draw.HoursesOnTable != null && Draw.HoursesOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Draw.HoursesOnTable[i].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                }
                //}, () =>
                //{
                for (int i = 0; i < Draw.CastleHigh; i++)
                //for(int i = 0;i< Draw.CastleHigh;i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (Draw.CastlesOnTable != null && Draw.CastlesOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Draw.CastlesOnTable[i].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                    //}, () =>
                    //{
                }
                //for(int i = 0;i< Draw.MinisterHigh;i++)
                for (int i = 0; i < Draw.MinisterHigh; i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (Draw.MinisterOnTable != null && Draw.MinisterOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Draw.MinisterOnTable[i].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }

                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                    //}, () =>
                }
                //{
                for (int i = 0; i < Draw.KingHigh; i++)
                //for(int i = 0;i< Draw.KingHigh;i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (Draw.KingOnTable != null && Draw.KingOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Draw.KingOnTable[i].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                    //}
                }
            }
        }
        void DrawObjectsQ()
        {
            Object OO = new Object();
            lock (OO)
            {
                if (DrawQ == null || g == null)
                    return;

                for (int i = 0; i < DrawQ.SodierHigh; i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (DrawQ.SolderesOnTable != null && DrawQ.SolderesOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    DrawQ.SolderesOnTable[i].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                }
                //}, () =>
                //{
                //for(int i = 0;i< DrawQ.ElefantHigh;i++)
                for (int i = 0; i < DrawQ.ElefantHigh; i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (DrawQ.ElephantOnTable != null && DrawQ.ElephantOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    DrawQ.ElephantOnTable[i].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                }
                //}, () =>
                //{
                //for(int i = 0;i< DrawQ.HourseHight;i++)
                for (int i = 0; i < DrawQ.HourseHight; i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (DrawQ.HoursesOnTable != null && DrawQ.HoursesOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    DrawQ.HoursesOnTable[i].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                }
                //}, () =>
                //{
                for (int i = 0; i < DrawQ.CastleHigh; i++)
                //for(int i = 0;i< DrawQ.CastleHigh;i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (DrawQ.CastlesOnTable != null && DrawQ.CastlesOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    DrawQ.CastlesOnTable[i].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                    //}, () =>
                    //{
                }
                //for(int i = 0;i< DrawQ.MinisterHigh;i++)
                for (int i = 0; i < DrawQ.MinisterHigh; i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (DrawQ.MinisterOnTable != null && DrawQ.MinisterOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    DrawQ.MinisterOnTable[i].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }

                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                    //}, () =>
                }
                //{
                for (int i = 0; i < DrawQ.KingHigh; i++)
                //for(int i = 0;i< DrawQ.KingHigh;i++)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        if (DrawQ.KingOnTable != null && DrawQ.KingOnTable[i] != null)
                        {
                            try
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    DrawQ.KingOnTable[i].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                    }
                    //}
                    //}
                }
            }
        }

        //Painting of Form Refregitz PictureBox and Tow Refrigtz.Timer Pictue Box on Time.
        private void PictureBoxRefrigtz_Paint(object sender, PaintEventArgs e)
        {
            Object o = new Object();
            lock (o)
            {
                if (!Quantum)
                {
                    if (RefrigtzDLL.AllDraw.DrawTable)
                    {
                        if (GameStarted && MovmentsNumber == 1)
                            ButtonChangeArrangment.Visible = false;


                        if (GrayTimer.EndTime)
                            BrownWiner = true;
                        if (BrownTimer.EndTime)
                            GrayWinner = true;
                        if (GrayWinner || BrownWiner)
                        {
                            if (t1 != null)
                                t1.Abort();
                            if (t2 != null)
                                t2.Abort();
                            if (t3 != null)
                                t3.Abort();
                            if (GrayWinner)
                                //SetBoxText("\r\nGray Winees!");
                                if (BrownWiner)
                                    //SetBoxText("\r\nBrown Winees!");

                                    return;
                        }

                        try
                        {
                            //ReconstructTable();
                            PictureBoxRefrigtz.Image = (Image)new Bitmap(PictureBoxRefrigtz.Width, PictureBoxRefrigtz.Height);
                            ChessTable = (Image)new Bitmap(PictureBoxRefrigtz.Image.Width, PictureBoxRefrigtz.Image.Height);
                            g = Graphics.FromImage(ChessTable);
                            g.FillRectangle(new SolidBrush(Color.Yellow), new Rectangle(0, 0, PictureBoxRefrigtz.Width, PictureBoxRefrigtz.Height));

                            if (Draw != null && Draw.TableList != null && Draw.TableList.Count > 0)
                                Draw.SetObjectNumbers(Draw.TableList[0]);

                            for (int i = 0; i < PictureBoxRefrigtz.Image.Width; i += PictureBoxRefrigtz.Image.Width / 8)
                                for (int j = 0; j < PictureBoxRefrigtz.Image.Height; j += PictureBoxRefrigtz.Image.Height / 8)
                                {
                                    try
                                    {
                                        if ((i + j) % 2 == 0)
                                            g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\Black.jpg"), new Rectangle(i, j, this.PictureBoxRefrigtz.Width / 8, this.PictureBoxRefrigtz.Height / 8));
                                        else
                                            g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\White.jpg"), new Rectangle(i, j, this.PictureBoxRefrigtz.Width / 8, this.PictureBoxRefrigtz.Height / 8));

                                    }
                                    catch (Exception t)
                                    {
                                        Log(t);
                                    }
                                }
                            if (RowClickP != -1 && ColumnClickP != -1)
                            {
                                Color a = Color.Gray;
                                if (OrderPlate == -1)
                                    a = Color.Brown;
                                bool[,] Tab = null;
                                Tab = VeryFye(CloneATable(Table), OrderPlate, a);
                                for (int i = 0; i < PictureBoxRefrigtz.Image.Width; i += PictureBoxRefrigtz.Image.Width / 8)
                                    for (int j = 0; j < PictureBoxRefrigtz.Image.Height; j += PictureBoxRefrigtz.Image.Height / 8)
                                    {
                                        try
                                        {
                                            if (Tab != null)
                                            {
                                                if (Tab[i / (PictureBoxRefrigtz.Image.Width / 8), j / (PictureBoxRefrigtz.Image.Height / 8)])
                                                {
                                                    g.DrawString("*", new Font("Times New Roman", 50), new SolidBrush(Color.Red), new Rectangle(i, j, this.PictureBoxRefrigtz.Width / 8, this.PictureBoxRefrigtz.Height / 8));
                                                }
                                            }

                                        }
                                        catch (Exception t) { Log(t); }
                                    }
                            }

                            DrawObjects();

                            PictureBoxRefrigtz.Image = ChessTable;
                            g.Dispose(); g = null;
                        }
                        catch (Exception t)
                        {
                            Log(t);


                            //RunInFront();
                        }
                        RefrigtzDLL.AllDraw.DrawTable = false;
                    }

                    AllDrawLoad = true;

                }
                else
                {
                    if (QuantumRefrigiz.AllDraw.DrawTable)
                    {
                        if (GameStarted && MovmentsNumber == 1)
                            ButtonChangeArrangment.Visible = false;


                        if (GrayTimer.EndTime)
                            BrownWiner = true;
                        if (BrownTimer.EndTime)
                            GrayWinner = true;
                        if (GrayWinner || BrownWiner)
                        {
                            if (t1 != null)
                                t1.Abort();
                            if (t2 != null)
                                t2.Abort();
                            if (t3 != null)
                                t3.Abort();
                            if (GrayWinner)
                                //SetBoxText("\r\nGray Winees!");
                                if (BrownWiner)
                                    //SetBoxText("\r\nBrown Winees!");

                                    return;
                        }

                        try
                        {
                            PictureBoxRefrigtz.Image = (Image)new Bitmap(PictureBoxRefrigtz.Width, PictureBoxRefrigtz.Height);
                            ChessTable = (Image)new Bitmap(PictureBoxRefrigtz.Image.Width, PictureBoxRefrigtz.Image.Height);
                            g = Graphics.FromImage(ChessTable);
                            g.FillRectangle(new SolidBrush(Color.Yellow), new Rectangle(0, 0, PictureBoxRefrigtz.Width, PictureBoxRefrigtz.Height));

                            if (DrawQ != null && DrawQ.TableList != null && DrawQ.TableList.Count > 0)
                                DrawQ.SetObjectNumbers(DrawQ.TableList[0]);

                            for (int i = 0; i < PictureBoxRefrigtz.Image.Width; i += PictureBoxRefrigtz.Image.Width / 8)
                                for (int j = 0; j < PictureBoxRefrigtz.Image.Height; j += PictureBoxRefrigtz.Image.Height / 8)
                                {
                                    try
                                    {
                                        if ((i + j) % 2 == 0)
                                            g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\Black.jpg"), new Rectangle(i, j, this.PictureBoxRefrigtz.Width / 8, this.PictureBoxRefrigtz.Height / 8));
                                        else
                                            g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\White.jpg"), new Rectangle(i, j, this.PictureBoxRefrigtz.Width / 8, this.PictureBoxRefrigtz.Height / 8));

                                    }
                                    catch (Exception t) { Log(t); }
                                }
                            if (RowClickP != -1 && ColumnClickP != -1)
                            {
                                Color a = Color.Gray;
                                if (OrderPlate == -1)
                                    a = Color.Brown;
                                bool[,] Tab = null;
                                Tab = VeryFye(CloneATable(Table), OrderPlate, a);
                                for (int i = 0; i < PictureBoxRefrigtz.Image.Width; i += PictureBoxRefrigtz.Image.Width / 8)
                                    for (int j = 0; j < PictureBoxRefrigtz.Image.Height; j += PictureBoxRefrigtz.Image.Height / 8)
                                    {
                                        try
                                        {
                                            if (Tab != null)
                                            {
                                                if (Tab[i / (PictureBoxRefrigtz.Image.Width / 8), j / (PictureBoxRefrigtz.Image.Height / 8)])
                                                {
                                                    g.DrawString("*", new Font("Times New Roman", 50), new SolidBrush(Color.Red), new Rectangle(i, j, this.PictureBoxRefrigtz.Width / 8, this.PictureBoxRefrigtz.Height / 8));
                                                }
                                            }

                                        }
                                        catch (Exception t) { Log(t); }
                                    }
                            }
                            DrawObjectsQ();

                            PictureBoxRefrigtz.Image = ChessTable;
                            g.Dispose(); g = null;
                        }
                        catch (Exception t)
                        {
                            Log(t);


                            //RunInFront();
                        }
                        QuantumRefrigiz.AllDraw.DrawTable = false;
                    }

                    AllDrawLoad = true;

                }
                SetPrictureBoxRefregitzInvalidate(PictureBoxTimerGray);
                SetPrictureBoxRefregitzUpdate(PictureBoxTimerGray);
            }
        }

        int CalculateMoveMentHueuristicUser(int Kind, int[,] Table, int Order, int Row, int Column, int RowSource, int ColumnS, Color color)
        {

            Object O = new Object();
            lock (O)
            {
                //var parallelOptions = new ParallelOptions();
                //parallelOptionsMaxDegreeOfParallelism =System.Threading.PlatformHelper.ProcessorCount; //PlatformHelper.ProcessorCount;

                int HA = 0;
                if (!Quantum)
                    HA = CalculateMoveMentHueuristicUserRefrigitzDLL(Kind, CloneATable(Table), Order, Row, Column, RowSource, ColumnS, color);
                else
                    HA = CalculateMoveMentHueuristicUserQuantum(Kind, CloneATable(Table), Order, Row, Column, RowSource, ColumnS, color);
                return HA;
            }
        }
        int CalculateMoveMentHueuristicUserQuantum(int Kind, int[,] Table, int Order, int Row, int Column, int RowSource, int ColumnS, Color color)
        {

            Object O = new Object();
            lock (O)
            {
                QuantumRefrigiz.ThinkingQuantumChess th1 = null;
                th1 = new QuantumRefrigiz.ThinkingQuantumChess(-1, Kind, 0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, Row, Column, color, CloneATable(Table), 0, Order, false, 0, 0, Table[Row, Column]);
                int HeuristicActionAttackAndSupportAndMoveSelfOrEnemyValue = new int();
                int HeuristicReducedMovementValue = new int();
                int HeuristicSelfSupportedValue = new int();
                int HeuristicHittingValue = new int();
                int HeuristicReducedAttackValue = new int();
                int HeuristicDistributionValue = new int();
                int HeuristicKingSafe = new int();
                int HeuristicFromCenter = new int();
                int HeuristicKingDangour = new int(); int HeuristicCheckedMate = new int();
                int[] Lose = { 0, 0, 0 };
                th1.CalculateHeuristics(Lose, 0, true, Order, 0, CloneATable(Table), Row, Column, RowSource, ColumnS, color, ref HeuristicActionAttackAndSupportAndMoveSelfOrEnemyValue, ref HeuristicReducedMovementValue, ref HeuristicSelfSupportedValue, ref HeuristicReducedMovementValue, ref HeuristicHittingValue, ref HeuristicReducedAttackValue, ref HeuristicDistributionValue, ref HeuristicKingSafe, ref HeuristicFromCenter, ref HeuristicKingDangour, ref HeuristicCheckedMate);


                return HeuristicActionAttackAndSupportAndMoveSelfOrEnemyValue + HeuristicReducedMovementValue +
              HeuristicSelfSupportedValue +

              HeuristicReducedMovementValue + HeuristicReducedAttackValue + HeuristicHittingValue + HeuristicDistributionValue + HeuristicKingSafe + HeuristicFromCenter + HeuristicKingDangour;
            }
        }
        int CalculateMoveMentHueuristicUserRefrigitzDLL(int Kind, int[,] Table, int Order, int Row, int Column, int RowSource, int ColumnS, Color color)
        {

            Object O = new Object();
            lock (O)
            {
                RefrigtzDLL.ThinkingChess th1 = null;
                th1 = new RefrigtzDLL.ThinkingChess(-1, Kind, 0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, Row, Column, color, CloneATable(Table), 0, Order, false, 0, 0, Table[Row, Column]);
                int HeuristicActionAttackAndSupportAndMoveSelfOrEnemyValue = new int();
                int HeuristicReducedMovementValue = new int();
                int HeuristicSelfSupportedValue = new int();
                int HeuristicHittingValue = new int();
                int HeuristicReducedAttackValue = new int();
                int HeuristicDistributionValue = new int();
                int HeuristicKingSafe = new int();
                int HeuristicFromCenter = new int();
                int HeuristicKingDangour = new int(); int HeuristicCheckedMate = new int();
                int[] Lose = { 0, 0, 0 };
                th1.CalculateHeuristics(Lose, 0, true, Order, 0, CloneATable(Table), Row, Column, RowSource, ColumnS, color, ref HeuristicActionAttackAndSupportAndMoveSelfOrEnemyValue, ref HeuristicReducedMovementValue, ref HeuristicSelfSupportedValue, ref HeuristicReducedMovementValue, ref HeuristicHittingValue, ref HeuristicReducedAttackValue, ref HeuristicDistributionValue, ref HeuristicKingSafe, ref HeuristicFromCenter, ref HeuristicKingDangour, ref HeuristicCheckedMate);

                return HeuristicActionAttackAndSupportAndMoveSelfOrEnemyValue + HeuristicReducedMovementValue +
              HeuristicSelfSupportedValue +

              HeuristicReducedMovementValue + HeuristicReducedAttackValue + HeuristicHittingValue + HeuristicDistributionValue + HeuristicKingSafe + HeuristicFromCenter + HeuristicKingDangour + HeuristicCheckedMate;
            }
        }
        bool CheckMovment(int[,] Table, int i, int j, int ii, int jj, int Order)
        {
            Object O = new Object();
            lock (O)
            {
                bool Check = false;
                int[,] Tab = new int[8, 8];
                for (int iii = 0; iii < 8; iii++)
                {
                    for (int jjj = 0; jjj < 8; jjj++)
                    {
                        Tab[iii, jjj] = Table[iii, jjj];
                    }
                }
                Tab[ii, jj] = Tab[i, j];
                Tab[i, j] = 0;
                RefrigtzDLL.ChessRules A = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, Order);
                QuantumRefrigiz.ChessRules AQ = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, Order);


                if (!Quantum)
                {
                    A.Check(CloneATable(Tab), Order);
                    if (Order == 1 && A.CheckGray)
                        Check = true;
                    if (Order == -1 && A.CheckBrown)
                        Check = true;
                }
                else
                {
                    AQ.Check(CloneATable(Tab), Order);
                    if (Order == 1 && AQ.CheckGray)
                        Check = true;
                    if (Order == -1 && AQ.CheckBrown)
                        Check = true;
                }
                return Check;
            }
        }
        //A quantum move cannot be used to take a piece.
        void MovmentneDraw(int Kind)
        {
            Object OOOO = new Object();
            lock (OOOO)
            {
                /*   PictureBoxRefrigtz.Image = (Image)new Bitmap(PictureBoxRefrigtz.Width, PictureBoxRefrigtz.Height);
                   ChessTable = (Image)new Bitmap(PictureBoxRefrigtz.Image.Width, PictureBoxRefrigtz.Image.Height);
                   g = Graphics.FromImage(ChessTable);
                   g.FillRectangle(new SolidBrush(Color.Yellow), new Rectangle(0, 0, PictureBoxRefrigtz.Width, PictureBoxRefrigtz.Height));

                   if (Draw != null && Draw.TableList != null && Draw.TableList.Count > 0)
                       Draw.SetObjectNumbers(Draw.TableList[0]);

                   for (int i = 0; i < PictureBoxRefrigtz.Image.Width; i += PictureBoxRefrigtz.Image.Width / 8)
                       for (int j = 0; j < PictureBoxRefrigtz.Image.Height; j += PictureBoxRefrigtz.Image.Height / 8)
                       {
                           try
                           {
                               if ((i + j) % 2 == 0)
                                   g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\Black.jpg"), new Rectangle(i, j, this.PictureBoxRefrigtz.Width / 8, this.PictureBoxRefrigtz.Height / 8));
                               else
                                   g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\White.jpg"), new Rectangle(i, j, this.PictureBoxRefrigtz.Width / 8, this.PictureBoxRefrigtz.Height / 8));

                           }
                           catch (Exception t)
                           {
                               Log(t);
                           }
                       }*/
                // DrawImageOfMain();
                if (!Quantum)
                {
                    if (Kind == 7)
                    {
                        Draw.KingOnTable[King].Row = RowRealesed;
                        Draw.KingOnTable[King].Column = ColumnRealeased;
                        Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                    }
                    else
                        if (Kind == 1)
                    {
                        Draw.SolderesOnTable[Soldier].Row = (int)RowRealesed;
                        Draw.SolderesOnTable[Soldier].Column = (int)ColumnRealeased;
                        Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);


                    }
                    else
                        if (Kind == 2)
                    {
                        Draw.ElephantOnTable[Elefant].Row = RowRealesed;
                        Draw.ElephantOnTable[Elefant].Column = ColumnRealeased;
                        Draw.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == 3)
                    {
                        Draw.HoursesOnTable[Hourse].Row = RowRealesed;
                        Draw.HoursesOnTable[Hourse].Column = ColumnRealeased;
                        Draw.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == 4)
                    {
                        Draw.CastlesOnTable[Castle].Row = RowRealesed;
                        Draw.CastlesOnTable[Castle].Column = ColumnRealeased;
                        Draw.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == 5)
                    {
                        Draw.MinisterOnTable[Minister].Row = RowRealesed;
                        Draw.MinisterOnTable[Minister].Column = ColumnRealeased;
                        Draw.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == 6)
                    {
                        Draw.KingOnTable[King].Row = RowRealesed;
                        Draw.KingOnTable[King].Column = ColumnRealeased;
                        Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -7)
                    {
                        Draw.KingOnTable[King].Row = RowRealesed;
                        Draw.KingOnTable[King].Column = ColumnRealeased;
                        Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -1)
                    {
                        Draw.SolderesOnTable[Soldier].Row = (int)RowRealesed;
                        Draw.SolderesOnTable[Soldier].Column = (int)ColumnRealeased;
                        Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -2)
                    {
                        Draw.ElephantOnTable[Elefant].Row = RowRealesed;
                        Draw.ElephantOnTable[Elefant].Column = ColumnRealeased;
                        Draw.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -3)
                    {
                        Draw.HoursesOnTable[Hourse].Row = RowRealesed;
                        Draw.HoursesOnTable[Hourse].Column = ColumnRealeased;
                        Draw.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -4)
                    {
                        Draw.CastlesOnTable[Castle].Row = RowRealesed;
                        Draw.CastlesOnTable[Castle].Column = ColumnRealeased;
                        Draw.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -5)
                    {
                        Draw.MinisterOnTable[Minister].Row = RowRealesed;
                        Draw.MinisterOnTable[Minister].Column = ColumnRealeased;
                        Draw.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -6)
                    {
                        Draw.KingOnTable[King].Row = RowRealesed;
                        Draw.KingOnTable[King].Column = ColumnRealeased;
                        Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                }
                else
                {
                    if (Kind == 7)
                    {
                        DrawQ.KingOnTable[King].Row = RowRealesed;
                        DrawQ.KingOnTable[King].Column = ColumnRealeased;
                        DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                    }
                    else
                        if (Kind == 1)
                    {
                        DrawQ.SolderesOnTable[Soldier].Row = (int)RowRealesed;
                        DrawQ.SolderesOnTable[Soldier].Column = (int)ColumnRealeased;
                        DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);


                    }
                    else
                        if (Kind == 2)
                    {
                        DrawQ.ElephantOnTable[Elefant].Row = RowRealesed;
                        DrawQ.ElephantOnTable[Elefant].Column = ColumnRealeased;
                        DrawQ.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == 3)
                    {
                        DrawQ.HoursesOnTable[Hourse].Row = RowRealesed;
                        DrawQ.HoursesOnTable[Hourse].Column = ColumnRealeased;
                        DrawQ.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == 4)
                    {
                        DrawQ.CastlesOnTable[Castle].Row = RowRealesed;
                        DrawQ.CastlesOnTable[Castle].Column = ColumnRealeased;
                        DrawQ.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == 5)
                    {
                        DrawQ.MinisterOnTable[Minister].Row = RowRealesed;
                        DrawQ.MinisterOnTable[Minister].Column = ColumnRealeased;
                        DrawQ.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == 6)
                    {
                        DrawQ.KingOnTable[King].Row = RowRealesed;
                        DrawQ.KingOnTable[King].Column = ColumnRealeased;
                        DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -7)
                    {
                        DrawQ.KingOnTable[King].Row = RowRealesed;
                        DrawQ.KingOnTable[King].Column = ColumnRealeased;
                        DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -1)
                    {
                        DrawQ.SolderesOnTable[Soldier].Row = (int)RowRealesed;
                        DrawQ.SolderesOnTable[Soldier].Column = (int)ColumnRealeased;
                        DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -2)
                    {
                        DrawQ.ElephantOnTable[Elefant].Row = RowRealesed;
                        DrawQ.ElephantOnTable[Elefant].Column = ColumnRealeased;
                        DrawQ.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -3)
                    {
                        DrawQ.HoursesOnTable[Hourse].Row = RowRealesed;
                        DrawQ.HoursesOnTable[Hourse].Column = ColumnRealeased;
                        DrawQ.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -4)
                    {
                        DrawQ.CastlesOnTable[Castle].Row = RowRealesed;
                        DrawQ.CastlesOnTable[Castle].Column = ColumnRealeased;
                        DrawQ.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -5)
                    {
                        DrawQ.MinisterOnTable[Minister].Row = RowRealesed;
                        DrawQ.MinisterOnTable[Minister].Column = ColumnRealeased;
                        DrawQ.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                    else if (Kind == -6)
                    {
                        DrawQ.KingOnTable[King].Row = RowRealesed;
                        DrawQ.KingOnTable[King].Column = ColumnRealeased;
                        DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    }
                }/*
                PictureBoxRefrigtz.Image = ChessTable;
                g.Dispose();
                g = null;
                SetPrictureBoxRefregitzInvalidate(PictureBoxRefrigtz);
                SetPrictureBoxRefregitzUpdate(PictureBoxRefrigtz);
                return;*/
            }
        }
        void MovmentsCastleKing(int Kind)
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    if (Kind == 7)
                    {
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(Kind, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnRealeased;
                        CurrentKind = 7;
                        Draw.KingOnTable[King] = new RefrigtzDLL.DrawKing(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;

                        Table[(int)RowRealesed, (int)ColumnRealeased] = 6;


                    }
                    else if (Kind == -7)
                    {
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(Kind, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnRealeased;
                        CurrentKind = -7;
                        Draw.KingOnTable[King] = new RefrigtzDLL.DrawKing(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;

                        Table[(int)RowRealesed, (int)ColumnRealeased] = -6;
                    }
                }
                else
                {
                    if (Kind == 7)
                    {
                        QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(Kind, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnRealeased;
                        CurrentKind = 7;
                        DrawQ.KingOnTable[King] = new QuantumRefrigiz.DrawKingQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;

                        Table[(int)RowRealesed, (int)ColumnRealeased] = 6;


                    }
                    else if (Kind == -7)
                    {
                        QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(Kind, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnRealeased;
                        CurrentKind = -7;
                        DrawQ.KingOnTable[King] = new QuantumRefrigiz.DrawKingQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;

                        Table[(int)RowRealesed, (int)ColumnRealeased] = -6;
                    }
                }
            }
        }
        void SetSyntax()
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    if (RefrigtzDLL.AllDraw.TableListAction.Count > 1)
                    {
                        RefrigtzDLL.ChessGeneticAlgorithm R = new RefrigtzDLL.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        if (R.FindGenToModified(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2], RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1], RefrigtzDLL.AllDraw.TableListAction, 0, OrderPlate, true))
                        {
                            bool HitVal = false;
                            int Hit = 0;
                            if (R.Hit)
                                Hit = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                            if (Hit != 0)
                                HitVal = true;
                            bool Convert = false;
                            if (OrderPlate == 1)
                            {
                                if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                {
                                    if (R.CromosomColumn == 7)
                                        Convert = true;
                                }
                                if ((RefrigtzDLL.ChessRules.SmallKingCastleGray || RefrigtzDLL.ChessRules.BigKingCastleGray) && (!RefrigtzDLL.ChessRules.CastleActGray))
                                    RefrigtzDLL.ChessRules.CastleActGray = true;
                                RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActGray, Convert);
                            }
                            else
                            {
                                if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                {
                                    if (R.CromosomColumn == 0)
                                        Convert = true;
                                }
                                if ((RefrigtzDLL.ChessRules.SmallKingCastleBrown || RefrigtzDLL.ChessRules.BigKingCastleBrown) && (!RefrigtzDLL.ChessRules.CastleActBrown))
                                    RefrigtzDLL.ChessRules.CastleActBrown = true;

                                RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActBrown, Convert);
                            }
                            SetBoxStatistic(RefrigtzDLL.AllDraw.SyntaxToWrite);
                            RefreshBoxStatistic();
                        }
                    }
                }
                else
                {
                    if (QuantumRefrigiz.AllDraw.TableListAction.Count > 1)
                    {
                        QuantumRefrigiz.ChessGeneticAlgorithm R = new QuantumRefrigiz.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        if (R.FindGenToModified(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2], QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1], QuantumRefrigiz.AllDraw.TableListAction, 0, OrderPlate, true))
                        {
                            bool HitVal = false;
                            int Hit = 0;
                            if (R.Hit)
                                Hit = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                            if (Hit != 0)
                                HitVal = true;
                            bool Convert = false;
                            if (OrderPlate == 1)
                            {
                                if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                {
                                    if (R.CromosomColumn == 7)
                                        Convert = true;
                                }
                                if ((QuantumRefrigiz.ChessRules.SmallKingCastleGray || QuantumRefrigiz.ChessRules.BigKingCastleGray) && (!QuantumRefrigiz.ChessRules.CastleActGray))
                                    QuantumRefrigiz.ChessRules.CastleActGray = true;
                                QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActGray, Convert);
                            }
                            else
                            {
                                if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                {
                                    if (R.CromosomColumn == 0)
                                        Convert = true;
                                }
                                if ((QuantumRefrigiz.ChessRules.SmallKingCastleBrown || QuantumRefrigiz.ChessRules.BigKingCastleBrown) && (!QuantumRefrigiz.ChessRules.CastleActBrown))
                                    QuantumRefrigiz.ChessRules.CastleActBrown = true;

                                QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActBrown, Convert);
                            }
                            SetBoxStatistic(QuantumRefrigiz.AllDraw.SyntaxToWrite);
                            RefreshBoxStatistic();
                        }
                    }
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovementCastleKingGray(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            object O = new object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 7, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 7))
                {
                    if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                        return;

                    MovmentsCastleKing(7);

                    int Castles = -1;

                    if (!ArrangmentsChanged)
                    {
                        if (RowClickP < RowRealesed)
                        {
                            Table[(int)RowRealesed - 1, (int)ColumnRealeased] = 4;
                            Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 0;
                            for (int i = 0; i < Draw.CastleHigh; i++)
                            {
                                if (Draw.CastlesOnTable[i].Row == RowClickP + 3 && Draw.CastlesOnTable[i].Column == ColumnClick && ColumnClick == 0)
                                {
                                    Draw.CastlesOnTable[i] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed + 1, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                                    Castles = i;
                                    return;
                                }
                            }
                            if (Castles != -1)
                            {
                                Draw.CastlesOnTable[Castles].Row = RowClickP + 3;
                                Draw.CastlesOnTable[Castles].Column = ColumnClickP;
                            }


                        }
                        else
                        {
                            Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 4;
                            Table[(int)RowRealesed - 2, (int)ColumnRealeased] = 0;
                            for (int i = 0; i < Draw.CastleHigh; i++)
                            {
                                if (Draw.CastlesOnTable[i].Row == RowClickP - 4 && Draw.CastlesOnTable[i].Column == ColumnClickP & ColumnClick == 0)
                                {
                                    Draw.CastlesOnTable[i] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed - 1, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                                    Castles = i;
                                    return;

                                }

                            }
                            if (Castles != -1)
                            {
                                Draw.CastlesOnTable[Castles].Row = RowClickP - 4;
                                Draw.CastlesOnTable[Castles].Column = ColumnClickP;
                            }

                        }
                    }
                    else
                    {
                        if (RowClickP < RowRealesed)
                        {
                            Table[(int)RowRealesed - 1, (int)ColumnRealeased] = 4;
                            Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 0;
                            for (int i = 0; i < Draw.CastleHigh; i++)
                            {
                                if (Draw.CastlesOnTable[i].Row == RowClickP + 3 && Draw.CastlesOnTable[i].Column == ColumnClick && ColumnClick == 7)
                                {
                                    Draw.CastlesOnTable[i] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed + 1, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                                    Castles = i;

                                    return;

                                }

                            }
                            if (Castles != -1)
                            {
                                Draw.CastlesOnTable[Castles].Row = RowClickP + 3;
                                Draw.CastlesOnTable[Castles].Column = ColumnClickP;
                            }


                        }
                        else
                        {
                            Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 4;
                            Table[(int)RowRealesed - 2, (int)ColumnRealeased] = 0;
                            for (int i = 0; i < Draw.CastleHigh; i++)
                            {
                                if (Draw.CastlesOnTable[i].Row == RowClickP - 4 && Draw.CastlesOnTable[i].Column == ColumnClickP && ColumnClick == 7)
                                {
                                    Draw.CastlesOnTable[i] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed - 1, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                                    Castles = i;
                                    return;

                                }

                            }
                            if (Castles != -1)
                            {
                                Draw.CastlesOnTable[Castles].Row = RowClickP - 4;
                                Draw.CastlesOnTable[Castles].Column = ColumnClickP;
                            }

                        }
                    }
                    AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                    if (AA.Check(CloneATable(Table), OrderPlate))
                    {
                        if (AA.CheckGray && OrderPlate == 1)
                        {
                            // Table = TabStor;
                            return;
                        }

                        else
                            if (AA.CheckBrown && OrderPlate == -1)
                        {
                            Table = CloneATable(TabStor);
                            //  return;
                        }
                    }
                    Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Draw.CastlesOnTable[Castles].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);



                    Person = false;
                    int[,] TableCon = new int[8, 8];
                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            TableCon[i, j] = Table[i, j];
                        }
                    }


                    //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                    if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                    {
                        RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                        RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                        RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                        RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                    }
                    InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);


                    SetAndConfirmSyntax();

                    Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                    Draw.TableList.Clear();
                    Draw.TableList.Add(CloneATable(Table));
                    Draw.SetRowColumn(0);



                    OrderPlate = OrderPlate * -1;
                    RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                    GrayTimer.StopTime();
                    BrownTimer.StartTime("BrownTimer");
                    InsertTableAtDatabase(Table);
                    Clicked = false; BobSection = false;
                    RefrigtzDLL.ChessRules.CastleActGray = true;



                    //TakeRoot.CalculateRootGray(Draw);

                }
                else
                    Do = false;

                /*      else
                      {
                          if (!ArrangmentsChanged)
                          {
                              if (ColumnClickP == 0)
                                  Table[(int)RowClickP, (int)ColumnClickP] = 6;
                              else
                                  if (ColumnClickP == 7)
                                  Table[(int)RowClickP, (int)ColumnClickP] = -6;
                          }
                          else
                          {
                              if (ColumnClickP == 7)
                                  Table[(int)RowClickP, (int)ColumnClickP] = 6;
                              else
                                  if (ColumnClickP == 0)
                                  Table[(int)RowClickP, (int)ColumnClickP] = -6;
                          }
                          Draw.KingOnTable[King] = new RefrigtzDLL.DrawKing(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                          Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                          Clicked = false; BobSection = false;
                      }*/

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovementSoldierGray(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 1))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                        RefrigtzDLL.ThingsConverter.ActOfClickEqualTow = true;
                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnRealeased;
                        CurrentKind = 1;
                        ConvertWait = true;
                        Draw.SolderesOnTable[Soldier].ConvertOperation((int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);

                        var array = Task.Factory.StartNew(() => WaitConvertion()); array.Wait(); array.Dispose();
                        int[,] TableCon = new int[8, 8];

                        if (Draw.SolderesOnTable[Soldier].Convert)
                        {

                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            /*   if (Draw.SolderesOnTable[Soldier].ConvertedToMinister)
                                  Table[(int)RowRealesed, (int)ColumnRealeased] = 5;
                              else if (Draw.SolderesOnTable[Soldier].ConvertedToCastle)
                                  Table[(int)RowRealesed, (int)ColumnRealeased] = 4;
                              else if (Draw.SolderesOnTable[Soldier].ConvertedToHourse)
                                  Table[(int)RowRealesed, (int)ColumnRealeased] = 3;
                              else if (Draw.SolderesOnTable[Soldier].ConvertedToElefant)
                                  Table[(int)RowRealesed, (int)ColumnRealeased] = 2;

                             */
                            Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                            RefrigtzDLL.ThingsConverter.ClickOcurred = false;
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                            Draw.TableList.Clear();
                            Draw.TableList.Add(CloneATable(Table));
                            Draw.SetRowColumn(0);




                        }
                        else
                        {
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];


                            Draw.SolderesOnTable[Soldier] = new RefrigtzDLL.DrawSoldier(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = 1;
                            Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }

                        }
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                // Table = TabStor;
                                //return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                // Table = TabStor;
                                //return;
                            }
                        }
                        Person = false;
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                Table[i, j] = TableCon[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table);
                        RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                        SetAndConfirmSyntax();


                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);



                        OrderPlate = OrderPlate * -1;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Soldier, 1);
                        Clicked = false; BobSection = false;
                        return;
                    }
                }

                else
                {

                    Draw.SolderesOnTable[Soldier] = new RefrigtzDLL.DrawSoldier(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);
                    Table[(int)RowClickP, (int)ColumnClickP] = 1;
                    Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovementElephantGray(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 2, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 2))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];

                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = 2;
                        Draw.ElephantOnTable[Elefant] = new RefrigtzDLL.DrawElefant(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Elefant);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = 2;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                //Table = TabStor;
                                return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                //Table = TabStor;
                                return;
                            }
                        }
                        Draw.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        Person = false;
                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);

                        OrderPlate = OrderPlate * -1;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Elefant, 2);
                        Clicked = false; BobSection = false;
                        return;
                    }
                }

                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = 2;
                    Draw.ElephantOnTable[Elefant] = new RefrigtzDLL.DrawElefant(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Elefant);
                    Draw.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentHourseGray(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 3, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 3))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];


                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = 3;
                        Draw.HoursesOnTable[Hourse] = new RefrigtzDLL.DrawHourse(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Hourse);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = 3;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                // Table = TabStor;
                                //return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                // Table = TabStor;
                                //return;
                            }
                        }
                        Draw.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);
                        OrderPlate = OrderPlate * -1;

                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Hourse, 3);
                        Clicked = false; BobSection = false;
                        return;
                    }
                }

                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = 3;
                    Draw.HoursesOnTable[Hourse] = new RefrigtzDLL.DrawHourse(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Hourse);
                    Draw.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;

                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentCastleGray(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 4, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 4))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];


                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = 4;
                        Draw.CastlesOnTable[Castle] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Castle);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = 4;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                // Table = TabStor;
                                //return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                //Table = TabStor;
                                //return;
                            }
                        }
                        Draw.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);
                        OrderPlate = OrderPlate * -1;

                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Castle, 4);
                        Clicked = false; BobSection = false;
                        return;
                    }

                }

                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = 4;
                    Draw.CastlesOnTable[Castle] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Castle);
                    Draw.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentMinisterGray(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object o = new Object();
            lock (o)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 5, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 5))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];

                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = 5;
                        Draw.MinisterOnTable[Minister] = new RefrigtzDLL.DrawMinister(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Minister);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = 5;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                //Table = TabStor;
                                //return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                //Table = TabStor;
                                //return;
                            }
                        }
                        Draw.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }

                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);
                        OrderPlate = OrderPlate * -1;

                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Minister, 5);
                        Clicked = false; BobSection = false;
                        return;
                    }

                }

                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = 5;
                    Draw.MinisterOnTable[Minister] = new RefrigtzDLL.DrawMinister(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Minister);
                    Draw.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentKingGray(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 6, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 6))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];

                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = 6;
                        Draw.KingOnTable[King] = new RefrigtzDLL.DrawKing(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = 6;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                //Table = TabStor;
                                //return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                //Table = TabStor;
                                //return;
                            }
                        }
                        Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);
                        OrderPlate = OrderPlate * -1;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, King, 6);
                        Clicked = false; BobSection = false;
                        return;
                    }

                }


                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = 6;
                    Draw.KingOnTable[King] = new RefrigtzDLL.DrawKing(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                    Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentCastleKingBrown(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -7, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -7))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                            return;

                        MovmentsCastleKing(-7);

                        int Castles = -1;
                        if (!ArrangmentsChanged)
                        {
                            if (RowClickP < RowRealesed)
                            {
                                Table[(int)RowRealesed - 1, (int)ColumnRealeased] = -4;
                                Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 0;
                                for (int i = 0; i < Draw.CastleHigh; i++)
                                {
                                    if (Draw.CastlesOnTable[i].Row == RowClickP + 3 && Draw.CastlesOnTable[i].Column == ColumnClick && ColumnClick == 7)
                                    {
                                        Draw.CastlesOnTable[i] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed + 1, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                                        Castles = i;

                                        return;

                                    }

                                }
                                if (Castles != -1)
                                {
                                    Draw.CastlesOnTable[Castles].Row = RowClickP + 3;
                                    Draw.CastlesOnTable[Castles].Column = ColumnClickP;
                                }


                            }
                            else
                            {
                                Table[(int)RowRealesed + 1, (int)ColumnRealeased] = -4;
                                Table[(int)RowRealesed - 2, (int)ColumnRealeased] = 0;
                                for (int i = 0; i < Draw.CastleHigh; i++)
                                {
                                    if (Draw.CastlesOnTable[i].Row == RowClickP - 4 && Draw.CastlesOnTable[i].Column == ColumnClickP & ColumnClick == 0)
                                    {
                                        Draw.CastlesOnTable[i] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed - 1, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                                        Castles = i;
                                        return;

                                    }

                                }
                                if (Castles != -1)
                                {
                                    Draw.CastlesOnTable[Castles].Row = RowClickP - 4;
                                    Draw.CastlesOnTable[Castles].Column = ColumnClickP;
                                }

                            }
                        }
                        else
                        {
                            if (RowClickP < RowRealesed)
                            {
                                Table[(int)RowRealesed - 1, (int)ColumnRealeased] = -4;
                                Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 0;
                                for (int i = 0; i < Draw.CastleHigh; i++)
                                {
                                    if (Draw.CastlesOnTable[i].Row == RowClickP + 3 && Draw.CastlesOnTable[i].Column == ColumnClick && ColumnClick == 7)
                                    {
                                        Draw.CastlesOnTable[i] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed + 1, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                                        Castles = i;
                                        return;

                                    }

                                }
                                if (Castles != -1)
                                {
                                    Draw.CastlesOnTable[Castles].Row = RowClickP + 3;
                                    Draw.CastlesOnTable[Castles].Column = ColumnClickP;
                                }


                            }
                            else
                            {
                                Table[(int)RowRealesed + 1, (int)ColumnRealeased] = -4;
                                Table[(int)RowRealesed - 2, (int)ColumnRealeased] = 0;
                                for (int i = 0; i < Draw.CastleHigh; i++)
                                {
                                    if (Draw.CastlesOnTable[i].Row == RowClickP - 4 && Draw.CastlesOnTable[i].Column == ColumnClickP && ColumnClick == 7)
                                    {
                                        Draw.CastlesOnTable[i] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed - 1, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                                        Castles = i;
                                        return;

                                    }

                                }
                                if (Castles != -1)
                                {
                                    Draw.CastlesOnTable[Castles].Row = RowClickP - 4;
                                    Draw.CastlesOnTable[Castles].Column = ColumnClickP;
                                }

                            }
                        }
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                //Table = TabStor;
                                //return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                //Table = TabStor;
                                //return;
                            }
                        }
                        Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Draw.CastlesOnTable[Castles].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);



                        Person = false;
                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);

                        Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        Draw.TableList.Clear();
                        Draw.TableList.Add(CloneATable(Table));
                        Draw.SetRowColumn(0);




                        OrderPlate = OrderPlate * -1;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");
                        InsertTableAtDatabase(Table);
                        Clicked = false; BobSection = false;
                        //RefrigtzDLL.ChessRules.CastleActBrown = true;
                        //TakeRoot.CalculateRootGray(Draw);
                        return;
                    }

                }

                else
                {
                    if (!ArrangmentsChanged)
                    {
                        if (ColumnClickP == 0)
                            Table[(int)RowClickP, (int)ColumnClickP] = 6;
                        else
                            if (ColumnClickP == 7)
                            Table[(int)RowClickP, (int)ColumnClickP] = -6;
                    }
                    else
                    {
                        if (ColumnClickP == 7)
                            Table[(int)RowClickP, (int)ColumnClickP] = 6;
                        else
                            if (ColumnClickP == 0)
                            Table[(int)RowClickP, (int)ColumnClickP] = -6;
                    }
                    Draw.KingOnTable[King] = new RefrigtzDLL.DrawKing(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                    Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentSoldierBrown(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -1))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                        RefrigtzDLL.ThingsConverter.ActOfClickEqualTow = true;
                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = -1;
                        ConvertWait = true;
                        Draw.SolderesOnTable[Soldier].ConvertOperation((int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);

                        var array = Task.Factory.StartNew(() => WaitConvertion()); array.Wait(); array.Dispose();
                        int[,] TableCon = new int[8, 8];
                        if (Draw.SolderesOnTable[Soldier].Convert)
                        {

                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            /* if (Draw.SolderesOnTable[Soldier].ConvertedToMinister)
                                 Table[(int)RowRealesed, (int)ColumnRealeased] = -5;
                             else if (Draw.SolderesOnTable[Soldier].ConvertedToCastle)
                                 Table[(int)RowRealesed, (int)ColumnRealeased] = -4;
                             else if (Draw.SolderesOnTable[Soldier].ConvertedToHourse)
                                 Table[(int)RowRealesed, (int)ColumnRealeased] = -3;
                             else if (Draw.SolderesOnTable[Soldier].ConvertedToElefant)
                                 Table[(int)RowRealesed, (int)ColumnRealeased] = -2;
                             */
                            Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                            RefrigtzDLL.ThingsConverter.ClickOcurred = false;
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                            Draw.TableList.Clear();
                            Draw.TableList.Add(CloneATable(Table));
                            Draw.SetRowColumn(0);



                        }
                        else
                        {
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];



                            Draw.SolderesOnTable[Soldier] = new RefrigtzDLL.DrawSoldier(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Soldier);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = -1;
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                        }
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                //Table = TabStor;
                                //return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                /// Table = TabStor;
                                return;
                            }
                        }
                        Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                Table[i, j] = TableCon[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);

                        OrderPlate = OrderPlate * -1;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        BrownTimer.StopTime();
                        GrayTimer.StartTime("GrayTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Soldier, -1);
                        Clicked = false; BobSection = false;
                        return;
                    }
                }

                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = -1;
                    Draw.SolderesOnTable[Soldier] = new RefrigtzDLL.DrawSoldier(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Soldier);
                    Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }

        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovementElephantBrown(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -2, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -2))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];


                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = -2;
                        Draw.ElephantOnTable[Elefant] = new RefrigtzDLL.DrawElefant(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Elefant);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = -2;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                //Table = TabStor;
                                //return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                //Table = TabStor;
                                //return;
                            }
                        }
                        Draw.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);
                        OrderPlate = OrderPlate * -1;

                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        BrownTimer.StopTime();
                        GrayTimer.StartTime("GrayTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Elefant, -2);
                        Clicked = false; BobSection = false;
                        return;
                    }

                }

                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = -2;
                    Draw.ElephantOnTable[Elefant] = new RefrigtzDLL.DrawElefant(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Elefant);
                    Draw.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentHourseBrown(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -3, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -3))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];


                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = -3;
                        Draw.HoursesOnTable[Hourse] = new RefrigtzDLL.DrawHourse(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Hourse);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = -3;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                //Table = TabStor;
                                ///return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                // Table = TabStor;
                                return;
                            }
                        }
                        Draw.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);

                        OrderPlate = OrderPlate * -1;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        BrownTimer.StopTime();
                        GrayTimer.StartTime("GrayTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Hourse, -3);
                        Clicked = false; BobSection = false;
                        return;
                    }
                }

                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = -3;
                    Draw.HoursesOnTable[Hourse] = new RefrigtzDLL.DrawHourse(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Hourse);
                    Draw.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentCastleBrown(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -4, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -4))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];


                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = -4;
                        Draw.CastlesOnTable[Castle] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Castle);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = -4;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                // Table = TabStor;
                                return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                // Table = TabStor;
                                //return;
                            }
                        }
                        Draw.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);

                        OrderPlate = OrderPlate * -1;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        BrownTimer.StopTime();
                        GrayTimer.StartTime("GrayTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Castle, -4);
                        Clicked = false; BobSection = false;
                        return;
                    }

                }

                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = -4;
                    Draw.CastlesOnTable[Castle] = new RefrigtzDLL.DrawCastle(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Castle);
                    Draw.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentMinisterBrown(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -5, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -5))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];


                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = -5;
                        Draw.MinisterOnTable[Minister] = new RefrigtzDLL.DrawMinister(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Minister);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = -5;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                //Table = TabStor;
                                return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                // Table = TabStor;
                                return;
                            }
                        }
                        Draw.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);
                        //TakeRoot.CalculateRootGray(Draw);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);

                        OrderPlate = OrderPlate * -1;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;

                        BrownTimer.StopTime();
                        GrayTimer.StartTime("GrayTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Minister, -5);
                        Clicked = false; BobSection = false;

                        return;
                    }
                }

                else
                {
                    Table[(int)RowClickP, (int)ColumnClickP] = -5;
                    Draw.MinisterOnTable[Minister] = new RefrigtzDLL.DrawMinister(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Minister);

                    Draw.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentKingBrown(RefrigtzDLL.ChessRules AA, ref bool Do)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if ((new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -6, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -6))
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                            return;
                        RefrigtzDLL.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                        int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];


                        LastRow = (int)RowRealesed;
                        LastColumn = (int)ColumnClickP;
                        CurrentKind = -6;
                        Draw.KingOnTable[King] = new RefrigtzDLL.DrawKing(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                        Table[(int)RowRealesed, (int)ColumnRealeased] = -6;
                        AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                        if (AA.Check(CloneATable(Table), OrderPlate))
                        {
                            if (AA.CheckGray && OrderPlate == 1)
                            {
                                Table = CloneATable(TabStor);
                                return;
                            }

                            else
                                if (AA.CheckBrown && OrderPlate == -1)
                            {
                                //Table = TabStor;
                                return;
                            }
                        }
                        Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);


                        int[,] TableCon = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                TableCon[i, j] = Table[i, j];
                            }
                        }
                        //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(TableCon));
                        Person = false;
                        if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                        {
                            RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                            RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                            RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                        }
                        InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                        SetAndConfirmSyntax();

                        FOUND = false;
                        //#pragma warning disable CS0219 // The variable 'THIS' is assigned but its value is never used
                        RefrigtzDLL.AllDraw THIS = null;
                        //#pragma warning restore CS0219 // The variable 'THIS' is assigned but its value is never used

                        //SetDrawFounding(ref FOUND, ref THIS, false);
                        OrderPlate = OrderPlate * -1;

                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;


                        BrownTimer.StopTime();
                        GrayTimer.StartTime("GrayTimer");
                        InsertTableAtDatabase(Table);
                        //SetBoxText("\r\nWait...");
                        //RefreshBoxText();
                        //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, King, -6);
                        Clicked = false; BobSection = false;
                        return;
                    }
                }


                else
                {

                    Table[(int)RowClickP, (int)ColumnClickP] = -6;
                    Draw.KingOnTable[King] = new RefrigtzDLL.DrawKing(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                    Draw.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                    Clicked = false; BobSection = false;
                }
            }
        }
        bool MovementRefrigitzDLL()
        {
            Object O = new Object();
            bool Do = true;
            lock (O)
            {
                if (!RefrigtzDLL.AllDraw.DrawTable)
                    RefrigtzDLL.AllDraw.DrawTable = true;


                RefrigtzDLL.ChessRules AA = null;



                int[,] TabStor = new int[8, 8];
                for (int i = 0; i < 8; i++)
                {
                    for (int j = 0; j < 8; j++)
                    {
                        TabStor[i, j] = Table[i, j];
                    }
                }


                //For Iterative Movewmnt
                // if (SetMovement((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased))
                //  return Do;

                if (RowClickP == -1 && ColumnClickP == -1)
                    return Do;
                try
                {
                    if (((!StateCC && StateCP) || Blitz) && Person)
                    {
                        if (Sec.RadioButtonGrayOrder.Checked)
                        {
                            if (ColumnClickP == ColumnRealeased && System.Math.Abs(RowClickP - RowRealesed) >= 2 && Table[(int)RowClickP, (int)ColumnClickP] == 6 && (RefrigtzDLL.ChessRules.CastleKingAllowedGray))
                            {
                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(7));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovementCastleKingGray(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }
                            }
                            else
                                if (Table[(int)RowClickP, (int)ColumnClickP] == 1)
                            {
                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(1));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {

                                    var array1 = Task.Factory.StartNew(() => MovementSoldierGray(AA, ref Do));
                                    array1.Wait();
                                    Do = false;

                                }
                                //SetRefregitzBicture();

                            }
                            else
                                    if (Table[(int)RowClickP, (int)ColumnClickP] == 2)
                            {
                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(2));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovementElephantGray(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }

                                //SetRefregitzBicture();
                            }
                            else
                                        if (Table[(int)RowClickP, (int)ColumnClickP] == 3)
                            {


                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(3));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentHourseGray(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }
                                //SetRefregitzBicture();

                            }
                            else if (Table[(int)RowClickP, (int)ColumnClickP] == 4)
                            {


                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(4));
                                    array1.Wait();

                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentCastleGray(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }

                                //SetRefregitzBicture();
                            }

                            else
                                if (Table[(int)RowClickP, (int)ColumnClickP] == 5)
                            {


                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(5));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {

                                    var array1 = Task.Factory.StartNew(() => MovmentMinisterGray(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }

                                //SetRefregitzBicture();
                            }
                            else
                                    if (Table[(int)RowClickP, (int)ColumnClickP] == 6)
                            {


                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(6));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentKingGray(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }
                                //SetRefregitzBicture();

                            }
                        }


                        if (Sec.RadioButtonBrownOrder.Checked)
                        {
                            if (ColumnClickP == ColumnRealeased && System.Math.Abs(RowClickP - RowRealesed) >= 2 && Table[(int)RowClickP, (int)ColumnClickP] == -6 && (RefrigtzDLL.ChessRules.CastleKingAllowedBrown))
                            {


                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(-7));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentCastleKingBrown(AA, ref Do));
                                    array1.Wait();
                                    Do = false;

                                    //SetRefregitzBicture();

                                }
                            }
                            else
                                if (Table[(int)RowClickP, (int)ColumnClickP] == -1)
                            {

                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(-1));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentSoldierBrown(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }
                                //SetRefregitzBicture();

                            }
                            else
                                    if (Table[(int)RowClickP, (int)ColumnClickP] == -2)
                            {
                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(-2));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovementElephantBrown(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }
                                //SetRefregitzBicture();


                            }
                            else
                                        if (Table[(int)RowClickP, (int)ColumnClickP] == -3)
                            {

                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(-3));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentHourseBrown(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }

                                //SetRefregitzBicture();
                            }
                            else
                                            if (Table[(int)RowClickP, (int)ColumnClickP] == -4)
                            {


                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(-4));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentCastleBrown(AA, ref Do));
                                    array1.Wait();
                                    Do = false;
                                }

                                //SetRefregitzBicture();
                            }
                            else
                                                if (Table[(int)RowClickP, (int)ColumnClickP] == -5)
                            {


                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(-5));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentMinisterBrown(AA, ref Do));
                                    array1.Wait();

                                }
                                //SetRefregitzBicture();


                            }
                            else
                                                    if (Table[(int)RowClickP, (int)ColumnClickP] == -6)
                            {


                                if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentneDraw(-6));
                                    array1.Wait();
                                }
                                else
                                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                                {
                                    var array1 = Task.Factory.StartNew(() => MovmentKingBrown(AA, ref Do));
                                    array1.Wait();
                                    Do = false;

                                }


                            }

                        }

                    }

                }
                catch (Exception T)
                {
                    Log(T);

                    RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                    //Blitz = true; 
                    //Person = true;
                    //Clicked = true;
                    //StateCC = false;
                    //StateCP = true;
                    return false;
                }
                //if (RefrigtzDLL.AllDraw.MouseClick == 2)
                DrawImageOfMain();

                RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;


            }
            return Do;
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovementCastleKingGrayQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            object O = new object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(7));
                    array.Wait(); array.Dispose();
                }
                else
               if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 7, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 7))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                                return;


                            MovmentsCastleKing(7);




                            int Castles = -1;

                            if (!ArrangmentsChanged)
                            {
                                if (RowClickP < RowRealesed)
                                {
                                    Table[(int)RowRealesed - 1, (int)ColumnRealeased] = 4;
                                    Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 0;
                                    for (int i = 0; i < DrawQ.CastleHigh; i++)
                                    {
                                        if (DrawQ.CastlesOnTable[i].Row == RowClickP + 3 && DrawQ.CastlesOnTable[i].Column == ColumnClick && ColumnClick == 0)
                                        {
                                            DrawQ.CastlesOnTable[i] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed + 1, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                                            Castles = i;
                                            return;
                                        }
                                    }
                                    if (Castles != -1)
                                    {
                                        DrawQ.CastlesOnTable[Castles].Row = RowClickP + 3;
                                        DrawQ.CastlesOnTable[Castles].Column = ColumnClickP;
                                    }


                                }
                                else
                                {
                                    Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 4;
                                    Table[(int)RowRealesed - 2, (int)ColumnRealeased] = 0;
                                    for (int i = 0; i < DrawQ.CastleHigh; i++)
                                    {
                                        if (DrawQ.CastlesOnTable[i].Row == RowClickP - 4 && DrawQ.CastlesOnTable[i].Column == ColumnClickP & ColumnClick == 0)
                                        {
                                            DrawQ.CastlesOnTable[i] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed - 1, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                                            Castles = i;
                                            return;

                                        }

                                    }
                                    if (Castles != -1)
                                    {
                                        DrawQ.CastlesOnTable[Castles].Row = RowClickP - 4;
                                        DrawQ.CastlesOnTable[Castles].Column = ColumnClickP;
                                    }

                                }
                            }
                            else
                            {
                                if (RowClickP < RowRealesed)
                                {
                                    Table[(int)RowRealesed - 1, (int)ColumnRealeased] = 4;
                                    Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 0;
                                    for (int i = 0; i < DrawQ.CastleHigh; i++)
                                    {
                                        if (DrawQ.CastlesOnTable[i].Row == RowClickP + 3 && DrawQ.CastlesOnTable[i].Column == ColumnClick && ColumnClick == 7)
                                        {
                                            DrawQ.CastlesOnTable[i] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed + 1, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                                            Castles = i;

                                            return;

                                        }

                                    }
                                    if (Castles != -1)
                                    {
                                        DrawQ.CastlesOnTable[Castles].Row = RowClickP + 3;
                                        DrawQ.CastlesOnTable[Castles].Column = ColumnClickP;
                                    }


                                }
                                else
                                {
                                    Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 4;
                                    Table[(int)RowRealesed - 2, (int)ColumnRealeased] = 0;
                                    for (int i = 0; i < DrawQ.CastleHigh; i++)
                                    {
                                        if (DrawQ.CastlesOnTable[i].Row == RowClickP - 4 && DrawQ.CastlesOnTable[i].Column == ColumnClickP && ColumnClick == 7)
                                        {
                                            DrawQ.CastlesOnTable[i] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed - 1, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                                            Castles = i;
                                            return;

                                        }

                                    }
                                    if (Castles != -1)
                                    {
                                        DrawQ.CastlesOnTable[Castles].Row = RowClickP - 4;
                                        DrawQ.CastlesOnTable[Castles].Column = ColumnClickP;
                                    }

                                }
                            }
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    // Table = TabStor;
                                    return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    Table = CloneATable(TabStor);
                                    //  return;
                                }
                            }
                            DrawQ.CastlesOnTable[Castle].IsQuntumMove = true;
                            DrawQ.KingOnTable[King].IsQuntumMove = true;
                            DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                            DrawQ.CastlesOnTable[Castles].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);


                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");

                            Person = false;
                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }


                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);


                            SetAndConfirmSyntax();

                            DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                            DrawQ.TableList.Clear();
                            DrawQ.TableList.Add(CloneATable(Table));
                            DrawQ.SetRowColumn(0);



                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                            InsertTableAtDatabase(Table);
                            Clicked = false; BobSection = false;
                            QuantumRefrigiz.ChessRules.CastleActGray = true;
                            return;

                        }  //TakeRoot.CalculateRootGray(DrawQ);

                    }

                    else
                    {
                        if (!ArrangmentsChanged)
                        {
                            if (ColumnClickP == 0)
                                Table[(int)RowClickP, (int)ColumnClickP] = 6;
                            else
                                if (ColumnClickP == 7)
                                Table[(int)RowClickP, (int)ColumnClickP] = -6;
                        }
                        else
                        {
                            if (ColumnClickP == 7)
                                Table[(int)RowClickP, (int)ColumnClickP] = 6;
                            else
                                if (ColumnClickP == 0)
                                Table[(int)RowClickP, (int)ColumnClickP] = -6;
                        }
                        DrawQ.KingOnTable[King] = new QuantumRefrigiz.DrawKingQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                        DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }



                    ////SetRefregitzBicture();
                }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovementSoldierGrayQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(1));
                    array.Wait(); array.Dispose();
                }
                else
                     if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {

                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 1))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                                return;



                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                            QuantumRefrigiz.ThingsConverter.ActOfClickEqualTow = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnRealeased;
                            CurrentKind = 1;
                            ConvertWait = true;
                            DrawQ.SolderesOnTable[Soldier].ConvertOperation((int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);

                            var array = Task.Factory.StartNew(() => WaitConvertion()); array.Wait(); array.Dispose();
                            int[,] TableCon = new int[8, 8];

                            if (DrawQ.SolderesOnTable[Soldier].Convert)
                            {

                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                /*   if (DrawQ.SolderesOnTable[Soldier].ConvertedToMinister)
                                      Table[(int)RowRealesed, (int)ColumnRealeased] = 5;
                                  else if (DrawQ.SolderesOnTable[Soldier].ConvertedToCastle)
                                      Table[(int)RowRealesed, (int)ColumnRealeased] = 4;
                                  else if (DrawQ.SolderesOnTable[Soldier].ConvertedToHourse)
                                      Table[(int)RowRealesed, (int)ColumnRealeased] = 3;
                                  else if (DrawQ.SolderesOnTable[Soldier].ConvertedToElefant)
                                      Table[(int)RowRealesed, (int)ColumnRealeased] = 2;

                                 */
                                DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                QuantumRefrigiz.ThingsConverter.ClickOcurred = false;
                                for (int i = 0; i < 8; i++)
                                {
                                    for (int j = 0; j < 8; j++)
                                    {
                                        TableCon[i, j] = Table[i, j];
                                    }
                                }
                                DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                DrawQ.TableList.Clear();
                                DrawQ.TableList.Add(CloneATable(Table));
                                DrawQ.SetRowColumn(0);




                            }
                            else
                            {
                                int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                                //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                                bool HitVal = false;
                                //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                                if (Hit != 0)
                                    HitVal = true;

                                DrawQ.SolderesOnTable[Soldier] = new QuantumRefrigiz.DrawSoldierQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);
                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                Table[(int)RowRealesed, (int)ColumnRealeased] = 1;
                                DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                for (int i = 0; i < 8; i++)
                                {
                                    for (int j = 0; j < 8; j++)
                                    {
                                        TableCon[i, j] = Table[i, j];
                                    }
                                }

                            }
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    // Table = TabStor;
                                    //return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    // Table = TabStor;
                                    //return;
                                }
                            }
                            Person = false;
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    Table[i, j] = TableCon[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Soldier, 1);
                            Clicked = false; BobSection = false;
                            return;
                        }
                    }

                    else
                    {

                        DrawQ.SolderesOnTable[Soldier] = new QuantumRefrigiz.DrawSoldierQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);
                        Table[(int)RowClickP, (int)ColumnClickP] = 1;
                        DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }


                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovementElephantGrayQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(2));
                    array.Wait(); array.Dispose();
                }
                else
             if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 2, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 2))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                                return;



                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = 2;
                            DrawQ.ElephantOnTable[Elefant] = new QuantumRefrigiz.DrawElefantQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Elefant);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = 2;
                            DrawQ.ElephantOnTable[Elefant].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    //Table = TabStor;
                                    return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    //Table = TabStor;
                                    return;
                                }
                            }
                            DrawQ.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            Person = false;
                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Elefant, 2);
                            Clicked = false; BobSection = false;
                            return;
                        }

                    }
                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = 2;
                        DrawQ.ElephantOnTable[Elefant] = new QuantumRefrigiz.DrawElefantQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Elefant);
                        DrawQ.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }
                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentHourseGrayQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(3));
                    array.Wait(); array.Dispose();
                }
                else
                      if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 3, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 3))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                                return;


                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = 3;
                            DrawQ.HoursesOnTable[Hourse] = new QuantumRefrigiz.DrawHourseQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Hourse);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = 3;
                            DrawQ.HoursesOnTable[Hourse].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    // Table = TabStor;
                                    //return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    // Table = TabStor;
                                    //return;
                                }
                            }
                            DrawQ.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Hourse, 3);
                            Clicked = false; BobSection = false;
                            return;
                        }
                    }
                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = 3;
                        DrawQ.HoursesOnTable[Hourse] = new QuantumRefrigiz.DrawHourseQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Hourse);
                        DrawQ.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;

                    }


                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentCastleGrayQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(4));
                    array.Wait(); array.Dispose();
                }
                else
                           if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 4, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 4))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                                return;



                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = 4;
                            DrawQ.CastlesOnTable[Castle] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Castle);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = 4;
                            DrawQ.CastlesOnTable[Castle].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);

                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    // Table = TabStor;
                                    //return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }
                            }
                            DrawQ.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Castle, 4);
                            Clicked = false; BobSection = false;
                            return;
                        }
                    }
                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = 4;
                        DrawQ.CastlesOnTable[Castle] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Castle);
                        DrawQ.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }
                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentMinisterGrayQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object o = new Object();
            lock (o)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(5));
                    array.Wait(); array.Dispose();
                }
                else
                    if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {

                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 5, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 5))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                                return;


                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = 5;
                            DrawQ.MinisterOnTable[Minister] = new QuantumRefrigiz.DrawMinisterQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Minister);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = 5;
                            DrawQ.MinisterOnTable[Minister].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }
                            }
                            DrawQ.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }

                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;

                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, Minister, 5);
                            Clicked = false; BobSection = false;
                            return;
                        }

                    }
                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = 5;
                        DrawQ.MinisterOnTable[Minister] = new QuantumRefrigiz.DrawMinisterQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, Minister);
                        DrawQ.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }

                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentKingGrayQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(6));
                    array.Wait(); array.Dispose();
                }
                else
                      if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 6, CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, 6))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, 1))
                                return;


                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Gray);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = 6;
                            DrawQ.KingOnTable[King] = new QuantumRefrigiz.DrawKingQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = 6;
                            DrawQ.KingOnTable[King].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }
                            }
                            DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), 1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Gray);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate * -1, King, 6);
                            Clicked = false; BobSection = false;
                            return;
                        }

                    }

                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = 6;
                        DrawQ.KingOnTable[King] = new QuantumRefrigiz.DrawKingQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                        DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }

                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentCastleKingBrownQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(-7));
                    array.Wait(); array.Dispose();
                }
                else
                 if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -7, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -7))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                                return;


                            MovmentsCastleKing(-7);

                            int Castles = -1;
                            if (!ArrangmentsChanged)
                            {
                                if (RowClickP < RowRealesed)
                                {
                                    Table[(int)RowRealesed - 1, (int)ColumnRealeased] = -4;
                                    Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 0;
                                    for (int i = 0; i < DrawQ.CastleHigh; i++)
                                    {
                                        if (DrawQ.CastlesOnTable[i].Row == RowClickP + 3 && DrawQ.CastlesOnTable[i].Column == ColumnClick && ColumnClick == 7)
                                        {
                                            DrawQ.CastlesOnTable[i] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed + 1, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                                            Castles = i;

                                            return;

                                        }

                                    }
                                    if (Castles != -1)
                                    {
                                        DrawQ.CastlesOnTable[Castles].Row = RowClickP + 3;
                                        DrawQ.CastlesOnTable[Castles].Column = ColumnClickP;
                                    }


                                }
                                else
                                {
                                    Table[(int)RowRealesed + 1, (int)ColumnRealeased] = -4;
                                    Table[(int)RowRealesed - 2, (int)ColumnRealeased] = 0;
                                    for (int i = 0; i < DrawQ.CastleHigh; i++)
                                    {
                                        if (DrawQ.CastlesOnTable[i].Row == RowClickP - 4 && DrawQ.CastlesOnTable[i].Column == ColumnClickP & ColumnClick == 0)
                                        {
                                            DrawQ.CastlesOnTable[i] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed - 1, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                                            Castles = i;
                                            return;

                                        }

                                    }
                                    if (Castles != -1)
                                    {
                                        DrawQ.CastlesOnTable[Castles].Row = RowClickP - 4;
                                        DrawQ.CastlesOnTable[Castles].Column = ColumnClickP;
                                    }

                                }
                            }
                            else
                            {
                                if (RowClickP < RowRealesed)
                                {
                                    Table[(int)RowRealesed - 1, (int)ColumnRealeased] = -4;
                                    Table[(int)RowRealesed + 1, (int)ColumnRealeased] = 0;
                                    for (int i = 0; i < DrawQ.CastleHigh; i++)
                                    {
                                        if (DrawQ.CastlesOnTable[i].Row == RowClickP + 3 && DrawQ.CastlesOnTable[i].Column == ColumnClick && ColumnClick == 7)
                                        {
                                            DrawQ.CastlesOnTable[i] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed + 1, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                                            Castles = i;
                                            return;

                                        }

                                    }
                                    if (Castles != -1)
                                    {
                                        DrawQ.CastlesOnTable[Castles].Row = RowClickP + 3;
                                        DrawQ.CastlesOnTable[Castles].Column = ColumnClickP;
                                    }


                                }
                                else
                                {
                                    Table[(int)RowRealesed + 1, (int)ColumnRealeased] = -4;
                                    Table[(int)RowRealesed - 2, (int)ColumnRealeased] = 0;
                                    for (int i = 0; i < DrawQ.CastleHigh; i++)
                                    {
                                        if (DrawQ.CastlesOnTable[i].Row == RowClickP - 4 && DrawQ.CastlesOnTable[i].Column == ColumnClickP && ColumnClick == 7)
                                        {
                                            DrawQ.CastlesOnTable[i] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed - 1, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                                            Castles = i;
                                            return;

                                        }

                                    }
                                    if (Castles != -1)
                                    {
                                        DrawQ.CastlesOnTable[Castles].Row = RowClickP - 4;
                                        DrawQ.CastlesOnTable[Castles].Column = ColumnClickP;
                                    }

                                }
                            }
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }
                            }
                            DrawQ.KingOnTable[King].IsQuntumMove = true;
                            DrawQ.CastlesOnTable[Castle].IsQuntumMove = true;
                            DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                            DrawQ.CastlesOnTable[Castles].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);


                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");

                            Person = false;
                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                            SetAndConfirmSyntax();

                            DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                            DrawQ.TableList.Clear();
                            DrawQ.TableList.Add(CloneATable(Table));
                            DrawQ.SetRowColumn(0);



                            QuantumRefrigiz.AllDraw.DrawTable = false;
                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            GrayTimer.StopTime();
                            BrownTimer.StartTime("BrownTimer");
                            InsertTableAtDatabase(Table);
                            Clicked = false; BobSection = false;
                            //QuantumRefrigiz.ChessRules.CastleActBrown = true;
                            //TakeRoot.CalculateRootGray(DrawQ);
                            return;
                        }
                    }

                    else
                    {
                        if (!ArrangmentsChanged)
                        {
                            if (ColumnClickP == 0)
                                Table[(int)RowClickP, (int)ColumnClickP] = 6;
                            else
                                if (ColumnClickP == 7)
                                Table[(int)RowClickP, (int)ColumnClickP] = -6;
                        }
                        else
                        {
                            if (ColumnClickP == 7)
                                Table[(int)RowClickP, (int)ColumnClickP] = 6;
                            else
                                if (ColumnClickP == 0)
                                Table[(int)RowClickP, (int)ColumnClickP] = -6;
                        }
                        DrawQ.KingOnTable[King] = new QuantumRefrigiz.DrawKingQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                        DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }


                    //SetRefregitzBicture();

                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentSoldierBrownQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(-1));
                    array.Wait(); array.Dispose();
                }
                else
            if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -1))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                                return;


                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                            QuantumRefrigiz.ThingsConverter.ActOfClickEqualTow = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = -1;
                            ConvertWait = true;
                            DrawQ.SolderesOnTable[Soldier].ConvertOperation((int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);

                            var array = Task.Factory.StartNew(() => WaitConvertion()); array.Wait(); array.Dispose();
                            int[,] TableCon = new int[8, 8];
                            if (DrawQ.SolderesOnTable[Soldier].Convert)
                            {

                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                /* if (DrawQ.SolderesOnTable[Soldier].ConvertedToMinister)
                                     Table[(int)RowRealesed, (int)ColumnRealeased] = -5;
                                 else if (DrawQ.SolderesOnTable[Soldier].ConvertedToCastle)
                                     Table[(int)RowRealesed, (int)ColumnRealeased] = -4;
                                 else if (DrawQ.SolderesOnTable[Soldier].ConvertedToHourse)
                                     Table[(int)RowRealesed, (int)ColumnRealeased] = -3;
                                 else if (DrawQ.SolderesOnTable[Soldier].ConvertedToElefant)
                                     Table[(int)RowRealesed, (int)ColumnRealeased] = -2;
                                 */
                                DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                QuantumRefrigiz.ThingsConverter.ClickOcurred = false;
                                for (int i = 0; i < 8; i++)
                                {
                                    for (int j = 0; j < 8; j++)
                                    {
                                        TableCon[i, j] = Table[i, j];
                                    }
                                }
                                DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                DrawQ.TableList.Clear();
                                DrawQ.TableList.Add(CloneATable(Table));
                                DrawQ.SetRowColumn(0);



                            }
                            else
                            {
                                int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                                //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                                bool HitVal = false;
                                //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                                if (Hit != 0)
                                    HitVal = true;

                                DrawQ.SolderesOnTable[Soldier] = new QuantumRefrigiz.DrawSoldierQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Soldier);
                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                Table[(int)RowRealesed, (int)ColumnRealeased] = -1;
                                for (int i = 0; i < 8; i++)
                                {
                                    for (int j = 0; j < 8; j++)
                                    {
                                        TableCon[i, j] = Table[i, j];
                                    }
                                }
                            }
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    /// Table = TabStor;
                                    return;
                                }
                            }
                            DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    Table[i, j] = TableCon[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            BrownTimer.StopTime();
                            GrayTimer.StartTime("GrayTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Soldier, -1);
                            Clicked = false; BobSection = false;
                        }
                    }
                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = -1;
                        DrawQ.SolderesOnTable[Soldier] = new QuantumRefrigiz.DrawSoldierQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Soldier);
                        DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }

                }

            }
        }

        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovementElephantBrownQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(-2));
                    array.Wait(); array.Dispose();
                }
                else
                         if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -2, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -2))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                                return;


                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = -2;
                            DrawQ.ElephantOnTable[Elefant] = new QuantumRefrigiz.DrawElefantQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Elefant);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = -2;
                            DrawQ.ElephantOnTable[Elefant].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    //Table = TabStor;
                                    //return;
                                }
                            }
                            DrawQ.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            BrownTimer.StopTime();
                            GrayTimer.StartTime("GrayTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Elefant, -2);
                            Clicked = false; BobSection = false;
                            return;
                        }
                    }
                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = -2;
                        DrawQ.ElephantOnTable[Elefant] = new QuantumRefrigiz.DrawElefantQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Elefant);
                        DrawQ.ElephantOnTable[Elefant].DrawElefantOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }

                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentHourseBrownQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(-3));
                    array.Wait(); array.Dispose();
                }
                else
                         if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -3, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -3))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                                return;



                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = -3;
                            DrawQ.HoursesOnTable[Hourse] = new QuantumRefrigiz.DrawHourseQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Hourse);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = -3;
                            DrawQ.HoursesOnTable[Hourse].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    //Table = TabStor;
                                    ///return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    // Table = TabStor;
                                    return;
                                }
                            }
                            DrawQ.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            BrownTimer.StopTime();
                            GrayTimer.StartTime("GrayTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Hourse, -3);
                            Clicked = false; BobSection = false;
                            return;
                        }
                    }
                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = -3;
                        DrawQ.HoursesOnTable[Hourse] = new QuantumRefrigiz.DrawHourseQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Hourse);
                        DrawQ.HoursesOnTable[Hourse].DrawHourseOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }

                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentCastleBrownQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(-4));
                    array.Wait(); array.Dispose();
                }
                else
             if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -4, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -4))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                                return;


                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = -4;
                            DrawQ.CastlesOnTable[Castle] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Castle);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = -4;
                            DrawQ.CastlesOnTable[Castle].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    // Table = TabStor;
                                    return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    // Table = TabStor;
                                    //return;
                                }
                            }
                            DrawQ.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            BrownTimer.StopTime();
                            GrayTimer.StartTime("GrayTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Castle, -4);
                            Clicked = false; BobSection = false;
                            return;
                        }
                    }
                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = -4;
                        DrawQ.CastlesOnTable[Castle] = new QuantumRefrigiz.DrawCastleQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Castle);
                        DrawQ.CastlesOnTable[Castle].DrawCastleOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }

                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentMinisterBrownQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(-5));
                    array.Wait(); array.Dispose();
                }
                else
               if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -5, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -5))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                                return;


                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = -5;
                            DrawQ.MinisterOnTable[Minister] = new QuantumRefrigiz.DrawMinisterQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Brown, CloneATable(Table), OrderPlate, false, Minister);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = -5;
                            DrawQ.MinisterOnTable[Minister].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    //Table = TabStor;
                                    return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    // Table = TabStor;
                                    return;
                                }
                            }
                            DrawQ.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);

                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);
                            //TakeRoot.CalculateRootGray(DrawQ);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                            BrownTimer.StopTime();
                            GrayTimer.StartTime("GrayTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, Minister, -5);
                            Clicked = false; BobSection = false;

                            return;
                        }
                    }
                    else
                    {
                        Table[(int)RowClickP, (int)ColumnClickP] = -5;
                        DrawQ.MinisterOnTable[Minister] = new QuantumRefrigiz.DrawMinisterQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, Minister);

                        DrawQ.MinisterOnTable[Minister].DrawMinisterOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }


                }

            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        void MovmentKingBrownQuantum(QuantumRefrigiz.ChessRules AA)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                {
                    var array = Task.Factory.StartNew(() => MovmentneDraw(-6));
                    array.Wait(); array.Dispose();

                }
                else
                 if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                {
                    if ((new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -6, CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP)).Rules((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown, -6))
                    {
                        Object OO = new Object();
                        lock (OO)
                        {
                            if (CheckMovment(CloneATable(Table), (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, -1))
                                return;


                            QuantumRefrigiz.AllDraw.Less = CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased, Color.Brown);
                            int Hit = Table[(int)RowRealesed, (int)ColumnRealeased];
                            //#pragma warning disable CS0219 // The variable 'HitVal' is assigned but its value is never used
                            bool HitVal = false;
                            //#pragma warning restore CS0219 // The variable 'HitVal' is assigned but its value is never used
                            if (Hit != 0)
                                HitVal = true;
                            LastRow = (int)RowRealesed;
                            LastColumn = (int)ColumnClickP;
                            CurrentKind = -6;
                            DrawQ.KingOnTable[King] = new QuantumRefrigiz.DrawKingQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowRealesed, ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, King);
                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                            Table[(int)RowRealesed, (int)ColumnRealeased] = -6;
                            DrawQ.KingOnTable[King].IsQuntumMove = true;
                            AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, 1, CloneATable(Table), OrderPlate, -1, -1);
                            if (AA.Check(CloneATable(Table), OrderPlate))
                            {
                                if (AA.CheckGray && OrderPlate == 1)
                                {
                                    Table = CloneATable(TabStor);
                                    return;
                                }

                                else
                                    if (AA.CheckBrown && OrderPlate == -1)
                                {
                                    //Table = TabStor;
                                    return;
                                }
                            }
                            DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);


                            int[,] TableCon = new int[8, 8];
                            for (int i = 0; i < 8; i++)
                            {
                                for (int j = 0; j < 8; j++)
                                {
                                    TableCon[i, j] = Table[i, j];
                                }
                            }
                            //QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(TableCon));
                            Person = false;
                            if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                            {
                                QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                                QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                                QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);

                            }
                            InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(System.Math.Abs(CurrentKind), CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);

                            SetAndConfirmSyntax();

                            OrderPlate = OrderPlate * -1;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;


                            BrownTimer.StopTime();
                            GrayTimer.StartTime("GrayTimer");
                            InsertTableAtDatabase(Table);
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, King, -6);
                            Clicked = false; BobSection = false;
                            return;
                        }
                    }

                    else
                    {

                        Table[(int)RowClickP, (int)ColumnClickP] = -6;
                        DrawQ.KingOnTable[King] = new QuantumRefrigiz.DrawKingQ(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, RowClickP, ColumnClickP, Color.Brown, CloneATable(Table), OrderPlate, false, King);
                        DrawQ.KingOnTable[King].DrawKingOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                        Clicked = false; BobSection = false;
                    }

                    //SetRefregitzBicture();

                }

            }
        }
        bool MovementQuantum()
        {
            Object O = new Object();
            lock (O)
            {
                if (QuantumRefrigiz.AllDraw.DrawTable)
                    QuantumRefrigiz.AllDraw.DrawTable = true;

                bool Do = true;
                QuantumRefrigiz.ChessRules AA = null;
                //do
                {

                    int[,] TabStor = new int[8, 8];
                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            TabStor[i, j] = Table[i, j];
                        }
                    }
                    //For Iterative Movewmnt
                    //if (SetMovement((int)RowClickP, (int)ColumnClickP, (int)RowRealesed, (int)ColumnRealeased))
                    //return Do;
                    if (RowClickP == -1 && ColumnClickP == -1)
                        return Do;
                    try
                    {
                        if (((!StateCC && StateCP) || Blitz) && Person)
                        {
                            if (Sec.RadioButtonGrayOrder.Checked)
                            {
                                if (ColumnClickP == ColumnRealeased && System.Math.Abs(RowClickP - RowRealesed) >= 2 && Table[(int)RowClickP, (int)ColumnClickP] == 6 && (QuantumRefrigiz.ChessRules.CastleKingAllowedGray))
                                {

                                    var array = Task.Factory.StartNew(() => MovementCastleKingGrayQuantum(AA));
                                    array.Wait(); array.Dispose();
                                    Do = false;
                                }
                                else
                                    if (Table[(int)RowClickP, (int)ColumnClickP] == 1)
                                {
                                    var array = Task.Factory.StartNew(() => MovementSoldierGrayQuantum(AA));
                                    array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();      array.Wait(); array.Dispose();

                                }
                                else
                                        if (Table[(int)RowClickP, (int)ColumnClickP] == 2)
                                {
                                    var array = Task.Factory.StartNew(() => MovementElephantGrayQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();
                                }
                                else
                                            if (Table[(int)RowClickP, (int)ColumnClickP] == 3)
                                {


                                    var array = Task.Factory.StartNew(() => MovmentHourseGrayQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();

                                }
                                else if (Table[(int)RowClickP, (int)ColumnClickP] == 4)
                                {


                                    var array = Task.Factory.StartNew(() => MovmentCastleGrayQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;

                                    //SetRefregitzBicture();
                                }

                                else
                                    if (Table[(int)RowClickP, (int)ColumnClickP] == 5)
                                {

                                    var array = Task.Factory.StartNew(() => MovmentMinisterGrayQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();
                                }
                                else
                                        if (Table[(int)RowClickP, (int)ColumnClickP] == 6)
                                {


                                    var array = Task.Factory.StartNew(() => MovmentKingGrayQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();

                                }
                            }


                            if (Sec.RadioButtonBrownOrder.Checked)
                            {
                                if (ColumnClickP == ColumnRealeased && System.Math.Abs(RowClickP - RowRealesed) >= 2 && Table[(int)RowClickP, (int)ColumnClickP] == -6 && (QuantumRefrigiz.ChessRules.CastleKingAllowedBrown))
                                {


                                    var array = Task.Factory.StartNew(() => MovmentCastleKingBrownQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                }
                                else
                                    if (Table[(int)RowClickP, (int)ColumnClickP] == -1)
                                {

                                    var array = Task.Factory.StartNew(() => MovmentSoldierBrownQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();

                                }
                                else
                                        if (Table[(int)RowClickP, (int)ColumnClickP] == -2)
                                {
                                    var array = Task.Factory.StartNew(() => MovementElephantBrownQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();


                                }
                                else
                                            if (Table[(int)RowClickP, (int)ColumnClickP] == -3)
                                {

                                    var array = Task.Factory.StartNew(() => MovmentHourseBrownQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();
                                }
                                else
                                                if (Table[(int)RowClickP, (int)ColumnClickP] == -4)
                                {


                                    var array = Task.Factory.StartNew(() => MovmentCastleBrownQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();
                                }
                                else
                                                    if (Table[(int)RowClickP, (int)ColumnClickP] == -5)
                                {


                                    var array = Task.Factory.StartNew(() => MovmentMinisterBrownQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;
                                    //SetRefregitzBicture();


                                }
                                else
                                                        if (Table[(int)RowClickP, (int)ColumnClickP] == -6)
                                {


                                    var array = Task.Factory.StartNew(() => MovmentKingBrownQuantum(AA)); array.Wait(); array.Dispose();
                                    Do = false;

                                }

                            }

                        }

                    }
                    catch (Exception T)
                    {
                        Log(T);
                        QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;
                        //Blitz = true; 
                        //Person = true;
                        //Clicked = true;
                        //StateCC = false;
                        //StateCP = true;
                        return false;
                    }
                    QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;


                }
                //while (Do);
                return Do;
            }
        }
        void WaitBackGround(BackgroundWorker t)
        {
            Object O = new Object();
            lock (O)
            {
                do
                {
                } while (t.IsBusy);
            }
        }
        void Movements()
        {
            Object OO = new Object();
            lock (OO)
            {
                if (!Quantum)
                {
                    if (StateCP && MovmentsNumber == 1)
                    {
                        //if (RefrigtzDLL.AllDraw.DrawTable)
                        {
                            if (RefrigtzDLL.AllDraw.MouseClick == 0)
                            {
                                Draw.SetRowColumn(0, true);
                            }
                        }
                    }
                }
                else
                {
                    if (StateCP && MovmentsNumber == 1)
                    {
                        //if (QuantumRefrigiz.AllDraw.DrawTable)
                        {
                            if (QuantumRefrigiz.AllDraw.MouseClick == 0)
                                DrawQ.SetRowColumn(0, true);
                        }
                    }
                }

                AllMove = true;
                Object O = new Object();
                lock (O)
                {
                    TabStor = CloneATable(Table);
                    if (!Quantum)
                    {
                        if (!backgroundWorkerMoveGray.IsBusy)
                        {
                            PersonTmCall = false;
                            Person = true;
                            /* Thread t = new Thread(new ThreadStart(backgroundWorkerMoveGray.RunWorkerAsync));
                             t.Start();
                             t.Join();*/
                            backgroundWorkerMoveGray.RunWorkerAsync();
                            WaitBackGround(backgroundWorkerMoveGray);
                            Person = false;
                            BobSection = false;
                            if (!Quantum)
                                RefrigtzDLL.AllDraw.DrawTable = true;
                            else
                                QuantumRefrigiz.AllDraw.DrawTable = true;
                            SetPrictureBoxRefregitzInvalidate(PictureBoxRefrigtz);
                            SetPrictureBoxRefregitzUpdate(PictureBoxRefrigtz);
                        }

                        if (backgroundWorkerMoveGray.WorkerSupportsCancellation)
                        {
                            backgroundWorkerMoveGray.CancelAsync();
                            PersonTmCall = true;


                        }
                    }
                    else
                    {
                        if (!backgroundWorkerMoveBrown.IsBusy)
                        {
                            PersonTmCall = false;

                            Person = true;
                            /*Thread t = new Thread(new ThreadStart(backgroundWorkerMoveBrown.RunWorkerAsync));
                            t.Start();
                            t.Join();*/
                            backgroundWorkerMoveBrown.RunWorkerAsync();
                            WaitBackGround(backgroundWorkerMoveBrown);
                            Person = false;
                            BobSection = false;
                            if (!Quantum)
                                RefrigtzDLL.AllDraw.DrawTable = true;
                            else
                                QuantumRefrigiz.AllDraw.DrawTable = true;
                            SetPrictureBoxRefregitzInvalidate(PictureBoxRefrigtz);
                            SetPrictureBoxRefregitzUpdate(PictureBoxRefrigtz);
                        }
                        if (backgroundWorkerMoveBrown.WorkerSupportsCancellation)
                        {
                            backgroundWorkerMoveBrown.CancelAsync();
                            PersonTmCall = true;

                        }
                    }
                    //AllMove = false;
                }
            }
        }

        void Wait()
        {
            Object O = new Object();
            lock (O)
            {
                do
                {
                } while (Clicked);
            }
        }
        String Alphabet()
        {
            Object O = new Object();
            lock (O)
            {
                String A = "";
                if (RowRealesed == 0)
                    A = "a";
                else
                    if (RowRealesed == 1)
                    A = "b";
                else
                        if (RowRealesed == 2)
                    A = "c";
                else
                            if (RowRealesed == 3)
                    A = "d";
                else
                                if (RowRealesed == 4)
                    A = "e";
                else
                                    if (RowRealesed == 5)
                    A = "f";
                else
                                        if (RowRealesed == 6)
                    A = "g";
                else
                                            if (RowRealesed == 7)
                    A = "h";
                return A;


            }
        }
        String Number()
        {
            Object O = new Object();
            lock (O)
            {
                String A = "";
                if (ColumnRealeased == 7)
                    A = "0";
                else
                    if (ColumnRealeased == 6)
                    A = "1";
                else
                        if (ColumnRealeased == 5)
                    A = "2";
                else
                            if (ColumnRealeased == 4)
                    A = "3";
                else
                                if (ColumnRealeased == 3)
                    A = "4";
                else
                                    if (ColumnRealeased == 2)
                    A = "5";
                else
                                        if (ColumnRealeased == 1)
                    A = "6";
                else
                                            if (ColumnRealeased == 0)
                    A = "7";
                return A;

            }
        }
        String ListToString(List<char> A)
        {
            Object O = new Object();
            lock (O)
            {
                String B = "";

                for (int i = 0; i < A.Count; i++)
                    B += A[i];
                return B;
            }
        }
        bool Empty(int Row, int Column)
        {
            Object O = new Object();
            lock (O)
            {
                bool S = false;
                if (Table[Row, Column] == 0)
                    S = true;
                else
                    S = false;
                return S;
            }
        }
        int Piece_on(int Row, int Column)
        {
            Object O = new Object();
            lock (O)
            {
                return 6 + Table[Row, Column];
            }
        }
        String Fen()
        {
            Object O = new Object();
            lock (O)
            {
                bool StartPos = false;
                if (RowRealesed == -1 || ColumnRealeased == -1)
                    StartPos = true;

                int EmptyCnt;
                String ss = "";

                for (int r = 0; r <= 7; ++r)
                {
                    for (int f = 0; f <= 7; ++f)
                    {
                        for (EmptyCnt = 0; f <= 7 && Empty(f, r); ++f)
                            ++EmptyCnt;

                        if (EmptyCnt != 0)
                            ss += EmptyCnt;

                        if (f <= 7)
                            ss += PieceToChar[Piece_on(f, r)];
                    }

                    if (r != 7)
                        ss += '/';
                }
                if (!BobSection)
                    ss += " w ";
                else
                    ss += " b ";
                if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                    ss += "K";

                if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                    ss += "Q";

                if (RefrigtzDLL.ChessRules.SmallKingCastleBrown)
                    ss += "k";

                if (RefrigtzDLL.ChessRules.BigKingCastleBrown)
                    ss += "q";

                if (!RefrigtzDLL.ChessRules.CastleKingAllowedGray && !RefrigtzDLL.ChessRules.CastleKingAllowedBrown)
                    ss += '-';
                String S = " - ";

                if (!StartPos)
                {
                    if (!BobSection)
                    {
                        if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 1)
                        {
                            S = " ";
                            S += Alphabet() + ((int)(7 - ColumnRealeased)).ToString();
                            S += " ";
                        }
                    }
                    else
                    {

                        if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 1)
                        {
                            S = " ";
                            S += Alphabet() + ((int)(7 - ColumnRealeased)).ToString();
                            S += " ";
                        }
                    }
                }
                else
                {
                    S = " ";
                    S += "-";
                    S += " ";
                }
                StockMovebase = MovmentsNumber / 2;
                StockMove = MovmentsNumber % 2;
                S += (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";

                ss += S;

                //if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                //   StockMovebase++;
                //else
                //    StockMove++;

                ss = "position fen " + ss;

                return ss;
                /*

                int Start = -1;


                //When Refregitz Moves
                if (!BobSection)
                {
                    if (FenCastling == -1)
                    {
                        //When Index first is Solders.
                        if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 1)
                        {
                            String fs = ListToString(fenS);
                            int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);

                            Start = Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6;

                            if (fenS[Start + (int)RowClickP] == 'P')
                                fenS[Start + (int)RowClickP] = '1';
                            else
                                fenS[Start + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + (int)RowClickP]) + 1));

                            String S = ((int)RowRealesed).ToString() + "P" + ((int)(7 - ColumnRealeased)).ToString();
                            fs = ListToString(fenS);

                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);


                            fs = ListToString(fenS); fenS = new List<char>(fs);
                            fs = fs.Remove(Dum1 + Dum2 + Dum3 + Dum4, (Dum1 + Dum2 + Dum3 + Dum4 + Dum5) - (Dum1 + Dum2 + Dum3 + Dum4) - 1);
                            fs = fs.Insert(Dum1 + Dum2 + Dum3 + Dum4, S);
                            fenS = new List<char>(fs);

                            S = "w KQkq " + Alphabet() + Number() + " " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                            fs = ListToString(fenS);

                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);
                            fs = ListToString(fenS); fenS = new List<char>(fs);
                            fs = fs.Replace(fs.Substring(fs.IndexOf("b "), fs.size() - fs.IndexOf("b ")), S);
                            fenS = new List<char>(fs);
                            if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                StockMovebase++;
                            else
                                StockMove++;
                        }
                        else
                            if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 2)
                            {
                                String fs = ListToString(fenS);
                                int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);

                                Start = Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6;
                                if (fenS[Start + 9 + (int)RowClickP] == 'N')
                                    fenS[Start + 9 + (int)RowClickP] = '1';
                                else
                                    fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                String S = ((int)RowRealesed).ToString() + "N" + ((int)(7 - ColumnRealeased)).ToString();
                                fs = ListToString(fenS);
                                fs = fs.Remove(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, (Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6) - (Dum1 + Dum2 + Dum3 + Dum4 + Dum5) - 1);
                                fs = fs.Insert(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, S);
                                fenS = new List<char>(fs);

                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);


                                S = "w KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                fs = ListToString(fenS);

                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);
                                fs = ListToString(fenS); fenS = new List<char>(fs);
                                fs = fs.Replace(fs.Substring(fs.IndexOf("b "), fs.size() - fs.IndexOf("b ")), S);
                                fenS = new List<char>(fs);


                                if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                    StockMovebase++;
                                else
                                    StockMove++;
                            }
                            else
                                if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 3)
                                {
                                    String fs = ListToString(fenS);
                                    int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                    Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum1, fs.size() - Dum1);
                                    Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum2, fs.size() - Dum2);
                                    Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum3, fs.size() - Dum3);
                                    Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum4, fs.size() - Dum4);
                                    Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum5, fs.size() - Dum5);
                                    Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum6, fs.size() - Dum6);

                                    Start = Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6;
                                    if (fenS[Start + 9 + (int)RowClickP] == 'B')
                                        fenS[Start + 9 + (int)RowClickP] = '1';
                                    else
                                        fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                    String S = ((int)RowRealesed).ToString() + "B" + ((int)(7 - ColumnRealeased)).ToString();
                                    fs = ListToString(fenS);
                                    fs = fs.Remove(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, (Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6) - (Dum1 + Dum2 + Dum3 + Dum4 + Dum5) - 1);
                                    fs = fs.Insert(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, S);
                                    fenS = new List<char>(fs);

                                    Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum1, fs.size() - Dum1);
                                    Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum2, fs.size() - Dum2);
                                    Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum3, fs.size() - Dum3);
                                    Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum4, fs.size() - Dum4);
                                    Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum5, fs.size() - Dum5);
                                    Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum6, fs.size() - Dum6);


                                    S = "w KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                    fs = ListToString(fenS);

                                    Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum1, fs.size() - Dum1);
                                    Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum2, fs.size() - Dum2);
                                    Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum3, fs.size() - Dum3);
                                    Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum4, fs.size() - Dum4);
                                    Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum5, fs.size() - Dum5);
                                    Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum6, fs.size() - Dum6);
                                    fs = ListToString(fenS); fenS = new List<char>(fs);
                                    fs = fs.Replace(fs.Substring(fs.IndexOf("b "), fs.size() - fs.IndexOf("b ")), S);
                                    fenS = new List<char>(fs);



                                    if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                        StockMovebase++;
                                    else
                                        StockMove++;
                                }
                                else
                                    if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 4)
                                    {
                                        String fs = ListToString(fenS);
                                        int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                        Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum1, fs.size() - Dum1);
                                        Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum2, fs.size() - Dum2);
                                        Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum3, fs.size() - Dum3);
                                        Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum4, fs.size() - Dum4);
                                        Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum5, fs.size() - Dum5);
                                        Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum6, fs.size() - Dum6);

                                        Start = Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6;
                                        if (fenS[Start + 9 + (int)RowClickP] == 'R')
                                            fenS[Start + 9 + (int)RowClickP] = '1';
                                        else
                                            fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                        String S = ((int)RowRealesed).ToString() + "R" + ((int)(7 - ColumnRealeased)).ToString();
                                        fs = ListToString(fenS);
                                        fs = fs.Remove(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, (Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6) - (Dum1 + Dum2 + Dum3 + Dum4 + Dum5) - 1);
                                        fs = fs.Insert(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, S);
                                        fenS = new List<char>(fs);

                                        Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum1, fs.size() - Dum1);
                                        Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum2, fs.size() - Dum2);
                                        Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum3, fs.size() - Dum3);
                                        Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum4, fs.size() - Dum4);
                                        Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum5, fs.size() - Dum5);
                                        Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum6, fs.size() - Dum6);


                                        S = "w KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                        fs = ListToString(fenS);

                                        Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum1, fs.size() - Dum1);
                                        Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum2, fs.size() - Dum2);
                                        Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum3, fs.size() - Dum3);
                                        Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum4, fs.size() - Dum4);
                                        Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum5, fs.size() - Dum5);
                                        Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum6, fs.size() - Dum6);
                                        fs = ListToString(fenS); fenS = new List<char>(fs);
                                        fs = fs.Replace(fs.Substring(fs.IndexOf("b "), fs.size() - fs.IndexOf("b ")), S);
                                        fenS = new List<char>(fs);



                                        if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                            StockMovebase++;
                                        else
                                            StockMove++;
                                    }
                                    else
                                        if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 5)
                                        {
                                            String fs = ListToString(fenS);
                                            int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum6, fs.size() - Dum6);

                                            Start = Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6;
                                            if (fenS[Start + 9 + (int)RowClickP] == 'Q')
                                                fenS[Start + 9 + (int)RowClickP] = '1';
                                            else
                                                fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                            String S = ((int)RowRealesed).ToString() + "Q" + ((int)(7 - ColumnRealeased)).ToString();
                                            fs = ListToString(fenS);
                                            fs = fs.Remove(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, (Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6) - (Dum1 + Dum2 + Dum3 + Dum4 + Dum5) - 1);
                                            fs = fs.Insert(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, S);
                                            fenS = new List<char>(fs);

                                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum6, fs.size() - Dum6);


                                            S = "w KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                            fs = ListToString(fenS);

                                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum6, fs.size() - Dum6);

                                            fs = ListToString(fenS); fenS = new List<char>(fs);
                                            fs = fs.Replace(fs.Substring(fs.IndexOf("b "), fs.size() - fs.IndexOf("b ")), S);
                                            fenS = new List<char>(fs);



                                            if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                                StockMovebase++;
                                            else
                                                StockMove++;
                                        }
                                        else
                                            if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 6)
                                            {
                                                String fs = ListToString(fenS);
                                                int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum6, fs.size() - Dum6);

                                                Start = Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6;
                                                if (fenS[Start + 9 + (int)RowClickP] == 'K')
                                                    fenS[Start + 9 + (int)RowClickP] = '1';
                                                else
                                                    fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                                String S = ((int)RowRealesed).ToString() + "K" + ((int)(7 - ColumnRealeased)).ToString();
                                                fs = ListToString(fenS);
                                                fs = fs.Remove(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, (Dum1 + Dum2 + Dum3 + Dum4 + Dum5 + Dum6) - (Dum1 + Dum2 + Dum3 + Dum4 + Dum5) - 1);
                                                fs = fs.Insert(Dum1 + Dum2 + Dum3 + Dum4 + Dum5, S);
                                                fenS = new List<char>(fs);

                                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum6, fs.size() - Dum6);


                                                S = "w KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                                fs = ListToString(fenS);

                                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum6, fs.size() - Dum6);
                                                fs = ListToString(fenS); fenS = new List<char>(fs);
                                                fs = fs.Replace(fs.Substring(fs.IndexOf("b "), fs.size() - fs.IndexOf("b ")), S);
                                                fenS = new List<char>(fs);


                                                if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                                    StockMovebase++;
                                                else
                                                    StockMove++;
                                            }
                    }
                    else
                        if (FenCastling == 0)
                        {
                            String fs = ListToString(fenS);
                            int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;

                            String S = "w K-kq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                            fs = ListToString(fenS);

                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);
                            fs = ListToString(fenS); fenS = new List<char>(fs);
                            fs = fs.Replace(fs.Substring(fs.IndexOf("b "), fs.size() - fs.IndexOf("b ")), S);
                            fenS = new List<char>(fs);


                            if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                StockMovebase++;
                            else
                                StockMove++;

                        }
                        else
                            if (FenCastling == 1)
                            {
                                String fs = ListToString(fenS);
                                int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;

                                String S = "w -Qkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                fs = ListToString(fenS);

                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);
                                fs = ListToString(fenS); fenS = new List<char>(fs);
                                fs = fs.Replace(fs.Substring(fs.IndexOf("b "), fs.size() - fs.IndexOf("b ")), S);
                                fenS = new List<char>(fs);


                                if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                    StockMovebase++;
                                else
                                    StockMove++;

                            }

                    }
                else
                {
                    if (FenCastling == -1)
                    {
                        //When Index first is Solders.
                        if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 1)
                        {
                            String fs = ListToString(fenS);
                            int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);

                            Start = Dum1;

                            if (fenS[Start + (int)RowClickP] == 'p')
                                fenS[Start + (int)RowClickP] = '1';
                            else
                                fenS[Start + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + (int)RowClickP]) + 1));

                            fs = ListToString(fenS);
                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);

                            String S = ((int)RowRealesed).ToString() + "P" + ((int)(7 - ColumnRealeased)).ToString();
                            fs = ListToString(fenS);
                            fs = fs.Remove(Dum1 + Dum2, (Dum1 + Dum2 + Dum3) - (Dum1 + Dum2) - 1);
                            fs = fs.Insert(Dum1 + Dum2, S);
                            fenS = new List<char>(fs);

                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);


                            fs = ListToString(fenS); fenS = new List<char>(fs);

                            S = "b KQkq " + Alphabet() + Number() + " " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                            fs = ListToString(fenS);

                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);
                            fs = ListToString(fenS);
                            fs = fs.Replace(fs.Substring(fs.IndexOf("w "), fs.size() - fs.IndexOf("w ") - 1), S);
                            fenS = new List<char>(fs);
                            if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                StockMovebase++;
                            else
                                StockMove++;
                        }
                        else
                            if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 2)
                            {
                                String fs = ListToString(fenS);
                                int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);

                                Start = Dum1 + Dum2;
                                if (fenS[Start + 9 + (int)RowClickP] == 'n')
                                    fenS[Start + 9 + (int)RowClickP] = '1';
                                else
                                    fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                fs = ListToString(fenS);
                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);

                                String S = ((int)RowRealesed).ToString() + "N" + ((int)(7 - ColumnRealeased)).ToString();
                                fs = ListToString(fenS);
                                fs = fs.Remove(Dum1, (Dum1 + Dum2) - (Dum1) - 1);
                                fs = fs.Insert(Dum1, S);
                                fenS = new List<char>(fs);

                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);


                                S = "b KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                fs = ListToString(fenS);

                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);
                                fs = ListToString(fenS); fenS = new List<char>(fs);
                                fs = fs.Replace(fs.Substring(fs.IndexOf("w "), fs.size() - fs.IndexOf("w ") - 1), S);
                                fenS = new List<char>(fs);

                                if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                    StockMovebase++;
                                else
                                    StockMove++;
                            }
                            else
                                if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 3)
                                {
                                    String fs = ListToString(fenS);
                                    int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                    Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum1, fs.size() - Dum1);
                                    Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum2, fs.size() - Dum2);
                                    Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum3, fs.size() - Dum3);
                                    Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum4, fs.size() - Dum4);
                                    Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum5, fs.size() - Dum5);
                                    Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum6, fs.size() - Dum6);

                                    Start = Dum1 + Dum2;
                                    if (fenS[Start + 9 + (int)RowClickP] == 'b')
                                        fenS[Start + 9 + (int)RowClickP] = '1';
                                    else
                                        fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                    fs = ListToString(fenS);
                                    Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum1, fs.size() - Dum1);
                                    Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum2, fs.size() - Dum2);
                                    Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum3, fs.size() - Dum3);
                                    Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum4, fs.size() - Dum4);
                                    Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum5, fs.size() - Dum5);
                                    Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum6, fs.size() - Dum6);

                                    String S = ((int)RowRealesed).ToString() + "B" + ((int)(7 - ColumnRealeased)).ToString();
                                    fs = ListToString(fenS);
                                    fs = fs.Remove(Dum1, (Dum1 + Dum2) - (Dum1) - 1);
                                    fs = fs.Insert(Dum1, S);
                                    fenS = new List<char>(fs);

                                    Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum1, fs.size() - Dum1);
                                    Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum2, fs.size() - Dum2);
                                    Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum3, fs.size() - Dum3);
                                    Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum4, fs.size() - Dum4);
                                    Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum5, fs.size() - Dum5);
                                    Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum6, fs.size() - Dum6);


                                    S = "b KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                    fs = ListToString(fenS);

                                    Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum1, fs.size() - Dum1);
                                    Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum2, fs.size() - Dum2);
                                    Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum3, fs.size() - Dum3);
                                    Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum4, fs.size() - Dum4);
                                    Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum5, fs.size() - Dum5);
                                    Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                    fs = fs.Substring(Dum6, fs.size() - Dum6);
                                    fs = ListToString(fenS); fenS = new List<char>(fs);
                                    fs = fs.Replace(fs.Substring(fs.IndexOf("w "), fs.size() - fs.IndexOf("w ") - 1), S);
                                    fenS = new List<char>(fs);

                                    if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                        StockMovebase++;
                                    else
                                        StockMove++;
                                }
                                else
                                    if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 4)
                                    {
                                        String fs = ListToString(fenS);
                                        int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                        Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum1, fs.size() - Dum1);
                                        Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum2, fs.size() - Dum2);
                                        Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum3, fs.size() - Dum3);
                                        Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum4, fs.size() - Dum4);
                                        Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum5, fs.size() - Dum5);
                                        Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum6, fs.size() - Dum6);

                                        Start = Dum1 + Dum2;
                                        if (fenS[Start + 9 + (int)RowClickP] == 'r')
                                            fenS[Start + 9 + (int)RowClickP] = '1';
                                        else
                                            fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                        fs = ListToString(fenS);
                                        Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum1, fs.size() - Dum1);
                                        Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum2, fs.size() - Dum2);
                                        Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum3, fs.size() - Dum3);
                                        Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum4, fs.size() - Dum4);
                                        Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum5, fs.size() - Dum5);
                                        Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum6, fs.size() - Dum6);

                                        String S = ((int)RowRealesed).ToString() + "R" + ((int)(7 - ColumnRealeased)).ToString();
                                        fs = ListToString(fenS);
                                        fs = fs.Remove(Dum1, (Dum1 + Dum2) - (Dum1) - 1);
                                        fs = fs.Insert(Dum1, S);
                                        fenS = new List<char>(fs);

                                        Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum1, fs.size() - Dum1);
                                        Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum2, fs.size() - Dum2);
                                        Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum3, fs.size() - Dum3);
                                        Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum4, fs.size() - Dum4);
                                        Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum5, fs.size() - Dum5);
                                        Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum6, fs.size() - Dum6);


                                        S = "b KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                        fs = ListToString(fenS);

                                        Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum1, fs.size() - Dum1);
                                        Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum2, fs.size() - Dum2);
                                        Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum3, fs.size() - Dum3);
                                        Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum4, fs.size() - Dum4);
                                        Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum5, fs.size() - Dum5);
                                        Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                        fs = fs.Substring(Dum6, fs.size() - Dum6);
                                        fs = ListToString(fenS); fenS = new List<char>(fs);
                                        fs = fs.Replace(fs.Substring(fs.IndexOf("w "), fs.size() - fs.IndexOf("w ") - 1), S);
                                        fenS = new List<char>(fs);

                                        if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                            StockMovebase++;
                                        else
                                            StockMove++;
                                    }
                                    else
                                        if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 5)
                                        {
                                            String fs = ListToString(fenS);
                                            int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum6, fs.size() - Dum6);

                                            Start = Dum1 + Dum2;
                                            if (fenS[Start + 9 + (int)RowClickP] == 'q')
                                                fenS[Start + 9 + (int)RowClickP] = '1';
                                            else
                                                fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));


                                            fs = ListToString(fenS);
                                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum6, fs.size() - Dum6);

                                            String S = ((int)RowRealesed).ToString() + "Q" + ((int)(7 - ColumnRealeased)).ToString();
                                            fs = ListToString(fenS);
                                            fs = fs.Remove(Dum1, (Dum1 + Dum2) - (Dum1) - 1);
                                            fs = fs.Insert(Dum1, S);
                                            fenS = new List<char>(fs);

                                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum6, fs.size() - Dum6);


                                            S = "b KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                            fs = ListToString(fenS);

                                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                            fs = fs.Substring(Dum6, fs.size() - Dum6);
                                            fs = ListToString(fenS); fenS = new List<char>(fs);
                                            fs = fs.Replace(fs.Substring(fs.IndexOf("w "), fs.size() - fs.IndexOf("w ") - 1), S);
                                            fenS = new List<char>(fs);

                                            if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                                StockMovebase++;
                                            else
                                                StockMove++;
                                        }
                                        else
                                            if (System.Math.Abs(Table[(int)RowRealesed, (int)ColumnRealeased]) == 6)
                                            {
                                                String fs = ListToString(fenS);
                                                int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;
                                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum6, fs.size() - Dum6);

                                                Start = Dum1 + Dum2;
                                                if (fenS[Start + 9 + (int)RowClickP] == 'k')
                                                    fenS[Start + 9 + (int)RowClickP] = '1';
                                                else
                                                    fenS[Start + 9 + (int)RowClickP] = System.Convert.ToChar((System.Convert.ToInt32(fenS[Start + 9 + (int)RowClickP]) + 1));

                                                fs = ListToString(fenS);
                                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum6, fs.size() - Dum6);

                                                String S = ((int)RowRealesed).ToString() + "K" + ((int)(7 - ColumnRealeased)).ToString();
                                                fs = ListToString(fenS);
                                                fs = fs.Remove(Dum1, (Dum1 + Dum2) - (Dum1) - 1);
                                                fs = fs.Insert(Dum1, S);
                                                fenS = new List<char>(fs);

                                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum6, fs.size() - Dum6);


                                                S = "b KQkq - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                                fs = ListToString(fenS);

                                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                                fs = fs.Substring(Dum6, fs.size() - Dum6);
                                                fs = ListToString(fenS); fenS = new List<char>(fs);
                                                fs = fs.Replace(fs.Substring(fs.IndexOf("w "), fs.size() - fs.IndexOf("w ") - 1), S);
                                                fenS = new List<char>(fs);

                                                if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                                    StockMovebase++;
                                                else
                                                    StockMove++;
                                            }
                    }
                    else
                        if (FenCastling == 0)
                        {
                            String fs = ListToString(fenS);
                            int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;

                            String S = "b KQk- - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                            fs = ListToString(fenS);

                            Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum1, fs.size() - Dum1);
                            Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum2, fs.size() - Dum2);
                            Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum3, fs.size() - Dum3);
                            Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum4, fs.size() - Dum4);
                            Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum5, fs.size() - Dum5);
                            Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                            fs = fs.Substring(Dum6, fs.size() - Dum6);
                            fs = ListToString(fenS); fenS = new List<char>(fs);
                            fs = fs.Replace(fs.Substring(fs.IndexOf("w "), fs.size() - fs.IndexOf("w ")), S);
                            fenS = new List<char>(fs);


                            if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                StockMovebase++;
                            else
                                StockMove++;

                        }
                        else
                            if (FenCastling == 1)
                            {
                                String fs = ListToString(fenS);
                                int Dum1 = 0, Dum2 = 0, Dum3 = 0, Dum4 = 0, Dum5 = 0, Dum6 = 0;

                                String S = "b KQ-q - " + (StockMovebase).ToString() + " " + ((int)StockMove).ToString() + "\n";
                                fs = ListToString(fenS);

                                Dum1 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum1, fs.size() - Dum1);
                                Dum2 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum2, fs.size() - Dum2);
                                Dum3 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum3, fs.size() - Dum3);
                                Dum4 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum4, fs.size() - Dum4);
                                Dum5 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum5, fs.size() - Dum5);
                                Dum6 = fs.Substring(0, fs.IndexOf("/")).size() + 1;
                                fs = fs.Substring(Dum6, fs.size() - Dum6);
                                fs = ListToString(fenS); fenS = new List<char>(fs);
                                fs = fs.Replace(fs.Substring(fs.IndexOf("w "), fs.size() - fs.IndexOf("w ")), S);
                                fenS = new List<char>(fs);


                                if (MovmentsNumber % 2 == 0 && MovmentsNumber != 0)
                                    StockMovebase++;
                                else
                                    StockMove++;

                            }
                }
                    RowClick = -1;
                    ColumnClick = -1;
                    RowClickP = -1;
                    ColumnClickP = -1;
                    RowRealesed = -1;
                    ColumnRealeased = -1;

                */
                //return fenS.ToString();


            }
        }
        private static StringBuilder sortOutPut = new StringBuilder(null);
        private static int numOutputLines = 0;

        private static void SortOutputHandler(object sendingProcess,
           DataReceivedEventArgs outLine)
        {
            Object O = new Object();
            lock (O)
            {          // Collect the sort command output.
                if (!String.IsNullOrEmpty(outLine.Data))
                {
                    numOutputLines++;

                    // Add the text to the collected output.
                    sortOutPut.Append(Environment.NewLine +
                        "[" + numOutputLines.ToString() + "] - " + outLine.Data);
                }
            }
        }
        int SetRowColumn(String A)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (A[0] == 'a')
                        RowClickP = 0;
                    else
                        if (A[0] == 'b')
                        RowClickP = 1;
                    else
                            if (A[0] == 'c')
                        RowClickP = 2;
                    else
                                if (A[0] == 'd')
                        RowClickP = 3;
                    else
                                    if (A[0] == 'e')
                        RowClickP = 4;
                    else
                                        if (A[0] == 'f')
                        RowClickP = 5;
                    else
                                            if (A[0] == 'g')
                        RowClickP = 6;
                    else
                                                if (A[0] == 'h')
                        RowClickP = 7;
                    /* if(!Sugar)
                     ColumnClickP = 7 - ((System.Convert.ToInt32(A[1]) - 48) - 1);
                 else*/
                    ColumnClickP = ((System.Convert.ToInt32(A[1]) - 48) - 1);
                    if (A[2] == 'a')
                        RowRealesed = 0;
                    else
                        if (A[2] == 'b')
                        RowRealesed = 1;
                    else
                            if (A[2] == 'c')
                        RowRealesed = 2;
                    else
                                if (A[2] == 'd')
                        RowRealesed = 3;
                    else
                                    if (A[2] == 'e')
                        RowRealesed = 4;
                    else
                                        if (A[2] == 'f')
                        RowRealesed = 5;
                    else
                                            if (A[2] == 'g')
                        RowRealesed = 6;
                    else
                                                if (A[2] == 'h')
                        RowRealesed = 7;
                    /*if (!Sugar)
                          ColumnRealeased = 7 - ((System.Convert.ToInt32(A[3]) - 48) - 1);
                      else*/
                    ColumnRealeased = ((System.Convert.ToInt32(A[3]) - 48) - 1);

                    if (A.Length == 5)
                    {
                        if (A[4] == 'p')
                            return -1;
                        else
                            if (A[4] == 'n')
                            return -3;
                        else
                                if (A[4] == 'b')
                            return -2;
                        else
                                    if (A[4] == 'r')
                            return -4;
                        else
                                        if (A[4] == 'q')
                            return -5;
                        else
                                            if (A[4] == 'P')
                            return 1;
                        else
                                                if (A[4] == 'N')
                            return 3;
                        else
                                                    if (A[4] == 'B')
                            return 2;
                        else
                                                        if (A[4] == 'R')
                            return 4;
                        else
                                                            if (A[4] == 'Q')
                            return 5;



                    }
                }
                catch (Exception t)
                {
                    Log(t);
                    return -1;
                }
                return 0;

            }
        }
        void SetRowColumnReleasedAndClickP()
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    if (MovmentsNumber >= 1)
                    {
                        int[,] Table1 = new int[8, 8];
                        int[,] Table2 = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                Table1[i, j] = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][i, j];
                            }
                        }
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                Table2[i, j] = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][i, j];
                            }
                        }
                        for (int i = 0; i < 8; i++)
                            for (int j = 0; j < 8; j++)
                            {
                                if (Table1[i, j] != Table2[i, j])
                                {
                                    if (Table1[5, 7] == -6 && Table1[7, 7] == -4 && Table2[5, 7] == 0 && Table2[7, 7] == 0)
                                    {
                                        RefrigtzDLL.ChessRules.SmallKingCastleBrown = true;
                                        FenCastling = 1;
                                    }
                                    if (Table1[5, 7] == -6 && Table1[0, 7] == -4 && Table2[5, 7] == 0 && Table2[0, 7] == 0)
                                    {
                                        RefrigtzDLL.ChessRules.BigKingCastleBrown = true;
                                        FenCastling = 2;
                                    }
                                    else
                                        if (Table2[i, j] == 0 && Table1[i, j] != 0)
                                    {
                                        RowClickP = i;
                                        ColumnClickP = j;

                                    }
                                    else if (Table2[i, j] != 0 && Table1[i, j] == 0)
                                    {
                                        RowRealesed = i;
                                        ColumnRealeased = j;

                                    }


                                }
                            }
                    }
                }
                else
                {
                    if (MovmentsNumber >= 1)
                    {
                        int[,] Table1 = new int[8, 8];
                        int[,] Table2 = new int[8, 8];
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                Table1[i, j] = QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][i, j];
                            }
                        }
                        for (int i = 0; i < 8; i++)
                        {
                            for (int j = 0; j < 8; j++)
                            {
                                Table2[i, j] = QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][i, j];
                            }
                        }
                        for (int i = 0; i < 8; i++)
                            for (int j = 0; j < 8; j++)
                            {
                                if (Table1[i, j] != Table2[i, j])
                                {
                                    if (Table1[5, 7] == -6 && Table1[7, 7] == -4 && Table2[5, 7] == 0 && Table2[7, 7] == 0)
                                    {
                                        QuantumRefrigiz.ChessRules.SmallKingCastleBrown = true;
                                        FenCastling = 1;
                                    }
                                    if (Table1[5, 7] == -6 && Table1[0, 7] == -4 && Table2[5, 7] == 0 && Table2[0, 7] == 0)
                                    {
                                        QuantumRefrigiz.ChessRules.BigKingCastleBrown = true;
                                        FenCastling = 2;
                                    }
                                    else
                                        if (Table2[i, j] == 0 && Table1[i, j] != 0)
                                    {
                                        RowClickP = i;
                                        ColumnClickP = j;

                                    }
                                    else if (Table2[i, j] != 0 && Table1[i, j] == 0)
                                    {
                                        RowRealesed = i;
                                        ColumnRealeased = j;

                                    }


                                }
                            }
                    }
                }
            }
        }
        bool WaitOnMovmentOccured(String Preveios, ref String Next)
        {
            Object O = new Object();
            lock (O)
            {
                Next = "";
                try
                {


                    if (File.Exists("output.txt"))
                    {
                        Helper.WaitOnUsed("output.txt");
                        Next = File.ReadAllText("output.txt");
                    }
                    if (Preveios == Next || Next.Length < 1)
                        return true;
                }
                catch (Exception t)
                {
                    Log(t);
                    Thread.Sleep(1000);
                    //goto Again;
                }
                if (Preveios == Next || Next.Length < 1)
                    return true;
                //WaitOn = false;
                return false;
            }
        }
        bool SetDrawFoundingQuantum(bool ConvertQ, int i, int j, int ii, int jj, int[,] Table, int[,] Tab)
        {
            Object O = new Object();
            lock (O)
            {
                FOUND = false;
                QuantumRefrigiz.AllDraw THIS = null;
                DrawQ.FoundOfCurrentTableNode(CloneATable(Table), OrderPlate, ref THIS, ref FOUND);
                if (FOUND)
                {
                    if (!ConvertQ)
                    {
                        Table[ii, jj] = Table[i, j];
                        Table[i, j] = 0;
                    }
                    DrawQ = THIS;
                    //OrderPlate = DrawQ.OrderP;
                    QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(Tab));
                    //Person = false;
                    if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                    {
                        QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                        QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                        QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                        QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                    }
                    InsertTableAtDatabase(Table); QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(0, CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);
                    // OrderPlate = DrawQ.OrderP;
                    /*QuantumRefrigiz.AllDraw.TableListAction.Add(Tab);
                    Person = false;
                    if (QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch && QuantumRefrigiz.AllDraw.StoreADraw.Count > 0)
                    {
                        QuantumRefrigiz.AllDraw.StoreADraw.RemoveAt(0);
                        QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Clear();
                        QuantumRefrigiz.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                        QuantumRefrigiz.AllDraw.StoreADraw[0].SetRowColumn(0);
                    }
                    InsertTableAtDatabase(Table);    QuantumRefrigiz.AllDraw.Less += CalculateMoveMentHueuristicUser(CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);
                    if (QuantumRefrigiz.AllDraw.TableListAction.Count > 1)
                    {
                        QuantumRefrigiz.ChessGeneticAlgorithm R = new QuantumRefrigiz.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        if (R.FindGenToModified(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2], QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1], QuantumRefrigiz.AllDraw.TableListAction, 0, OrderPlate, true))
                        {
                            bool HitVal = false;
                            int Hit = QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                            if (Hit != 0)
                                HitVal = true;
                            bool Convert = false;
                            if (OrderPlate == 1)
                            {
                                if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                {
                                    if (R.CromosomColumn == 7)
                                        Convert = true;
                                }
                                if ((QuantumRefrigiz.ChessRules.SmallKingCastleGray || QuantumRefrigiz.ChessRules.BigKingCastleGray) && (!QuantumRefrigiz.ChessRules.CastleActGray))
                                    QuantumRefrigiz.ChessRules.CastleActGray = true;
                                QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][i, j], ii, jj, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActGray, Convert);
                            }
                            else
                            {
                                if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                {
                                    if (R.CromosomColumn == 0)
                                        Convert = true;
                                }
                                if ((QuantumRefrigiz.ChessRules.SmallKingCastleBrown || QuantumRefrigiz.ChessRules.BigKingCastleBrown) && (!QuantumRefrigiz.ChessRules.CastleActBrown))
                                    QuantumRefrigiz.ChessRules.CastleActBrown = true;

                                // QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActBrown, Convert);
                                QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][i, j], ii, jj, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActBrown, Convert);
                            }
                            SetBoxStatistic(QuantumRefrigiz.AllDraw.SyntaxToWrite);
                            RefreshBoxStatistic();
                        }
                    }*/
                    SetSyntax();
                    //SetAndConfirmSyntax();

                    OrderPlate = OrderPlate * -1;
                    QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;


                    BrownTimer.StopTime();
                    GrayTimer.StartTime("GrayTimer");
                    InsertTableAtDatabase(Table);
                    //SetBoxText("\r\nWait...");
                    //RefreshBoxText();
                    //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) DrawQ.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, King, -6);
                    Clicked = false; BobSection = false;


                    //SetBoxText("\r\nDraw Found");
                    //RefreshBoxText();
                    //   SetRefregitzBicture();
                    return true;
                }
                return false;
            }
        }
        bool SetDrawFoundingMovemnetDLL(bool ConvertD, int i, int j, int ii, int jj, int[,] Table, int[,] Tab)
        {
            Object O = new Object();
            lock (O)
            {
                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();



                if (FOUND)
                {
                    if (!ConvertD)
                    {
                        Table[ii, jj] = Table[i, j];
                        Table[i, j] = 0;
                    }
                    ///OrderPlate = Draw.OrderP;
                    //RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(Tab));
                    // Person = false;
                    if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                    {
                        RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                        RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                        RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                        RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                    }
                    InsertTableAtDatabase(Table); RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(0, CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);
                    // OrderPlate = Draw.OrderP;
                    /*RefrigtzDLL.AllDraw.TableListAction.Add(Tab);
                    Person = false;
                    if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch && RefrigtzDLL.AllDraw.StoreADraw.Count > 0)
                    {
                        RefrigtzDLL.AllDraw.StoreADraw.RemoveAt(0);
                        RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Clear();
                        RefrigtzDLL.AllDraw.StoreADraw[0].TableList.Add(CloneATable(Table));
                        RefrigtzDLL.AllDraw.StoreADraw[0].SetRowColumn(0);
                    }
                    InsertTableAtDatabase(Table);    RefrigtzDLL.AllDraw.Less += CalculateMoveMentHueuristicUser(CloneATable(Table), -1, (int)RowRealesed, (int)ColumnRealeased, (int)RowRealesedP, (int)ColumnRealeasedP, Color.Brown);
                    if (RefrigtzDLL.AllDraw.TableListAction.Count > 1)
                    {
                        RefrigtzDLL.ChessGeneticAlgorithm R = new RefrigtzDLL.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        if (R.FindGenToModified(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2], RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1], RefrigtzDLL.AllDraw.TableListAction, 0, OrderPlate, true))
                        {
                            bool HitVal = false;
                            int Hit = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                            if (Hit != 0)
                                HitVal = true;
                            bool Convert = false;
                            if (OrderPlate == 1)
                            {
                                if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                {
                                    if (R.CromosomColumn == 7)
                                        Convert = true;
                                }
                                if ((RefrigtzDLL.ChessRules.SmallKingCastleGray || RefrigtzDLL.ChessRules.BigKingCastleGray) && (!RefrigtzDLL.ChessRules.CastleActGray))
                                    RefrigtzDLL.ChessRules.CastleActGray = true;
                                // RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActGray, Convert);
                                RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][i, j], ii, jj, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActGray, Convert);
                            }
                            else
                            {
                                if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                {
                                    if (R.CromosomColumn == 0)
                                        Convert = true;
                                }
                                if ((RefrigtzDLL.ChessRules.SmallKingCastleBrown || RefrigtzDLL.ChessRules.BigKingCastleBrown) && (!RefrigtzDLL.ChessRules.CastleActBrown))
                                    RefrigtzDLL.ChessRules.CastleActBrown = true;

                                RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][i, j], ii, jj, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActBrown, Convert);
                            }
                            SetBoxStatistic(RefrigtzDLL.AllDraw.SyntaxToWrite);
                            RefreshBoxStatistic();
                        }
                    }*/

                    SetAndConfirmSyntax();

                    OrderPlate = OrderPlate * -1;
                    RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;


                    BrownTimer.StopTime();
                    GrayTimer.StartTime("GrayTimer");
                    InsertTableAtDatabase(Table);
                    //SetBoxText("\r\nWait...");
                    //RefreshBoxText();
                    //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, King, -6);
                    Clicked = false; BobSection = false;


                    //SetBoxText("\r\nDraw Found");
                    //RefreshBoxText();
                    //   SetRefregitzBicture();
                    return true;
                }


                return false;
            }
        }
        void WaitConvertion() { var array = Task.Factory.StartNew(() => WaitConvertion()); array.Wait(); array.Dispose(); }
        bool SetMovement(int i, int j, int ii, int jj)
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                    {
                        RefrigtzDLL.ChessRules A = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, Table[i, j], CloneATable(Table), OrderPlate, i, j);


                        Color a = Color.Gray;

                        if (OrderPlate == -1)
                            a = Color.Brown;
                        int[,] Tab = new int[8, 8];


                        Tab = CloneATable(Table);

                        if (A.Rules(i, j, ii, jj, a, Tab[i, j]))
                        {
                            if (System.Math.Abs(Tab[i, j]) == 1)
                            {
                                CurrentKind = 1;
                                ConvertWait = true;
                                RefrigtzDLL.ThingsConverter.ActOfClickEqualTow = true;
                                Draw.SolderesOnTable[Soldier].ConvertOperation((int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);
                                var array1 = Task.Factory.StartNew(() => WaitConvertion()); array1.Wait();

                                int[,] TableCon = new int[8, 8];

                                if (Draw.SolderesOnTable[Soldier].Convert)
                                {

                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                    if (Draw.SolderesOnTable[Soldier].ConvertedToMinister)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] = 5;
                                    else if (Draw.SolderesOnTable[Soldier].ConvertedToCastle)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] = 4;
                                    else if (Draw.SolderesOnTable[Soldier].ConvertedToHourse)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] = 3;
                                    else if (Draw.SolderesOnTable[Soldier].ConvertedToElefant)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] = 2;

                                    if (OrderPlate == -1)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] *= -1;

                                    RefrigtzDLL.ThingsConverter.ClickOcurred = false;
                                    for (int ik = 0; ik < 8; ik++)
                                    {
                                        for (int jk = 0; jk < 8; jk++)
                                        {
                                            TableCon[ik, jk] = Table[ik, jk];
                                        }
                                    }

                                }

                            }

                            Tab[ii, jj] = Tab[i, j];
                            Tab[i, j] = 0;


                            for (int ik = 0; ik < 8; ik++)
                            {
                                for (int jk = 0; jk < 8; jk++)
                                {
                                    Table[ik, jk] = Tab[ik, jk];
                                }
                            }
                            Thread arr = new Thread(new ThreadStart(SetDrawFound));
                            arr.Start();
                            arr.Join();

                            bool StoreStateCC = StateCC, StoreStateCP = StateCP, StoreStateGe = StateGe;
                            if (FOUND)
                            {
                                //Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                var array1 = Task.Factory.StartNew(() => DrawImageOfMain()); array1.Wait();
                                SetAndConfirmSyntax();

                                OpAfterAllTinking(ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                                OrderPlate *= -1;
                                Clicked = false;
                                return true;
                            }

                            //OpAfterAllTinking(ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                            //Clicked = false;
                            // OrderPlate *= -1;

                            //Draw.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                            DrawImageOfMain();

                            return false;

                        }
                        else
                        {
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, King, -6);
                            Clicked = false;
                            // SetRefregitzBicture();

                            return false;
                        }
                    }
                }
                else
                {
                    if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                    {
                        QuantumRefrigiz.ChessRules A = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, Table[i, j], CloneATable(Table), OrderPlate, i, j);
                        Color a = Color.Gray;
                        if (OrderPlate == -1)
                            a = Color.Brown;

                        int[,] Tab = new int[8, 8];
                        for (int ik = 0; ik < 8; ik++)
                        {
                            for (int jk = 0; jk < 8; jk++)
                            {
                                Tab[ik, jk] = Table[ik, jk];
                            }
                        }
                        if (A.Rules(i, j, ii, jj, a, Tab[i, j]))
                        {
                            if (System.Math.Abs(Tab[i, j]) == 1)
                            {
                                CurrentKind = 1;
                                ConvertWait = true;
                                RefrigtzDLL.ThingsConverter.ActOfClickEqualTow = true;
                                DrawQ.SolderesOnTable[Soldier].ConvertOperation((int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate, false, Soldier);
                                var array1 = Task.Factory.StartNew(() => WaitConvertion()); array1.Wait();
                                int[,] TableCon = new int[8, 8];

                                if (DrawQ.SolderesOnTable[Soldier].Convert)
                                {

                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                    if (Draw.SolderesOnTable[Soldier].ConvertedToMinister)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] = 5;
                                    else if (Draw.SolderesOnTable[Soldier].ConvertedToCastle)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] = 4;
                                    else if (Draw.SolderesOnTable[Soldier].ConvertedToHourse)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] = 3;
                                    else if (Draw.SolderesOnTable[Soldier].ConvertedToElefant)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] = 2;
                                    if (OrderPlate == -1)
                                        Table[(int)RowRealesed, (int)ColumnRealeased] *= -1;

                                    DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                    RefrigtzDLL.ThingsConverter.ClickOcurred = false;
                                    for (int ik = 0; ik < 8; ik++)
                                    {
                                        for (int jk = 0; jk < 8; jk++)
                                        {
                                            TableCon[ik, jk] = Table[ik, jk];
                                        }
                                    }
                                }
                            }
                            else
                            {
                                Table[ii, jj] = Table[i, j];
                                Table[i, j] = 0;
                            }
                            QuantumRefrigiz.ThingsConverter.ActOfClickEqualTow = false;
                            // FOUND = false;
                            // RefrigtzDLL.AllDraw THIS = null;

                            // SetDrawFounding(ref FOUND, ref THIS, false);
                            // Tab[ii, jj] = Tab[i, j];
                            // Tab[i, j] = 0;
                            QuantumRefrigiz.AllDraw.LastRowQ = i;
                            QuantumRefrigiz.AllDraw.LastColumnQ = j;

                            if (System.Math.Abs(Tab[ii, jj]) == 1)
                            {
                                DrawQ.SolderesOnTable[Soldier].IsQuntumMove = true;
                            }
                            else
                            if (System.Math.Abs(Tab[ii, jj]) == 2)
                            {
                                DrawQ.ElephantOnTable[Elefant].IsQuntumMove = true;
                            }
                            else
                                if (System.Math.Abs(Tab[ii, jj]) == 3)
                            {
                                DrawQ.HoursesOnTable[Hourse].IsQuntumMove = true;
                            }
                            else
                                if (System.Math.Abs(Tab[ii, jj]) == 4)
                            {
                                DrawQ.CastlesOnTable[Castle].IsQuntumMove = true;
                            }
                            else
                                if (System.Math.Abs(Tab[ii, jj]) == 5)
                            {
                                DrawQ.MinisterOnTable[Minister].IsQuntumMove = true;
                            }
                            else
                                if (System.Math.Abs(Tab[ii, jj]) == 6)
                            {
                                DrawQ.KingOnTable[King].IsQuntumMove = true;
                            }

                            bool FOUND = SetDrawFoundingQuantum(DrawQ.SolderesOnTable[Soldier].Convert, i, j, ii, jj, CloneATable(Table), Tab);
                            if (FOUND)
                            {
                                // DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                                var array1 = Task.Factory.StartNew(() => DrawImageOfMain()); array1.Wait();
                                Clicked = false;

                                return true;
                            }
                            //DrawQ.SolderesOnTable[Soldier].DrawSoldierOnTable(ref g, PictureBoxRefrigtz.Image.Width / 8, PictureBoxRefrigtz.Image.Height / 8);
                            DrawImageOfMain();
                            Clicked = false;

                            return false;
                        }
                        else
                        {
                            //SetBoxText("\r\nWait...");
                            //RefreshBoxText();
                            //if (!FirstMovmentOnLoad && System.Convert.ToInt32(ComboBoxMaxLevel.Text) > 2) Draw.InitiateAStarGreedytOneNode(0, (int)RowRealesed, (int)ColumnRealeased, Color.Gray, CloneATable(Table), OrderPlate * -1, King, -6);
                            Clicked = false;
                            // SetRefregitzBicture();

                            return false;
                        }
                    }
                }
                return false;
            }
        }
        void ComputerByComputerAliceAsStockFish(ref Process proc)
        {
            Object O = new Object();
            lock (O)
            {
                Color a = Color.Gray;
                bool StoreStateCC = false, StoreStateCP = false, StoreStateGe = false;
                OpBeforeThinking(ref a, ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                int[,] Tab = CloneATable(Table);

                RowClickP = -1;
                ColumnClickP = -1;
                RowRealesed = -1;
                ColumnRealeased = -1;
                if (tM != null)
                {
                    try
                    {
                        tM.Abort();
                        Wait();
                        tM = null;
                    }
                    catch (Exception t)
                    {
                        Log(t);
                    }
                }


                if (OrderPlate == 1)
                {
                    //SetBoxText("\r\nStockfish Number " + MovmentsNumber + " By Bob!");
                    //RefreshBoxText();
                }
                else
                {
                    //SetBoxText("\r\nStockfish Number " + MovmentsNumber + " By Alice!");
                    //RefreshBoxText();
                }

                // RefregitzisCurrent = false;

                String Pre = "";
                if (File.Exists("output.txt"))
                    Pre = File.ReadAllText("output.txt");
                StreamWriter sw = proc.StandardInput;
                string input = "go depth " + ComboBoxMaxLevelText + "\r\n";
                sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                sw.Flush();
                String wr = "";
                WaitOn = true;

                do
                {
                    try
                    {
                        Thread.Sleep(100);
                        input = "wr" + "\r\n";
                        sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                        sw.Flush();

                        WaitOn = WaitOnMovmentOccured(Pre, ref wr);
                    }
                    catch (Exception t)
                    {
                        Log(t);
                    }

                } while (WaitOn);

                if (wr == "e8c8" || wr == "e1c1")
                {
                    FenCastling = 1;
                    RefrigtzDLL.ChessRules.BigKingCastleBrown = true;
                }
                else
                    if (wr == "e8g8" || wr == "e1g1")
                {
                    RefrigtzDLL.ChessRules.SmallKingCastleBrown = true;
                    FenCastling = 0;
                }
                else
                    FenCastling = -1;
                int Pro = 0;
                if (FenCastling == -1)
                {
                    do
                    {
                        Pro = SetRowColumn(wr);
                    } while (Pro == -1);
                    File.AppendAllText("List.txt", wr + "-");
                    if (Pro == 0)
                    {
                        Tab[(int)RowRealesed, (int)ColumnRealeased] = Tab[(int)RowClickP, (int)ColumnClickP];
                        Tab[(int)RowClickP, (int)ColumnClickP] = 0;
                    }
                    else
                    {
                        Tab[(int)RowRealesed, (int)ColumnRealeased] = Pro;
                        Tab[(int)RowClickP, (int)ColumnClickP] = 0;

                    }
                }
                else
                    if (FenCastling == 1)
                {
                    Tab[0, 0] = 0;
                    Tab[4, 0] = 0;
                    Tab[3, 0] = -6;
                    Tab[4, 0] = -4;
                }
                else
                        if (FenCastling == 0)
                {
                    Tab[7, 0] = 0;
                    Tab[4, 0] = 0;
                    Tab[6, 0] = -6;
                    Tab[5, 0] = -4;
                }
                String fens = Fen();
                if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                {
                    RefrigtzDLL.ChessRules.BigKingCastleGray = false;
                }
                else
                    if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                {
                    RefrigtzDLL.ChessRules.SmallKingCastleGray = false;
                }
                if (FenCastling != -1)
                {
                    RefrigtzDLL.ChessRules.BigKingCastleBrown = false;
                    RefrigtzDLL.ChessRules.SmallKingCastleBrown = false;

                }


                RowClickP = -1;
                ColumnClickP = -1;
                RowRealesed = -1;
                ColumnRealeased = -1;
                sw = proc.StandardInput;
                input = fens + "\r\n";
                sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                sw.Flush();

                //if (OrderPlate == 1)
                // this.SetBoxText("\r\nThinking Finished by Bob!");
                //else
                // this.SetBoxText("\r\nThinking Finished by Alice!");
                //RefreshBoxText();



                using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                {
                    soundClick.Play();
                }

                Table = CloneATable(Tab);
                SetAndConfirmSyntax();

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                OpAfterAllTinking(ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                OrderPlate *= -1;


                BrownTimer.StopTime();
                GrayTimer.StartTime("GrayTimer");

                SetBoxTextWrite(Out);


                DrawImageOfMain();

                BobSection = true;
            }
        }
        void ComputerByComputerBobAsRefregitz(ref Process proc)
        {
            Object O = new Object();
            lock (O)
            {
                if (t3.IsAlive) new Syncronization(t3, 1);

                BobAction();

                if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                {
                    FenCastling = 1;
                }
                else
                    if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                {
                    FenCastling = 0;
                }
                else
                    FenCastling = -1;

                RowClickP = RefrigtzDLL.AllDraw.LastRow;
                ColumnClickP = RefrigtzDLL.AllDraw.LastColumn;
                RowRealesed = RefrigtzDLL.AllDraw.NextRow;
                ColumnRealeased = RefrigtzDLL.AllDraw.NextColumn;
                String fens = Fen();
                if (RefrigtzDLL.ChessRules.BigKingCastleGray)
                {
                    RefrigtzDLL.ChessRules.BigKingCastleGray = false;
                }
                else
                    if (RefrigtzDLL.ChessRules.SmallKingCastleGray)
                {
                    RefrigtzDLL.ChessRules.SmallKingCastleGray = false;
                }
                StreamWriter sw = proc.StandardInput;
                string input = fens + "\r\n";
                sw.BaseStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                sw.Flush();
                RowClickP = -1;
                ColumnClickP = -1;
                RowRealesed = -1;
                ColumnRealeased = -1;
                BobSection = false;

                GrayTimer.StopTime();
                BrownTimer.StartTime("BrownTimer");

                SetBoxTextWrite(Out);


                DrawImageOfMain();

            }
        }
        void SetDrawFound()
        {
            Object O = new Object();
            lock (O)
            {
                FOUND = false;
                RefrigtzDLL.AllDraw THIS = null;
                QuantumRefrigiz.AllDraw THISQ = null;
                if (!Quantum)
                    SetDrawFounding(ref FOUND, ref THIS, false);
                else
                    SetDrawFounding(ref FOUND, ref THISQ, false);
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        public void SetDrawFounding(ref bool FOUND, ref RefrigtzDLL.AllDraw THIS, bool First)
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object OO = new Object();
            lock (OO)
            {
                if (Draw == null)
                    return;
                int Dummy = OrderPlate;
                /*  if (Sec.RadioButtonGrayOrder.Checked)
                      OrderPlate = 1;
                  else
                      OrderPlate = -1;
           */
                RefrigtzDLL.AllDraw THISB = Draw.AStarGreedyString;
                RefrigtzDLL.AllDraw THISStore = Draw;
                //while (Draw.AStarGreedyString != null)
                //Draw = Draw.AStarGreedyString;

                /*
                OrderPlate = Draw.OrderP;
                if ((Stockfish || Sugar || StateCC || StateCP) && (!BobSection) && LoadO)
                    OrderPlate *= -1;
    */
                //OrderPlate = Draw.OrderP;

                /*Object O = new Object();
                lock (O)
                {
                    FOUND = false;
                    THIS = null;

                    Color a = Color.Brown;
                    //if (First)
                    //Draw.FoundOfCurrentTableNode(CloneATable(Table), OrderPlate * -1, ref THIS, ref FOUND);
                    //else
                    int Ord = OrderPlate;
                    Draw.FoundOfCurrentTableNode(CloneATable(Table), Ord, ref THIS, ref FOUND);
                    if (FOUND)
                    {
                        //THISB = THIS.AStarGreedyString;
                        Draw = THIS;
                        //SetBoxText("\r\nDraw Found");
                        //RefreshBoxText();
                    }
                    else
                    {
                        SetAllDrawKind();
                        //Set Configuration To True for some unknown reason!.
                        //UpdateConfigurationTableVal = true;                             
                        SetAllDrawKindString();

                      //if (MovmentsNumber > 1)
                                    (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);
    DrawManagement();

                        Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        Draw.TableList.Clear();
                        Draw.TableList.Add(CloneATable(Table));
                        Draw.SetRowColumn(0);
                        //Draw.AStarGreedyString = THISB;
                        RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                        RefrigtzDLL.AllDraw.DepthIterative = 0;
                        //SetBoxText("\r\nDraw Not Found");
                        //RefreshBoxText();
                    }
                }*/
                Object O = new Object();
                lock (O)
                {
                    FOUND = false;
                    THIS = null;

                    Color a = Color.Brown;
                    //if (First)
                    //Draw.FoundOfCurrentTableNode(CloneATable(Table), OrderPlate * -1, ref THIS, ref FOUND);
                    //else
                    int Ord = OrderPlate;
                    RefrigtzDLL.AllDraw.OrderPlate = Ord;
                    Draw.FoundOfCurrentTableNode(CloneATable(Table), Ord, ref THIS, ref FOUND);
                    if (FOUND)
                    {

                        Draw = THIS;
                        //Draw.AStarGreedyString = THISB;

                        /*  if (UsePenaltyRegardMechnisam && AStarGreedyHeuristic)
                              AllDrawKind = 4;
                          else
                                                  if ((!UsePenaltyRegardMechnisam) && AStarGreedyHeuristic)
                              AllDrawKind = 3;
                          if (UsePenaltyRegardMechnisam && (!AStarGreedyHeuristic))
                              AllDrawKind = 2;
                          if ((!UsePenaltyRegardMechnisam) && (!AStarGreedyHeuristic))
                              AllDrawKind = 1;

                          SetAllDrawKindString();*/
                        //DrawManagement();
                        bool LoadTree = true;
                        Ord = OrderPlate;
                        //if (MovmentsNumber > 1)
                        (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);


                        Draw.IsCurrentDraw = true;
                        //SetBoxText("\r\nDraw Found");
                        //RefreshBoxText();
                    }
                    else
                    {

                        FOUND = false;


                        a = Color.Brown;
                        while (Draw.AStarGreedyString != null)
                            Draw = Draw.AStarGreedyString;

                        bool FirstS = false;
                        if ((RefrigtzDLL.AllDraw.TableListAction.Count >= 2))
                        {

                            if ((RefrigtzDLL.AllDraw.TableListAction.Count != 2))
                            {
                                Ord = OrderPlate * -1;
                                RefrigtzDLL.AllDraw.OrderPlate = Ord;
                                OrderPlate = Ord;
                            }
                            if (RefrigtzDLL.AllDraw.TableListAction.Count == 2)
                                FirstS = true;


                            Color aa = Color.Gray;
                            if (Ord == -1)
                                aa = Color.Brown;
                            Draw.FoundOfCurrentTableNode(CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2]), Ord, ref THIS, ref FOUND);
                            /*if (RefrigtzDLL.AllDraw.TableListAction.Count == 2 && FOUND)
                           {
                               Draw.TableList.Clear();
                               Draw.TableList.Add(CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2]));
                               Draw.SetRowColumn(0);
                               Draw.IsCurrentDraw = true;
                               Draw.AStarGreedyString = THISB;
                           }*/

                        }
                        else
                        if ((RefrigtzDLL.AllDraw.TableListAction.Count >= 1))
                        {
                            Draw.FoundOfCurrentTableNode(CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1]), Ord, ref THIS, ref FOUND);
                            Ord = OrderPlate;
                            RefrigtzDLL.AllDraw.OrderPlate = Ord;
                            FirstS = true;
                            //SetBoxText("\r\nDraw Found By First Node");
                            //RefreshBoxText();
                            //return;
                        }

                        if (FOUND)
                        {

                            Draw = THIS;


                            Draw.IsCurrentDraw = true;
                            //SetBoxText("\r\nDraw Found By Recurve");
                            //RefreshBoxText();
                            //FOUND = false;

                            //Draw.ClearAllTablesHeuristicsAndMore(Ord);
                            bool Store = Deeperthandeeper;
                            Deeperthandeeper = false;





                            Color aa = Color.Gray;
                            if (Ord == -1)
                                aa = Color.Brown;
                            bool B = RefrigtzDLL.AllDraw.Blitz;
                            RefrigtzDLL.AllDraw.Blitz = false;
                            RefrigtzDLL.AllDraw.MaxAStarGreedy = 0; //PlatformHelper.ProcessorCount;
                            //FOUND = false;
                            if (!FirstS)
                            {
                                if (Draw.IsAtLeastAllObjectIsNull())
                                {
                                    Draw.TableList.Clear();
                                    Draw.TableList.Add(CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2]));
                                    Draw.SetRowColumn(0);
                                    Draw.IsCurrentDraw = true;
                                }
                                Draw.InitiateAStarGreedyt(RefrigtzDLL.AllDraw.MaxAStarGreedy, 0, 0, aa, CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2]), Ord, false, FOUND, 0);
                            }
                            else
                            {
                                if (Draw.IsAtLeastAllObjectIsNull())
                                {
                                    Draw.TableList.Clear();
                                    Draw.TableList.Add(CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1]));
                                    Draw.SetRowColumn(0);
                                    Draw.IsCurrentDraw = true;
                                }
                                Draw.InitiateAStarGreedyt(RefrigtzDLL.AllDraw.MaxAStarGreedy, 0, 0, aa, CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1]), Ord, false, FOUND, 0);
                            }
                            RefrigtzDLL.AllDraw.Blitz = B;
                            Deeperthandeeper = Store;

                            //while (Draw.AStarGreedyString != null)
                            //Draw = Draw.AStarGreedyString;
                            FOUND = false;
                            if (!First)
                            {
                                Ord = OrderPlate * -1;
                                RefrigtzDLL.AllDraw.OrderPlate = Ord;
                                OrderPlate = Ord;
                            }
                            Draw.FoundOfCurrentTableNode(CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1]), Ord, ref THIS, ref FOUND);


                            if (FOUND)
                            {
                                Draw = THIS;
                                //Draw.TableList.Clear();
                                //Draw.TableList.Add(CloneATable(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1]));
                                //Draw.SetRowColumn(0);
                                //Draw.AStarGreedyString = THISB;

                                //DrawManagement();
                                bool LoadTree = true;

                                (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);

                                RefrigtzDLL.AllDraw.OrderPlate = Ord;


                                //SetBoxText("\r\nRecurved Draw Constructed and Found!");
                                //RefreshBoxText();

                            }
                            else
                            {

                                Draw = THISStore;

                                if (MovmentsNumber == 1)
                                    NotFoundBegin = true;

                                //DrawManagement();
                                bool LoadTree = true;



                                //Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                Draw.TableList.Clear();
                                Draw.TableList.Add(CloneATable(Table));
                                Draw.SetRowColumn(0);
                                Draw.IsCurrentDraw = true;
                                Draw.AStarGreedyString = THISB;
                                RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                                RefrigtzDLL.AllDraw.DepthIterative = 0;
                                (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);
                                //SetBoxText("\r\nDraw Not Found");
                                //RefreshBoxText();
                            }
                        }
                        else
                        {
                            Draw = THISStore;
                            if (MovmentsNumber == 1)
                                NotFoundBegin = true;
                            OrderPlate = Dummy;

                            //DrawManagement();
                            bool LoadTree = true;



                            //Draw = new RefrigtzDLL.AllDraw(OrderPlate, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);
                            Draw.TableList.Clear();
                            Draw.TableList.Add(CloneATable(Table));
                            Draw.SetRowColumn(0);
                            Draw.IsCurrentDraw = true;
                            Draw.AStarGreedyString = THISB;
                            RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                            RefrigtzDLL.AllDraw.DepthIterative = 0;
                            (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);
                            //SetBoxText("\r\nDraw Not Found");
                            //RefreshBoxText();
                        }

                    }
                }

                if (RefrigtzDLL.AllDraw.FirstTraversalTree)
                    FOUND = false;
                DrawManagement();
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        public void SetDrawFounding(ref bool FOUND, ref QuantumRefrigiz.AllDraw THIS, bool First)
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object OO = new Object();
            lock (OO)
            {
                if (DrawQ == null)
                    return;
                int Dummy = OrderPlate;
                /*  if (Sec.RadioButtonGrayOrder.Checked)
                      OrderPlate = 1;
                  else
                      OrderPlate = -1;
           */
                QuantumRefrigiz.AllDraw THISB = DrawQ.AStarGreedyString;
                QuantumRefrigiz.AllDraw THISStore = DrawQ;
                //while (DrawQ.AStarGreedyString != null)
                //DrawQ = DrawQ.AStarGreedyString;

                /*
                OrderPlate = DrawQ.OrderP;
                if ((Stockfish || Sugar || StateCC || StateCP) && (!BobSection) && LoadO)
                    OrderPlate *= -1;
    */
                //OrderPlate = DrawQ.OrderP;

                /*Object O = new Object();
                lock (O)
                {
                    FOUND = false;
                    THIS = null;

                    Color a = Color.Brown;
                    //if (First)
                    //DrawQ.FoundOfCurrentTableNode(CloneATable(Table), OrderPlate * -1, ref THIS, ref FOUND);
                    //else
                    int Ord = OrderPlate;
                    DrawQ.FoundOfCurrentTableNode(CloneATable(Table), Ord, ref THIS, ref FOUND);
                    if (FOUND)
                    {
                        //THISB = THIS.AStarGreedyString;
                        DrawQ = THIS;
                        //SetBoxText("\r\nDraw Found");
                        //RefreshBoxText();
                    }
                    else
                    {
                        SetAllDrawKind();
                        //Set Configuration To True for some unknown reason!.
                        //UpdateConfigurationTableVal = true;                             
                        SetAllDrawKindString();

                      //if (MovmentsNumber > 1)
                                    (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);
    DrawManagement();

                        DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        DrawQ.TableList.Clear();
                        DrawQ.TableList.Add(CloneATable(Table));
                        DrawQ.SetRowColumn(0);
                        //DrawQ.AStarGreedyString = THISB;
                        QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;
                        QuantumRefrigiz.AllDraw.DepthIterative = 0;
                        //SetBoxText("\r\nDraw Not Found");
                        //RefreshBoxText();
                    }
                }*/
                Object O = new Object();
                lock (O)
                {
                    FOUND = false;
                    THIS = null;

                    Color a = Color.Brown;
                    //if (First)
                    //DrawQ.FoundOfCurrentTableNode(CloneATable(Table), OrderPlate * -1, ref THIS, ref FOUND);
                    //else
                    int Ord = OrderPlate;
                    QuantumRefrigiz.AllDraw.OrderPlate = Ord;
                    DrawQ.FoundOfCurrentTableNode(CloneATable(Table), Ord, ref THIS, ref FOUND);
                    if (FOUND)
                    {

                        DrawQ = THIS;
                        //DrawQ.AStarGreedyString = THISB;

                        /*  if (UsePenaltyRegardMechnisam && AStarGreedyHeuristic)
                              AllDrawKind = 4;
                          else
                                                  if ((!UsePenaltyRegardMechnisam) && AStarGreedyHeuristic)
                              AllDrawKind = 3;
                          if (UsePenaltyRegardMechnisam && (!AStarGreedyHeuristic))
                              AllDrawKind = 2;
                          if ((!UsePenaltyRegardMechnisam) && (!AStarGreedyHeuristic))
                              AllDrawKind = 1;

                          SetAllDrawKindString();*/
                        //DrawManagement();
                        bool LoadTree = true;
                        Ord = OrderPlate;
                        //if (MovmentsNumber > 1)
                        (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);


                        DrawQ.IsCurrentDraw = true;
                        //SetBoxText("\r\nDraw Found");
                        //RefreshBoxText();
                    }
                    else
                    {

                        FOUND = false;


                        a = Color.Brown;
                        while (DrawQ.AStarGreedyString != null)
                            DrawQ = DrawQ.AStarGreedyString;

                        bool FirstS = false;
                        if ((QuantumRefrigiz.AllDraw.TableListAction.Count >= 2))
                        {

                            if ((QuantumRefrigiz.AllDraw.TableListAction.Count != 2))
                            {
                                Ord = OrderPlate * -1;
                                QuantumRefrigiz.AllDraw.OrderPlate = Ord;
                                OrderPlate = Ord;
                            }
                            if (QuantumRefrigiz.AllDraw.TableListAction.Count == 2)
                                FirstS = true;


                            Color aa = Color.Gray;
                            if (Ord == -1)
                                aa = Color.Brown;
                            DrawQ.FoundOfCurrentTableNode(CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2]), Ord, ref THIS, ref FOUND);
                            /*if (QuantumRefrigiz.AllDraw.TableListAction.Count == 2 && FOUND)
                           {
                               DrawQ.TableList.Clear();
                               DrawQ.TableList.Add(CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2]));
                               DrawQ.SetRowColumn(0);
                               DrawQ.IsCurrentDraw = true;
                               DrawQ.AStarGreedyString = THISB;
                           }*/

                        }
                        else
                        if ((QuantumRefrigiz.AllDraw.TableListAction.Count >= 1))
                        {
                            DrawQ.FoundOfCurrentTableNode(CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1]), Ord, ref THIS, ref FOUND);
                            Ord = OrderPlate;
                            QuantumRefrigiz.AllDraw.OrderPlate = Ord;
                            FirstS = true;
                            //SetBoxText("\r\nDraw Found By First Node");
                            //RefreshBoxText();
                            //return;
                        }

                        if (FOUND)
                        {

                            DrawQ = THIS;


                            DrawQ.IsCurrentDraw = true;
                            //SetBoxText("\r\nDraw Found By Recurve");
                            //RefreshBoxText();
                            //FOUND = false;

                            //DrawQ.ClearAllTablesHeuristicsAndMore(Ord);
                            bool Store = Deeperthandeeper;
                            Deeperthandeeper = false;





                            Color aa = Color.Gray;
                            if (Ord == -1)
                                aa = Color.Brown;
                            bool B = QuantumRefrigiz.AllDraw.Blitz;
                            QuantumRefrigiz.AllDraw.Blitz = false;
                            QuantumRefrigiz.AllDraw.MaxAStarGreedy = 0; //PlatformHelper.ProcessorCount;
                            //FOUND = false;
                            if (!FirstS)
                            {
                                if (DrawQ.IsAtLeastAllObjectIsNull())
                                {
                                    DrawQ.TableList.Clear();
                                    DrawQ.TableList.Add(CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2]));
                                    DrawQ.SetRowColumn(0);
                                    DrawQ.IsCurrentDraw = true;
                                }
                                DrawQ.InitiateAStarGreedyt(QuantumRefrigiz.AllDraw.MaxAStarGreedy, 0, 0, aa, CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2]), Ord, false, FOUND, 0);
                            }
                            else
                            {
                                if (DrawQ.IsAtLeastAllObjectIsNull())
                                {
                                    DrawQ.TableList.Clear();
                                    DrawQ.TableList.Add(CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1]));
                                    DrawQ.SetRowColumn(0);
                                    DrawQ.IsCurrentDraw = true;
                                }
                                DrawQ.InitiateAStarGreedyt(QuantumRefrigiz.AllDraw.MaxAStarGreedy, 0, 0, aa, CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1]), Ord, false, FOUND, 0);
                            }
                            QuantumRefrigiz.AllDraw.Blitz = B;
                            Deeperthandeeper = Store;

                            //while (DrawQ.AStarGreedyString != null)
                            //DrawQ = DrawQ.AStarGreedyString;
                            FOUND = false;
                            if (!First)
                            {
                                Ord = OrderPlate * -1;
                                QuantumRefrigiz.AllDraw.OrderPlate = Ord;
                                OrderPlate = Ord;
                            }
                            DrawQ.FoundOfCurrentTableNode(CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1]), Ord, ref THIS, ref FOUND);


                            if (FOUND)
                            {
                                DrawQ = THIS;
                                //DrawQ.TableList.Clear();
                                //DrawQ.TableList.Add(CloneATable(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1]));
                                //DrawQ.SetRowColumn(0);
                                //DrawQ.AStarGreedyString = THISB;

                                //DrawManagement();
                                bool LoadTree = true;

                                (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);

                                QuantumRefrigiz.AllDraw.OrderPlate = Ord;


                                //SetBoxText("\r\nRecurved DrawQ Constructed and Found!");
                                //RefreshBoxText();

                            }
                            else
                            {

                                DrawQ = THISStore;

                                if (MovmentsNumber == 1)
                                    NotFoundBegin = true;

                                //DrawManagement();
                                bool LoadTree = true;



                                //DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                DrawQ.TableList.Clear();
                                DrawQ.TableList.Add(CloneATable(Table));
                                DrawQ.SetRowColumn(0);
                                DrawQ.IsCurrentDraw = true;
                                DrawQ.AStarGreedyString = THISB;
                                QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;
                                QuantumRefrigiz.AllDraw.DepthIterative = 0;
                                (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);
                                //SetBoxText("\r\nDraw Not Found");
                                //RefreshBoxText();
                            }
                        }
                        else
                        {
                            DrawQ = THISStore;
                            if (MovmentsNumber == 1)
                                NotFoundBegin = true;
                            OrderPlate = Dummy;

                            //DrawManagement();
                            bool LoadTree = true;



                            //DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);
                            DrawQ.TableList.Clear();
                            DrawQ.TableList.Add(CloneATable(Table));
                            DrawQ.SetRowColumn(0);
                            DrawQ.IsCurrentDraw = true;
                            DrawQ.AStarGreedyString = THISB;
                            QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;
                            QuantumRefrigiz.AllDraw.DepthIterative = 0;
                            (new TakeRoot()).Save(FOUND, false, this, ref LoadTree, false, false, UsePenaltyRegardMechnisam, false, false, false, AStarGreedyHeuristic, true);
                            //SetBoxText("\r\nDraw Not Found");
                            //RefreshBoxText();
                        }

                    }
                }

                if (QuantumRefrigiz.AllDraw.FirstTraversalTree)
                    FOUND = false;
                DrawManagement();
            }
        }
        void AllOperationsWait()
        {
            Object O = new Object();
            lock (O)
            {
                while ((!AllDrawLoad) || (RefrigtzDLL.AllDraw.TableListAction.Count == 0) || (!MenueSelecte))
                {
                    //Thread.Sleep(10);
                }

            }

        }
        //All Operation of Thinking Handling.
        void AllOperations()
        {
            Object O = new Object();
            lock (O)
            {
                var array = new Thread(new ThreadStart(AllOperationsWait));
                array.Start();
                array.Join();
                //Fen();
                String FolderLocation = Root;
                sortOutPut.Clear();

                ProcessStartInfo start = new ProcessStartInfo();
                if ((!Sugar))
                    start.FileName = FolderLocation + "\\" + "stockfish8.exe";
                else
                    start.FileName = FolderLocation + "\\" + "Sugar.exe";
                start.UseShellExecute = false;
                start.RedirectStandardOutput = true;
                start.RedirectStandardInput = true;
                start.RedirectStandardError = true;
                start.CreateNoWindow = true;
                start.ErrorDialog = false;  // Run the external process & wait for it to finish
                                            //proc.StartInfo = start;
                                            //proc.StartInfo.RedirectStandardOutPut.ToString() += true;
                                            //proc.StartInfo.RedirectStandardInput = true;
                                            //proc.StartInfo.RedirectStandardError = true;
                proc.OutputDataReceived += new DataReceivedEventHandler(SortOutputHandler);
                proc.ErrorDataReceived += new DataReceivedEventHandler(SortOutputHandler);
                proc = Process.Start(start);
                proc.BeginOutputReadLine();
                proc.BeginErrorReadLine();
                Thread.Sleep(100);
                try
                {
                    if (File.Exists("output.txt"))
                        File.Delete("output.txt");
                }
                catch (Exception t) { Log(t); }

                if ((MovmentsNumber > 0) && Stockfish)
                {

                    if (OrderPlate == -1)
                    {

                        var array1 = Task.Factory.StartNew(() => SetAllDrawKind()); array1.Wait();
                        //Set Configuration To True for some unknown reason!.
                        //UpdateConfigurationTableVal = true;                             
                        var array2 = Task.Factory.StartNew(() => SetAllDrawKindString()); array2.Wait();

                        (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        MessageBox.Show("No Konwledgs to begin with stockfish! Please delete one node of Last table and continue");
                        Application.ExitThread();
                        Application.Exit();
                    }

                }
                if (OrderPlate == 1)
                    BobSection = true;
                else
                    BobSection = false;

                /*using (Process proc = Process.Start(start))
                {
                    proc.WaitForExit();
                    // Retrieve the app's exit code
                    int exitCode = proc.ExitCode;
                }*/
            }
        }
        List<int[]> WhereNumbers(String Tag)
        {
            Object O = new Object();
            lock (O)
            {
                List<int[]> TagList = new List<int[]>();
                for (int i = 0; i < Tag.Length; i++)
                {
                    if (i + 1 < Tag.Length)
                    {
                        for (int j = i + 1; j < i + RefrigtzDLL.AllDraw.MaxAStarGreedy.ToString().Length + 1; j++)
                        {
                            try
                            {
                                int A = System.Convert.ToInt32(Tag.Substring(i, j - i));
                                if (A >= 0 && A <= RefrigtzDLL.AllDraw.MaxAStarGreedy)
                                {
                                    int[] Loc = new int[2];
                                    Loc[0] = i;
                                    Loc[1] = j - i;
                                    TagList.Add(Loc);
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);

                            }



                        }
                    }
                }
                return TagList;
            }

        }
        String CreateHtmlTag(String Tag)
        {
            Object O = new Object();
            lock (O)
            {
                //List<int[]> List = new List<int[]>();
                //List = WhereNumbers(Tag);
                //for (int i = 0; i < List.Count; i++)
                //Tag = Tag.Replace(Tag.Substring(List[i][0], List[i][1]), "<font Color=\"Gold\">" + Tag.Substring(List[i][0], List[i][1]) + "</font>");

                if (Tag.Contains("Thinking"))
                    Tag = Tag.Replace("Thinking", "<font Color=\"Green\">" + "Thinking" + "</font>");
                if (Tag.Contains("Perception"))
                    Tag = Tag.Replace("Perception", "<font Color=\"Green\">" + "Perception" + "</font>");
                if (Tag.Contains("Bob"))
                    Tag = Tag.Replace("Bob", "<font Color=\"Gray\">" + "Bob" + "</font>");
                if (Tag.Contains("Alice"))
                    Tag = Tag.Replace("Alice", "<font Color=\"Brown\">" + "Brown" + "</font>");
                if (Tag.Contains("AstarGreedy "))
                    Tag = Tag.Replace("AstarGreedy ", "<font Color=\"Yellow\">" + "AstarGreedy " + "</font>");
                if (Tag.Contains("Level"))
                    Tag = Tag.Replace("Level", "<font Color=\"Blue\">" + "Level" + "</Font>");
                /*if (Tag.Contains("Soldeir"))
                    Tag = Tag.Replace("Soldeir", "<font Color=\"Silver\">" + "Soldeir" + "</font>");
                else
                if (Tag.Contains("Elephant"))
                    Tag = Tag.Replace("Elephant", "<font Color=\"Silver\">" + "Elephant" + "</font>");
                else
                if (Tag.Contains("Hourse"))
                    Tag = Tag.Replace("Hourse", "<font Color=\"Silver\">" + "Hourse" + "</font>");
                else
                if (Tag.Contains("Castle"))
                    Tag = Tag.Replace("Castle", "<font Color=\"Silver\">" + "Castle" + "</font>");
                else
                if (Tag.Contains("Minister"))
                    Tag = Tag.Replace("Minister", "<font Color=\"Silver\">" + "Minister" + "</font>");
                else
                if (Tag.Contains("King"))
                    Tag = Tag.Replace("King", "<font Color=\"Silver\">" + "King" + "</font>");
                    */
                Tag = Tag.Replace("\r\n", "</br>");
                String R = "<p><font Color=\"Red\">" + Tag + "</font></p>";

                return R;
            }

        }
        //Deligation of Control Threading.
        delegate void SetTextBoxWriteTextCallback(String state);

        public void SetBoxTextWrite(String state)
        {
            Object O = new Object();
            lock (O)
            {

                // InvokeRequired required compares the thread ID of the
                // calling thread to the thread ID of the creating thread.
                // If these threads are different, it returns true.
                if (this.InvokeRequired)
                {
                    try
                    {
                        //SetTextBoxWriteTextCallback d = new SetTextBoxWriteTextCallback(SetBoxTextWrite);
                        String R = File.ReadAllText(Root + "\\Database\\Monitor.html");
                        R = R.Replace("</body>", "");
                        File.AppendAllText(Root + "\\Database\\Monitor.html", "\n\t" + state);
                        File.AppendAllText(Root + "\\Database\\Monitor.html", "\n\t" + "</body>");
                        Out = "";
                    }
                    catch (Exception t) { Log(t); }
                }
                else
                {
                    try
                    {
                        Out = "";
                    }
                    catch (Exception t) { Log(t); }
                }
                //this.RefreshBoxText();
            }
        }
        delegate void SetTextBoxTextCallback(String state);
        public void SetBoxText(String state)
        {
            Object O = new Object();
            lock (O)
            {

                // InvokeRequired required compares the thread ID of the
                // calling thread to the thread ID of the creating thread.
                // If these threads are different, it returns true.
                if (this.InvokeRequired)
                {
                    try
                    {
                        String A = TimerText.ReturnTime();
                        if (OrderPlate == -1)
                            A = TimerText.ReturnTime();
                        SetTextBoxTextCallback d = new SetTextBoxTextCallback(SetBoxText);
                        this.Invoke(new Action(() => TextBoxText.AppendText(state + " At Time " + A)));
                        state = CreateHtmlTag(state);
                        Out += state + " At Time " + A + "\n\t<br/>";
                    }
                    catch (Exception t) { Log(t); }
                }
                else
                {
                    try
                    {
                        String A = GrayTimer.ReturnTime();
                        if (OrderPlate == -1)
                            A = BrownTimer.ReturnTime();
                        TextBoxText.AppendText(state + " At Time " + A);
                        state = CreateHtmlTag(state);
                        Out += state + " At Time " + A + "\n\t";
                    }
                    catch (Exception t) { Log(t); }
                }
                // this.RefreshBoxText();
            }
        }
        delegate void SetComboBoxTextCallback();
        public void SetComboBoxText()
        {
            Object O = new Object();
            lock (O)
            {
                // InvokeRequired required compares the thread ID of the
                // calling thread to the thread ID of the creating thread.
                // If these threads are different, it returns true.
                Invoke((MethodInvoker)delegate ()
                   {
                       if (!Quantum)
                           RefrigtzDLL.AllDraw.THIScomboBoxMaxLevelText = ComboBoxMaxLevel.Text;
                       else
                           QuantumRefrigiz.AllDraw.THIScomboBoxMaxLevelText = ComboBoxMaxLevel.Text;
                   });
            }

        }
        delegate void RefreshhTextBoxTextCallback();

        public void RefreshBoxText()
        {
            Object O = new Object();
            lock (O)
            {
                // InvokeRequired required compares the thread ID of the
                // calling thread to the thread ID of the creating thread.
                // If these threads are different, it returns true.
                if (this.InvokeRequired)
                {
                    try
                    {
                        //RefreshhTextBoxTextCallback d = new RefreshhTextBoxTextCallback(RefreshBoxText);
                        //this.Invoke(new Action(() => TextBoxText.Refresh()));
                        //TextBoxText.Refresh();
                    }
                    catch (Exception t) { Log(t); }
                }
                else
                {
                    try
                    {
                        //this.TextBoxStatistic.Refresh();
                    }
                    catch (Exception t) { Log(t); }
                }
            }
        }
        delegate void SetTextBoxStatisticCallback(String state);

        public void SetBoxStatistic(String state)
        {
            Object O = new Object();
            lock (O)
            {
                if (state == null || state == "" || TextBoxStatistic == null)
                    return;
                if (TextBoxStatistic.Text == null)
                    return;
                // InvokeRequired required compares the thread ID of the
                // calling thread to the thread ID of the creating thread.
                // If these threads are different, it returns true.
                if (this.InvokeRequired)
                {
                    try
                    {
                        SetTextBoxStatisticCallback d = new SetTextBoxStatisticCallback(SetBoxStatistic);
                        this.Invoke(new Action(() => TextBoxStatistic.AppendText(state)));
                    }
                    catch (Exception t) { Log(t); }
                }
                else
                {
                    try
                    {
                        TextBoxStatistic.AppendText(state);
                    }
                    catch (Exception t) { Log(t); }
                }
                this.RefreshBoxStatistic();
            }
        }
        delegate void RefreshhTextBoxStatisticCallback();

        public void RefreshBoxStatistic()
        {
            Object O = new Object();
            lock (O)
            {

                // InvokeRequired required compares the thread ID of the
                // calling thread to the thread ID of the creating thread.
                // If these threads are different, it returns true.
                if (this.InvokeRequired)
                {
                    RefreshhTextBoxStatisticCallback d = new RefreshhTextBoxStatisticCallback(RefreshBoxStatistic);
                    this.Invoke(new Action(() => TextBoxStatistic.Refresh()));

                }
                else
                {
                    TextBoxStatistic.Refresh();
                }
            }
        }
        //The State of Alice with Person Thinking.
        void AliceWithPerson()
        {
            //BackgroundWorkerAllOp.CancelAsync();
            //BackgroundWorkerSetNode.CancelAsync();
            //BackgroundWorkerSetRefD.CancelAsync();

            Object O = new Object();
            lock (O)
            {
                int[,] TableC = new int[8, 8];
                if (!Quantum)
                    RefrigtzDLL.ThinkingChess.ThinkingRun = true;
                else
                    QuantumRefrigiz.ThinkingQuantumChess.ThinkingRun = true;
                //PaintedPaused = true;
                try
                {
                    Begin1:
                    //LoadConvertedTable = false;

                    Color a = Color.Gray;
                    bool StoreStateCC = false, StoreStateCP = false, StoreStateGe = false;
                    OpBeforeThinking(ref a, ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);


                    var array = Task.Factory.StartNew(() => Initiate(a));
                    array.Wait(); array.Dispose();

                    //LoadConvertedTable = true;
                    //PaintedPaused = false;
                    //this.SetBoxText("\r\nThinking Finished!");
                    try
                    {

                        if (TableZero(Table))
                            OpTableZero(true);

                    }
                    catch (Exception t)
                    {
                        Log(t);
                        goto Begin1;
                    }

                    SetAndConfirmSyntax();


                    Thread arr = new Thread(new ThreadStart(SetDrawFound));
                    arr.Start();
                    arr.Join();


                    OpAfterAllTinking(ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                    //BobWithStockfishFinished = true;

                    OrderPlate *= -1;

                    SetBoxTextWrite(Out);

                    BobSection = true;

                    if (!Quantum)
                        RefrigtzDLL.AllDraw.DrawTable = true;
                    else
                        QuantumRefrigiz.AllDraw.DrawTable = true;

                    //DrawImageOfMain();


                    SetPrictureBoxRefregitzInvalidate(PictureBoxRefrigtz);
                    SetPrictureBoxRefregitzUpdate(PictureBoxRefrigtz);

                }
                catch (Exception t)
                {
                    Log(t);
                }
            }
            //BackgroundWorkerAllOp.RunWorkerAsync();
            //BackgroundWorkerSetNode.RunWorkerAsync();
            //BackgroundWorkerSetRefD.RunWorkerAsync();

        }
        //The State of Bob with Person Thinking.
        void BobWithPerson()
        {
            //BackgroundWorkerAllOp.CancelAsync();
            //BackgroundWorkerSetNode.CancelAsync();
            //BackgroundWorkerSetRefD.CancelAsync();

            Object O = new Object();
            lock (O)
            {
                int[,] TableCon = new int[8, 8];
                int[,] TableC = new int[8, 8];
                //LoadConvertedTable = false;
                if (!Quantum)
                    RefrigtzDLL.ThinkingChess.ThinkingRun = true;
                else
                    QuantumRefrigiz.ThinkingQuantumChess.ThinkingRun = true;
                try
                {
                    Begin1:

                    Color a = Color.Gray;
                    bool StoreStateCC = false, StoreStateCP = false, StoreStateGe = false;
                    OpBeforeThinking(ref a, ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);


                    var array = Task.Factory.StartNew(() => Initiate(a));
                    array.Wait(); array.Dispose();


                    try
                    {
                        if (TableZero(Table))
                            OpTableZero(true);

                    }
                    catch (Exception t)
                    {
                        Log(t);
                        goto Begin1;
                    }

                    SetAndConfirmSyntax();

                    Thread arr = new Thread(new ThreadStart(SetDrawFound));
                    arr.Start();
                    arr.Join();

                    OpAfterAllTinking(ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                    OrderPlate *= -1;

                    SetBoxTextWrite(Out);


                    BobSection = false;

                    if (!Quantum)
                        RefrigtzDLL.AllDraw.DrawTable = true;
                    else
                        QuantumRefrigiz.AllDraw.DrawTable = true;

                    //DrawImageOfMain();


                    SetPrictureBoxRefregitzInvalidate(PictureBoxRefrigtz);
                    SetPrictureBoxRefregitzUpdate(PictureBoxRefrigtz);

                }
                catch (Exception t)
                {
                    Log(t);
                    //this.SetBoxText("\r\nError!");
                }
            }
            //BackgroundWorkerAllOp.RunWorkerAsync();
            //BackgroundWorkerSetNode.RunWorkerAsync();
            //BackgroundWorkerSetRefD.RunWorkerAsync();

        }
        public bool TableZero(int[,] Ta)
        {
            Object O = new Object();
            lock (O)
            {
                bool Zerro = true;

                for (int i = 0; i < 8; i++)
                {
                    for (int j = 0; j < 8; j++)
                    {
                        if (Ta[i, j] != 0)
                            Zerro = false;
                    }
                }

                return Zerro;
            }
        }
        void OpBeforeThinking(ref Color a, ref bool StoreStateCC, ref bool StoreStateCP, ref bool StoreStateGe)
        {
            Object O = new Object();
            lock (O)
            {
                StoreStateCC = StateCC;
                StoreStateCP = StateCP;
                StoreStateGe = StateGe;

                //AliceSection = false;



                if (OrderPlate == 1)
                {
                    //SetBoxText("\r\nMovments Number " + MovmentsNumber.ToString() + " is Gray OrderPlate!");
                    //RefreshBoxText();
                }
                else
                {
                    //SetBoxText("\r\nMovments Number " + MovmentsNumber.ToString() + " is Brown OrderPlate!");
                    //RefreshBoxText();
                }

                if (OrderPlate == 1)
                {
                    //this.SetBoxText("\r\nThinking Begin By Bob!");
                    //RefreshBoxText();
                }
                else
                {
                    //this.SetBoxText("\r\nThinking Begin By Alice!");
                    //RefreshBoxText();
                }
                //RefreshBoxText();
                a = Color.Gray;
                if (OrderPlate == -1)
                    a = Color.Brown;
            }
        }
        void OpTableZero(bool Save)
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    if (!RefrigtzDLL.AllDraw.AllowedSupTrue)
                    {
                        RefrigtzDLL.AllDraw.AllowedSupTrue = true;
                        return;
                    }


                }
                else
                {
                    if (!QuantumRefrigiz.AllDraw.AllowedSupTrue)
                    {
                        QuantumRefrigiz.AllDraw.AllowedSupTrue = true;
                        return;
                    }
                }
                if (!Quantum)
                    RefrigtzDLL.AllDraw.AllowedSupTrue = false;
                else
                    QuantumRefrigiz.AllDraw.AllowedSupTrue = false;


                SetAllDrawKind();
                //Set Configuration To True for some unknown reason!.
                //UpdateConfigurationTableVal = true;                             
                SetAllDrawKindString();

                //Saved Midle Target.
                (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                if (Save)
                {
                    CheckBoxUsePenaltyRegradMechnisam.Checked = false;
                    SettingPRFALSE = true;
                }
                UpdateConfigurationTable();
                bool Disposingbook = false;
                bool Disposingole = false;
                if (bookConn != null)
                {
                    bookConn.Close();
                    Disposingbook = true;
                }
                if (oleDbCmd != null)
                {
                    oleDbCmd.Clone();
                    Disposingole = true;
                }
                if (Disposingbook)
                    //oleDbCmd.Dispose();
                    if (Disposingole)
                        bookConn.Dispose();
                System.IO.File.AppendAllText("CheckSum.btt", "\n\tInstallation Begine On " + DateTime.Now.ToString());
                String FolderLocation = Root;
                int ExitCode = 0;

                // Prepare the process to run
                ProcessStartInfo start = new ProcessStartInfo();
                // Prepare the process to run
                // Enter in the command line arguments, everything you would enter after the executable name itself
                start.Arguments = "";
                // Enter the executable to run, including the complete path
                start.FileName = "\"" + FolderLocation + "\\" + "LoadRP.exe" + "\"";
                // Do you want to show a console window?
                start.WindowStyle = ProcessWindowStyle.Normal;
                start.CreateNoWindow = true;
                start.UseShellExecute = true;

                // Run the external process & wait for it to finish
                using (Process proc = Process.Start(start))
                {
                    proc.WaitForExit(20000);
                    // Retrieve the app's Exit code
                    ExitCode = proc.ExitCode;
                }

                Application.Exit();
            }

        }
        void SetAndConfirmSyntax()
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {

                    RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(Table));

                    if (RefrigtzDLL.AllDraw.TableListAction.Count >= 1)
                    {
                        RefrigtzDLL.ChessGeneticAlgorithm R = new RefrigtzDLL.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        if (R.FindGenToModified(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2], RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1], RefrigtzDLL.AllDraw.TableListAction, 0, OrderPlate, true))
                        {
                            bool HitVal = false;
                            int Hit = 0;
                            if (R.Hit)
                                Hit = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                            if (Hit != 0)
                                HitVal = true;
                            bool Convert = false;
                            if (OrderPlate == 1)
                            {
                                if (R.CromosomRow != -1 && R.CromosomColumn != -1)
                                {
                                    if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                    {
                                        if (R.CromosomColumn == 7)
                                            Convert = true;
                                    }
                                }
                                if ((RefrigtzDLL.ChessRules.SmallKingCastleGray || RefrigtzDLL.ChessRules.BigKingCastleGray) && (!RefrigtzDLL.ChessRules.CastleActGray))
                                    RefrigtzDLL.ChessRules.CastleActGray = true;
                                if (R.CromosomRow != -1 && R.CromosomColumn != -1)
                                    RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActGray, Convert);
                            }
                            else
                            {
                                if (R.CromosomRow != -1 && R.CromosomColumn != -1)
                                {
                                    if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                    {
                                        if (R.CromosomColumn == 0)
                                            Convert = true;
                                    }
                                }
                                if ((RefrigtzDLL.ChessRules.SmallKingCastleBrown || RefrigtzDLL.ChessRules.BigKingCastleBrown) && (!RefrigtzDLL.ChessRules.CastleActBrown))
                                    RefrigtzDLL.ChessRules.CastleActBrown = true;

                                if (R.CromosomRow != -1 && R.CromosomColumn != -1)
                                    RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActBrown, Convert);
                            }
                            SetBoxStatistic(RefrigtzDLL.AllDraw.SyntaxToWrite);
                            RefreshBoxStatistic();
                        }
                    }
                }
                else
                {
                    QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(Table));

                    if (QuantumRefrigiz.AllDraw.TableListAction.Count >= 1)
                    {
                        QuantumRefrigiz.ChessGeneticAlgorithm R = new QuantumRefrigiz.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        if (R.FindGenToModified(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2], QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1], QuantumRefrigiz.AllDraw.TableListAction, 0, OrderPlate, true))
                        {
                            bool HitVal = false;
                            int Hit = 0;
                            if (R.Hit)
                                Hit = QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                            if (Hit != 0)
                                HitVal = true;
                            bool Convert = false;
                            if (OrderPlate == 1)
                            {
                                if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1 && (R.CromosomRow != -1 && R.CromosomColumn != -1))
                                {
                                    if (R.CromosomColumn == 7)
                                        Convert = true;
                                }
                                if ((QuantumRefrigiz.ChessRules.SmallKingCastleGray || QuantumRefrigiz.ChessRules.BigKingCastleGray) && (!QuantumRefrigiz.ChessRules.CastleActGray))
                                    QuantumRefrigiz.ChessRules.CastleActGray = true;
                                if (R.CromosomRow != -1 && R.CromosomColumn != -1)
                                    QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActGray, Convert);
                            }
                            else
                            {
                                if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1 && (R.CromosomRow != -1 && R.CromosomColumn != -1))
                                {
                                    if (R.CromosomColumn == 0)
                                        Convert = true;
                                }
                                if ((QuantumRefrigiz.ChessRules.SmallKingCastleBrown || QuantumRefrigiz.ChessRules.BigKingCastleBrown) && (!QuantumRefrigiz.ChessRules.CastleActBrown))
                                    QuantumRefrigiz.ChessRules.CastleActBrown = true;

                                if (R.CromosomRow != -1 && R.CromosomColumn != -1)
                                    QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActBrown, Convert);
                            }
                            SetBoxStatistic(QuantumRefrigiz.AllDraw.SyntaxToWrite);
                            RefreshBoxStatistic();
                        }
                    }
                }
            }
        }
        void OpAfterAllTinking(ref bool StoreStateCC, ref bool StoreStateCP, ref bool StoreStateGe)
        {
            Object O = new Object();
            lock (O)
            {
                InsertTableAtDatabase(CloneATable(Table));

                StateCC = StoreStateCC;
                StateCP = StoreStateCP;
                StateGe = StoreStateGe;


                if (!Quantum)
                    RefrigtzDLL.ThinkingChess.ThinkingRun = false;
                else
                    QuantumRefrigiz.ThinkingQuantumChess.ThinkingRun = false;

                UpdateConfigurationTable();
                if (OrderPlate == 1)
                {
                    //this.SetBoxText("\r\nThinking Finished By Bob!");
                    //RefreshBoxText();
                }
                else
                {
                    //this.SetBoxText("\r\nThinking Finished By Alice!");
                    //RefreshBoxText();
                }
                using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                {
                    soundClick.Play();
                    //soundClick.Dispose();
                }
                Clicked = false; BobSection = false;
            }
        }
        int[,] CloneATable(int[,] Tab)
        {
            Object O = new Object();
            lock (O)
            {          //long Time = TimeElapced.TimeNow();Spaces++;
                int[,] Tabl = new int[8, 8];
                for (var i = 0; i < 8; i++)
                    for (var j = 0; j < 8; j++)
                        Tabl[i, j] = Tab[i, j];
                ////{ //AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) //AllDraw.OutPut.Append(Space);  //AllDraw.OutPut.Append("CloneATable:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return Tabl;
            }
        }
        void Initiate(Color a)
        {
            Object O = new Object();
            lock (O)
            {
                int LeafAStarGrteedy = 0;
                if (!Quantum)
                    Table = Draw.Initiate(1, 4, a, CloneATable(Table), OrderPlate, false, FOUND, LeafAStarGrteedy);
                else
                    Table = DrawQ.Initiate(1, 4, a, CloneATable(Table), OrderPlate, false, FOUND, LeafAStarGrteedy);
            }
        }
        //Alice Section of Computer by Computer Thinking.
        void AliceAction()
        {
            //BackgroundWorkerAllOp.CancelAsync();
            //BackgroundWorkerSetNode.CancelAsync();
            //BackgroundWorkerSetRefD.CancelAsync();

            Object O = new Object();
            lock (O)
            {

                if (!Quantum)
                    RefrigtzDLL.ThinkingChess.ThinkingRun = false;
                else
                    QuantumRefrigiz.ThinkingQuantumChess.ThinkingRun = false;
                Begin4:

                Color a = Color.Gray;
                bool StoreStateCC = false, StoreStateCP = false, StoreStateGe = false;
                OpBeforeThinking(ref a, ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                RefrigtzDLL.AllDraw THIS = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                QuantumRefrigiz.AllDraw THISQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                //FOUND = false;

                //SetDrawFounding(ref FOUND, ref THIS, true);


                var array = Task.Factory.StartNew(() => Initiate(a));
                array.Wait(); array.Dispose();
                //LoadConvertedTable = true;
                //StateCP = false;
                try
                {
                    if (TableZero(Table))
                        OpTableZero(true);


                }
                catch (Exception t)
                {
                    Log(t);
                    goto Begin4;
                }



                SetAndConfirmSyntax();

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                OpAfterAllTinking(ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                OrderPlate *= -1;

                BobSection = true;

                SetBoxTextWrite(Out);

                var array1 = Task.Factory.StartNew(() => DrawImageOfMain()); array1.Wait();


            }
            //BackgroundWorkerAllOp.RunWorkerAsync();
            //BackgroundWorkerSetNode.RunWorkerAsync();
            //BackgroundWorkerSetRefD.RunWorkerAsync();

        }
        void DrawImageOfMain()
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    RefrigtzDLL.AllDraw.DrawTable = true;
                }
                else
                {
                    QuantumRefrigiz.AllDraw.DrawTable = true;
                }
                SetPrictureBoxRefregitzInvalidate(PictureBoxRefrigtz);
                SetPrictureBoxRefregitzUpdate(PictureBoxRefrigtz);
            }
        }
        void GeneticAction()
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                    RefrigtzDLL.ThinkingChess.ThinkingRun = true;
                else
                    QuantumRefrigiz.ThinkingQuantumChess.ThinkingRun = true;
                StateGe = false;



                //if (OrderPlate == 1)

                //SetBoxText("\r\nMovments Number " + MovmentsNumber.ToString() + " is Gray OrderPlate!");
                //else
                //SetBoxText("\r\nMovments Number " + MovmentsNumber.ToString() + " is Brown OrderPlate!");
                //RefreshBoxText();
                Begin4:
                // if (OrderPlate == 1)
                //SetBoxText("\r\nThinking Begin By Bob!");
                //else
                //SetBoxText("\r\nThinking Begin By Alice!");
                //RefreshBoxText();
                Color a = Color.Gray;
                if (OrderPlate == -1)
                    a = Color.Brown;
                Draw.InitiateGenetic(1, 4, a, CloneATable(Table), OrderPlate, false);

                try
                {
                    //Table = Draw.TableList[0];
                }
                catch (Exception t)
                {
                    Log(t);
                    goto Begin4;
                }

                OrderPlate = OrderPlate * -1;
                Draw.SetRowColumn(0);
                if (!Quantum)
                    RefrigtzDLL.ChessRules.CurrentOrder = OrderPlate;
                else
                    QuantumRefrigiz.ChessRules.CurrentOrder = OrderPlate;

                //this.SetBoxText("\r\nThinking Finished By Alice!");
                //RefreshBoxText();
                if (!Quantum)
                {
                    RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(Table));
                    if (RefrigtzDLL.AllDraw.TableListAction.Count >= 1)
                    {
                        RefrigtzDLL.ChessGeneticAlgorithm R = new RefrigtzDLL.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        if (R.FindGenToModified(RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2], RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1], RefrigtzDLL.AllDraw.TableListAction, 0, OrderPlate, true))
                        {
                            bool HitVal = false;
                            int Hit = RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                            if (Hit != 0)
                                HitVal = true;
                            bool Convert = false;
                            if (OrderPlate == 1)
                            {
                                if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                {
                                    if (R.CromosomColumn == 7)
                                        Convert = true;
                                }
                                if ((RefrigtzDLL.ChessRules.SmallKingCastleGray || RefrigtzDLL.ChessRules.BigKingCastleGray) && (!RefrigtzDLL.ChessRules.CastleActGray))
                                    RefrigtzDLL.ChessRules.CastleActGray = true;
                                RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActGray, Convert);
                            }
                            else
                            {
                                if (RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                {
                                    if (R.CromosomColumn == 0)
                                        Convert = true;
                                }
                                if ((RefrigtzDLL.ChessRules.SmallKingCastleBrown || RefrigtzDLL.ChessRules.BigKingCastleBrown) && (!RefrigtzDLL.ChessRules.CastleActBrown))
                                    RefrigtzDLL.ChessRules.CastleActBrown = true;

                                RefrigtzDLL.AllDraw.SyntaxToWrite = (new RefrigtzDLL.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, RefrigtzDLL.AllDraw.TableListAction[RefrigtzDLL.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, RefrigtzDLL.ChessRules.CastleActBrown, Convert);
                            }
                            SetBoxStatistic(RefrigtzDLL.AllDraw.SyntaxToWrite);
                            RefreshBoxStatistic();
                        }
                    }
                    if (OrderPlate == 1)
                    {
                        BrownTimer.StopTime();
                        GrayTimer.StartTime("GrayTimer");
                    }
                    else
                    {
                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");

                    }

                    using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                    {
                        soundClick.Play();
                        //soundClick.Dispose();
                    }

                    StateGe = true;
                    InsertTableAtDatabase(Table);
                    RefrigtzDLL.ThinkingChess.ThinkingRun = false;
                }
                else
                {
                    QuantumRefrigiz.AllDraw.TableListAction.Add(CloneATable(Table));
                    if (QuantumRefrigiz.AllDraw.TableListAction.Count >= 1)
                    {
                        QuantumRefrigiz.ChessGeneticAlgorithm R = new QuantumRefrigiz.ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                        if (R.FindGenToModified(QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2], QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1], QuantumRefrigiz.AllDraw.TableListAction, 0, OrderPlate, true))
                        {
                            bool HitVal = false;
                            int Hit = QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRow, R.CromosomColumn];
                            if (Hit != 0)
                                HitVal = true;
                            bool Convert = false;
                            if (OrderPlate == 1)
                            {
                                if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == 1)
                                {
                                    if (R.CromosomColumn == 7)
                                        Convert = true;
                                }
                                if ((QuantumRefrigiz.ChessRules.SmallKingCastleGray || QuantumRefrigiz.ChessRules.BigKingCastleGray) && (!QuantumRefrigiz.ChessRules.CastleActGray))
                                    QuantumRefrigiz.ChessRules.CastleActGray = true;
                                QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActGray, Convert);
                            }
                            else
                            {
                                if (QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 1][R.CromosomRow, R.CromosomColumn] == -1)
                                {
                                    if (R.CromosomColumn == 0)
                                        Convert = true;
                                }
                                if ((QuantumRefrigiz.ChessRules.SmallKingCastleBrown || QuantumRefrigiz.ChessRules.BigKingCastleBrown) && (!QuantumRefrigiz.ChessRules.CastleActBrown))
                                    QuantumRefrigiz.ChessRules.CastleActBrown = true;

                                QuantumRefrigiz.AllDraw.SyntaxToWrite = (new QuantumRefrigiz.ChessRules(0, OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged)).CreateStatistic(ArrangmentsChanged, CloneATable(Table), MovmentsNumber, QuantumRefrigiz.AllDraw.TableListAction[QuantumRefrigiz.AllDraw.TableListAction.Count - 2][R.CromosomRowFirst, R.CromosomColumnFirst], R.CromosomColumn, R.CromosomRow, HitVal, Hit, QuantumRefrigiz.ChessRules.CastleActBrown, Convert);
                            }
                            SetBoxStatistic(QuantumRefrigiz.AllDraw.SyntaxToWrite);
                            RefreshBoxStatistic();
                        }
                    }
                    if (OrderPlate == 1)
                    {
                        BrownTimer.StopTime();
                        GrayTimer.StartTime("GrayTimer");
                    }
                    else
                    {
                        GrayTimer.StopTime();
                        BrownTimer.StartTime("BrownTimer");

                    }

                    using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                    {
                        soundClick.Play();
                        //soundClick.Dispose();
                    }

                    StateGe = true;
                    InsertTableAtDatabase(Table);
                    QuantumRefrigiz.ThinkingQuantumChess.ThinkingRun = false;
                }
                if (t4.IsAlive)
                    new Syncronization(t4, 1);
            }
        }
        //Bob Section of Computer By Computer Thinking.
        void BobAction()
        {
            //BackgroundWorkerAllOp.CancelAsync();
            //BackgroundWorkerSetNode.CancelAsync();
            //BackgroundWorkerSetRefD.CancelAsync();

            Object O = new Object();
            lock (O)
            {
                int[,] TableC = new int[8, 8];
                //LoadConvertedTable = false;
                if (!Quantum)
                    RefrigtzDLL.ThinkingChess.ThinkingRun = true;
                else
                    QuantumRefrigiz.ThinkingQuantumChess.ThinkingRun = true;
                Begin2:
                Color a = Color.Gray;
                bool StoreStateCC = false, StoreStateCP = false, StoreStateGe = false;
                OpBeforeThinking(ref a, ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);
                //FOUND = false;



                var array = Task.Factory.StartNew(() => Initiate(a));
                array.Wait(); array.Dispose();

                StateCC = StoreStateCC;
                StateCP = StoreStateCP;
                StateGe = StoreStateGe;



                try
                {
                    if (TableZero(CloneATable(Table)))
                        OpTableZero(true);



                }
                catch (Exception t)
                {
                    Log(t);
                    goto Begin2;
                }

                SetAndConfirmSyntax();

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                OpAfterAllTinking(ref StoreStateCC, ref StoreStateCP, ref StoreStateGe);

                //BobWithStockfishFinished = true;

                OrderPlate *= -1;

                SetBoxTextWrite(Out);


                var array1 = Task.Factory.StartNew(() => DrawImageOfMain()); array1.Wait();


            }
            //BackgroundWorkerAllOp.RunWorkerAsync();
            //BackgroundWorkerSetNode.RunWorkerAsync();
            // BackgroundWorkerSetRefD.RunWorkerAsync();

        }
        public void SetObjectNumbers(int[,] TabS)
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                {
                    Draw.SodierMidle = 0;
                    Draw.SodierHigh = 0;
                    Draw.ElefantMidle = 0;
                    Draw.ElefantHigh = 0;
                    Draw.HourseMidle = 0;
                    Draw.HourseHight = 0;
                    Draw.CastleMidle = 0;
                    Draw.CastleHigh = 0;
                    Draw.MinisterMidle = 0;
                    Draw.MinisterHigh = 0;
                    Draw.KingMidle = 0;
                    Draw.KingHigh = 0;
                    for (int h = 0; h < 8; h++)
                    {
                        for (int s = 0; s < 8; s++)
                        {
                            if (TabS[h, s] == 1)
                            {
                                Draw.SodierMidle++;
                                Draw.SodierHigh++;
                            }
                            else if (TabS[h, s] == 2)
                            {
                                Draw.ElefantMidle++;
                                Draw.ElefantHigh++;
                            }
                            else if (TabS[h, s] == 3)
                            {
                                Draw.HourseMidle++;
                                Draw.HourseHight++;
                            }
                            else if (TabS[h, s] == 4)
                            {
                                Draw.CastleMidle++;
                                Draw.CastleHigh++;
                            }
                            else if (TabS[h, s] == 5)
                            {
                                Draw.MinisterMidle++;
                                Draw.MinisterHigh++;
                            }
                            else if (TabS[h, s] == 6)
                            {
                                Draw.KingMidle++;
                                Draw.KingHigh++;
                            }
                            else
                                if (TabS[h, s] == -1)
                            {
                                Draw.SodierHigh++;
                            }
                            else if (TabS[h, s] == -2)
                            {
                                Draw.ElefantHigh++;
                            }
                            else if (TabS[h, s] == -3)
                            {
                                Draw.HourseHight++;
                            }
                            else if (TabS[h, s] == -4)
                            {
                                Draw.CastleHigh++;
                            }
                            else if (TabS[h, s] == -5)
                            {

                                Draw.MinisterHigh++;
                            }
                            else if (TabS[h, s] == -6)
                            {
                                Draw.KingHigh++;
                            }
                        }
                    }
                }
                else
                {
                    DrawQ.SodierMidle = 0;
                    DrawQ.SodierHigh = 0;
                    DrawQ.ElefantMidle = 0;
                    DrawQ.ElefantHigh = 0;
                    DrawQ.HourseMidle = 0;
                    DrawQ.HourseHight = 0;
                    DrawQ.CastleMidle = 0;
                    DrawQ.CastleHigh = 0;
                    DrawQ.MinisterMidle = 0;
                    DrawQ.MinisterHigh = 0;
                    DrawQ.KingMidle = 0;
                    DrawQ.KingHigh = 0;
                    for (int h = 0; h < 8; h++)
                    {
                        for (int s = 0; s < 8; s++)
                        {
                            if (TabS[h, s] == 1)
                            {
                                DrawQ.SodierMidle++;
                                DrawQ.SodierHigh++;
                            }
                            else if (TabS[h, s] == 2)
                            {
                                DrawQ.ElefantMidle++;
                                DrawQ.ElefantHigh++;
                            }
                            else if (TabS[h, s] == 3)
                            {
                                DrawQ.HourseMidle++;
                                DrawQ.HourseHight++;
                            }
                            else if (TabS[h, s] == 4)
                            {
                                DrawQ.CastleMidle++;
                                DrawQ.CastleHigh++;
                            }
                            else if (TabS[h, s] == 5)
                            {
                                DrawQ.MinisterMidle++;
                                DrawQ.MinisterHigh++;
                            }
                            else if (TabS[h, s] == 6)
                            {
                                DrawQ.KingMidle++;
                                DrawQ.KingHigh++;
                            }
                            else
                                if (TabS[h, s] == -1)
                            {
                                DrawQ.SodierHigh++;
                            }
                            else if (TabS[h, s] == -2)
                            {
                                DrawQ.ElefantHigh++;
                            }
                            else if (TabS[h, s] == -3)
                            {
                                DrawQ.HourseHight++;
                            }
                            else if (TabS[h, s] == -4)
                            {
                                DrawQ.CastleHigh++;
                            }
                            else if (TabS[h, s] == -5)
                            {

                                DrawQ.MinisterHigh++;
                            }
                            else if (TabS[h, s] == -6)
                            {
                                DrawQ.KingHigh++;
                            }
                        }
                    }
                }
            }
        }
        //Hit Reconstruction of Table.
        /*void HitRecustruct()
        {
            if (RefrigtzDLL.ChessRules.ExistInDestinationEnemy)
            {
                if (System.Math.Abs(CurrentKind) == 1)
                {
                    for (int i = Draw.SodierMidle; i < Draw.SodierHigh; i++)
                    {
                        try
                        {
                            if (Draw.SolderesOnTable[Soldier].Row == Draw.SolderesOnTable[i].Row && Draw.SolderesOnTable[Soldier].Column == Draw.SolderesOnTable[i].Column)
                            {
                                Draw.SolderesOnTable[i] = null;
                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                return;
                            }
                        }
                        catch (Exception t)
                        {
                            Log(t);
                        }
                    }
                    for (int i = 0; i < Draw.ElefantHigh; i++)
                    {
                        try
                        {
                            if (Draw.SolderesOnTable[Soldier].Row == Draw.ElephantOnTable[i].Row && Draw.SolderesOnTable[Soldier].Column == Draw.ElephantOnTable[i].Column)
                            {
                                Draw.ElephantOnTable[i] = null;
                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                return;
                            }
                        }
                        catch (Exception t)
                        {
                            Log(t);
                        }
                    }
                    for (int i = 0; i < Draw.HourseHight; i++)
                    {
                        try
                        {
                            if (Draw.SolderesOnTable[Soldier].Row == Draw.HoursesOnTable[i].Row && Draw.SolderesOnTable[Soldier].Column == Draw.HoursesOnTable[i].Column)
                            {
                                Draw.HoursesOnTable[i] = null;
                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                return;
                            }
                        }
                        catch (Exception t)
                        {
                            Log(t);
                        }
                    }
                    for (int i = 0; i < Draw.CastleHigh; i++)
                    {
                        try
                        {
                            if (Draw.SolderesOnTable[Soldier].Row == Draw.CastlesOnTable[i].Row && Draw.SolderesOnTable[Soldier].Column == Draw.CastlesOnTable[i].Column)
                            {
                                Draw.CastlesOnTable[i] = null;
                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                return;
                            }
                        }
                        catch (Exception t)
                        {
                            Log(t);
                        }
                    }
                    for (int i = 0; i < Draw.MinisterHigh; i++)
                    {
                        try
                        {
                            if (Draw.SolderesOnTable[Soldier].Row == Draw.MinisterOnTable[i].Row && Draw.SolderesOnTable[Soldier].Column == Draw.MinisterOnTable[i].Column)
                            {
                                Draw.MinisterOnTable[i] = null;
                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                return;
                            }
                        }
                        catch (Exception t)
                        {
                            Log(t);
                        }
                    }
                    for (int i = 0; i < Draw.KingHigh; i++)
                    {
                        try
                        {
                            if (Draw.SolderesOnTable[Soldier].Row == Draw.KingOnTable[i].Row && Draw.SolderesOnTable[Soldier].Column == Draw.KingOnTable[i].Column)
                            {
                                Draw.KingOnTable[i] = null;
                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                return;
                            }
                        }
                        catch (Exception t)
                        {
                            Log(t);
                        }
                    }
                }
                else
                    if (System.Math.Abs(CurrentKind) == 2)
                    {

                        for (int i = 0; i < Draw.SodierHigh; i++)
                        {
                            try
                            {
                                if (Draw.ElephantOnTable[Elefant].Row == Draw.SolderesOnTable[i].Row && Draw.ElephantOnTable[Elefant].Column == Draw.SolderesOnTable[i].Column)
                                {
                                    Draw.SolderesOnTable[i] = null;
                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                    return;
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                        for (int i = Draw.ElefantMidle; i < Draw.ElefantHigh; i++)
                        {
                            try
                            {
                                if (Draw.ElephantOnTable[Elefant].Row == Draw.ElephantOnTable[i].Row && Draw.ElephantOnTable[Elefant].Column == Draw.ElephantOnTable[i].Column)
                                {
                                    Draw.ElephantOnTable[i] = null;
                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                    return;
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                        for (int i = 0; i < Draw.HourseHight; i++)
                        {
                            try
                            {
                                if (Draw.ElephantOnTable[Elefant].Row == Draw.HoursesOnTable[i].Row && Draw.ElephantOnTable[Elefant].Column == Draw.HoursesOnTable[i].Column)
                                {
                                    Draw.HoursesOnTable[i] = null;
                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                    return;
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                        for (int i = 0; i < Draw.CastleHigh; i++)
                        {
                            try
                            {

                                if (Draw.ElephantOnTable[Elefant].Row == Draw.CastlesOnTable[i].Row && Draw.ElephantOnTable[Elefant].Column == Draw.CastlesOnTable[i].Column)
                                {
                                    Draw.CastlesOnTable[i] = null;
                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                    return;
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                        for (int i = 0; i < Draw.MinisterHigh; i++)
                        {
                            try
                            {
                                if (Draw.ElephantOnTable[Elefant].Row == Draw.MinisterOnTable[i].Row && Draw.ElephantOnTable[Elefant].Column == Draw.MinisterOnTable[i].Column)
                                {
                                    Draw.MinisterOnTable[i] = null;
                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                    return;
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }
                        for (int i = 0; i < Draw.KingHigh; i++)
                        {
                            try
                            {
                                if (Draw.ElephantOnTable[Elefant].Row == Draw.KingOnTable[i].Row && Draw.ElephantOnTable[Elefant].Column == Draw.KingOnTable[i].Column)
                                {
                                    Draw.KingOnTable[i] = null;
                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                    return;
                                }
                            }
                            catch (Exception t)
                            {
                                Log(t);
                            }
                        }

                    }
                    else
                        if (System.Math.Abs(CurrentKind) == 3)
                        {

                            for (int i = 0; i < Draw.SodierHigh; i++)
                            {
                                try
                                {
                                    if (Draw.HoursesOnTable[Hourse].Row == Draw.SolderesOnTable[i].Row && Draw.HoursesOnTable[Hourse].Column == Draw.SolderesOnTable[i].Column)
                                    {
                                        Draw.SolderesOnTable[i] = null;
                                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                        return;
                                    }
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                            }
                            for (int i = 0; i < Draw.ElefantHigh; i++)
                            {
                                try
                                {
                                    if (Draw.HoursesOnTable[Hourse].Row == Draw.ElephantOnTable[i].Row && Draw.HoursesOnTable[Hourse].Column == Draw.ElephantOnTable[i].Column)
                                    {
                                        Draw.ElephantOnTable[i] = null;
                                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                        return;
                                    }
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                            }
                            for (int i = Draw.HourseMidle; i < Draw.HourseHight; i++)
                            {
                                try
                                {
                                    if (Draw.HoursesOnTable[Hourse].Row == Draw.HoursesOnTable[i].Row && Draw.HoursesOnTable[Hourse].Column == Draw.HoursesOnTable[i].Column)
                                    {
                                        Draw.HoursesOnTable[i] = null;
                                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                        return;
                                    }
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                            }
                            for (int i = 0; i < Draw.CastleHigh; i++)
                            {
                                try
                                {
                                    if (Draw.HoursesOnTable[Hourse].Row == Draw.CastlesOnTable[i].Row && Draw.HoursesOnTable[Hourse].Column == Draw.CastlesOnTable[i].Column)
                                    {
                                        Draw.CastlesOnTable[i] = null;
                                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                        return;
                                    }
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                            }

                            for (int i = 0; i < Draw.MinisterHigh; i++)
                            {
                                try
                                {
                                    if (Draw.HoursesOnTable[Hourse].Row == Draw.MinisterOnTable[i].Row && Draw.HoursesOnTable[Hourse].Column == Draw.MinisterOnTable[i].Column)
                                    {
                                        Draw.MinisterOnTable[i] = null;
                                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                        return;
                                    }
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                            }
                            for (int i = 0; i < Draw.KingHigh; i++)
                            {
                                try
                                {
                                    if (Draw.HoursesOnTable[Hourse].Row == Draw.KingOnTable[i].Row && Draw.HoursesOnTable[Hourse].Column == Draw.KingOnTable[i].Column)
                                    {
                                        Draw.KingOnTable[i] = null;
                                        Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                        return;
                                    }
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                            }

                        }
                        else
                            if (System.Math.Abs(CurrentKind) == 4)
                            {

                                for (int i = 0; i < Draw.SodierHigh; i++)
                                {
                                    try
                                    {
                                        if (Draw.CastlesOnTable[Castle].Row == Draw.SolderesOnTable[i].Row && Draw.CastlesOnTable[Castle].Column == Draw.SolderesOnTable[i].Column)
                                        {
                                            Draw.SolderesOnTable[i] = null;
                                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                            return;
                                        }
                                    }
                                    catch (Exception t)
                                    {
                                        Log(t);
                                    }
                                }
                                for (int i = 0; i < Draw.ElefantHigh; i++)
                                {
                                    try
                                    {
                                        if (Draw.CastlesOnTable[Castle].Row == Draw.ElephantOnTable[i].Row && Draw.CastlesOnTable[Castle].Column == Draw.ElephantOnTable[i].Column)
                                        {
                                            Draw.ElephantOnTable[i] = null;
                                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                            return;
                                        }
                                    }
                                    catch (Exception t)
                                    {
                                        Log(t);
                                    }
                                }

                                for (int i = 0; i < Draw.HourseHight; i++)
                                {
                                    try
                                    {
                                        if (Draw.CastlesOnTable[Castle].Row == Draw.HoursesOnTable[i].Row && Draw.CastlesOnTable[Castle].Column == Draw.HoursesOnTable[i].Column)
                                        {
                                            Draw.HoursesOnTable[i] = null;
                                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                            return;
                                        }
                                    }
                                    catch (Exception t)
                                    {
                                        Log(t);
                                    }
                                }
                                for (int i = Draw.CastleMidle; i < Draw.CastleHigh; i++)
                                {
                                    try
                                    {
                                        if (Draw.CastlesOnTable[Castle].Row == Draw.CastlesOnTable[i].Row && Draw.CastlesOnTable[Castle].Column == Draw.CastlesOnTable[i].Column)
                                        {
                                            Draw.CastlesOnTable[i] = null;
                                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                            return;
                                        }
                                    }
                                    catch (Exception t)
                                    {
                                        Log(t);
                                    }
                                }
                                for (int i = 0; i < Draw.MinisterHigh; i++)
                                {
                                    try
                                    {
                                        if (Draw.CastlesOnTable[Castle].Row == Draw.MinisterOnTable[i].Row && Draw.CastlesOnTable[Castle].Column == Draw.MinisterOnTable[i].Column)
                                        {
                                            Draw.MinisterOnTable[i] = null;
                                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                            return;
                                        }
                                    }
                                    catch (Exception t)
                                    {
                                        Log(t);
                                    }
                                }
                                for (int i = 0; i < Draw.KingHigh; i++)
                                {
                                    try
                                    {
                                        if (Draw.CastlesOnTable[Castle].Row == Draw.KingOnTable[i].Row && Draw.CastlesOnTable[Castle].Column == Draw.KingOnTable[i].Column)
                                        {
                                            Draw.KingOnTable[i] = null;
                                            Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                            return;
                                        }
                                    }
                                    catch (Exception t)
                                    {
                                        Log(t);
                                    }
                                }
                            }
                            else
                                if (System.Math.Abs(CurrentKind) == 5)
                                {

                                    for (int i = 0; i < Draw.SodierHigh; i++)
                                    {
                                        try
                                        {
                                            if (Draw.MinisterOnTable[Minister].Row == Draw.SolderesOnTable[i].Row && Draw.MinisterOnTable[Minister].Column == Draw.SolderesOnTable[i].Column)
                                            {
                                                Draw.SolderesOnTable[i] = null;
                                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                return;
                                            }
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    for (int i = 0; i < Draw.ElefantHigh; i++)
                                    {
                                        try
                                        {
                                            if (Draw.MinisterOnTable[Minister].Row == Draw.ElephantOnTable[i].Row && Draw.MinisterOnTable[Minister].Column == Draw.ElephantOnTable[i].Column)
                                            {
                                                Draw.ElephantOnTable[i] = null;
                                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                return;
                                            }
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }

                                    for (int i = 0; i < Draw.HourseHight; i++)
                                    {
                                        try
                                        {
                                            if (Draw.MinisterOnTable[Minister].Row == Draw.HoursesOnTable[i].Row && Draw.MinisterOnTable[Minister].Column == Draw.HoursesOnTable[i].Column)
                                            {
                                                Draw.HoursesOnTable[i] = null;
                                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                return;
                                            }
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }

                                    for (int i = 0; i < Draw.CastleHigh; i++)
                                    {
                                        try
                                        {
                                            if (Draw.MinisterOnTable[Minister].Row == Draw.CastlesOnTable[i].Row && Draw.MinisterOnTable[Minister].Column == Draw.CastlesOnTable[i].Column)
                                            {
                                                Draw.CastlesOnTable[i] = null;
                                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                return;
                                            }
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    for (int i = Draw.MinisterMidle; i < Draw.MinisterHigh; i++)
                                    {
                                        try
                                        {
                                            if (Draw.MinisterOnTable[Minister].Row == Draw.MinisterOnTable[i].Row && Draw.MinisterOnTable[Minister].Column == Draw.MinisterOnTable[i].Column)
                                            {
                                                Draw.MinisterOnTable[i] = null;
                                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                return;
                                            }
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                    for (int i = 0; i < Draw.KingHigh; i++)
                                    {
                                        try
                                        {
                                            if (Draw.MinisterOnTable[Minister].Row == Draw.KingOnTable[i].Row && Draw.MinisterOnTable[Minister].Column == Draw.KingOnTable[i].Column)
                                            {
                                                Draw.KingOnTable[i] = null;
                                                Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                return;
                                            }
                                        }
                                        catch (Exception t)
                                        {
                                            Log(t);
                                        }
                                    }
                                }
                                else
                                    if (System.Math.Abs(CurrentKind) == 6)
                                    {

                                        for (int i = 0; i < Draw.SodierHigh; i++)
                                        {
                                            try
                                            {
                                                if (Draw.KingOnTable[King].Row == Draw.SolderesOnTable[i].Row && Draw.KingOnTable[King].Column == Draw.SolderesOnTable[i].Column)
                                                {
                                                    Draw.SolderesOnTable[i] = null;
                                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                    return;
                                                }
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        for (int i = 0; i < Draw.ElefantHigh; i++)
                                        {
                                            try
                                            {
                                                if (Draw.KingOnTable[King].Row == Draw.ElephantOnTable[i].Row && Draw.KingOnTable[King].Column == Draw.ElephantOnTable[i].Column)
                                                {
                                                    Draw.ElephantOnTable[i] = null;
                                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                    return;
                                                }
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        for (int i = 0; i < Draw.HourseHight; i++)
                                        {
                                            try
                                            {
                                                if (Draw.KingOnTable[King].Row == Draw.HoursesOnTable[i].Row && Draw.KingOnTable[King].Column == Draw.HoursesOnTable[i].Column)
                                                {
                                                    Draw.HoursesOnTable[i] = null;
                                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                    return;
                                                }
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        for (int i = 0; i < Draw.CastleHigh; i++)
                                        {
                                            try
                                            {
                                                if (Draw.KingOnTable[King].Row == Draw.CastlesOnTable[i].Row && Draw.KingOnTable[King].Column == Draw.CastlesOnTable[i].Column)
                                                {
                                                    Draw.CastlesOnTable[i] = null;
                                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                    return;
                                                }
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        for (int i = 0; i < Draw.MinisterHigh; i++)
                                        {
                                            try
                                            {
                                                if (Draw.KingOnTable[King].Row == Draw.MinisterOnTable[i].Row && Draw.KingOnTable[King].Column == Draw.MinisterOnTable[i].Column)
                                                {
                                                    Draw.MinisterOnTable[i] = null;
                                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                    return;
                                                }
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                        for (int i = Draw.KingMidle; i < Draw.KingHigh; i++)
                                        {
                                            try
                                            {
                                                if (Draw.KingOnTable[King].Row == Draw.KingOnTable[i].Row && Draw.KingOnTable[King].Column == Draw.KingOnTable[i].Column)
                                                {
                                                    Draw.KingOnTable[i] = null;
                                                    Table[(int)RowClickP, (int)ColumnClickP] = 0;
                                                    return;
                                                }
                                            }
                                            catch (Exception t)
                                            {
                                                Log(t);
                                            }
                                        }
                                    }
            }
        }
         */
        //About Tool Strip Calling.
        private void AboutToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                AboutBoxChessRefregitz ChessRefrigitz = new AboutBoxChessRefregitz();
                ChessRefrigitz.ShowDialog();
                ChessRefrigitz.Dispose();
            }
        }
        //Mouse Click Form Refregitz PictureBox Event Handling.
        private void PictureBoxRefrigtz_MouseClick(object sender, MouseEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                MouseClicked = true;
                for (int i = 0; i < 8; i++)
                {
                    for (int j = 0; j < 8; j++)
                    {
                        try
                        {
                            if (!Quantum)
                            {
                                if ((System.Math.Abs(e.X - i * (PictureBoxRefrigtz.Image.Width / 8)) < PictureBoxRefrigtz.Image.Width / 8) && (System.Math.Abs(e.Y - j * (PictureBoxRefrigtz.Image.Height / 8)) < PictureBoxRefrigtz.Image.Height / 8))
                                {

                                    //if (!RefrigtzDLL.ThingsConverter.ClickOcurred)
                                    {

                                        if (RefrigtzDLL.AllDraw.MouseClick == 0)
                                        {
                                            RowClickP = i;
                                            ColumnClickP = j;
                                            for (int ii = 0; ii < Draw.SodierHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((Draw.SolderesOnTable[ii].Row == i & Draw.SolderesOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 1)
                                                    {
                                                        Soldier = ii;
                                                        RefrigtzDLL.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }

                                            }
                                            for (int ii = 0; ii < Draw.ElefantHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((Draw.ElephantOnTable[ii].Row == i & Draw.ElephantOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 2)
                                                    {
                                                        Elefant = ii;
                                                        RefrigtzDLL.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }

                                            }
                                            for (int ii = 0; ii < Draw.HourseHight; ii++)
                                            {
                                                try
                                                {
                                                    if ((Draw.HoursesOnTable[ii].Row == i & Draw.HoursesOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 3)
                                                    {
                                                        Hourse = ii;
                                                        RefrigtzDLL.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();

                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }
                                            }
                                            for (int ii = 0; ii < Draw.CastleHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((Draw.CastlesOnTable[ii].Row == i & Draw.CastlesOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 4)
                                                    {
                                                        Castle = ii;
                                                        RefrigtzDLL.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }
                                            }

                                            for (int ii = 0; ii < Draw.MinisterHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((Draw.MinisterOnTable[ii].Row == i & Draw.MinisterOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 5)
                                                    {
                                                        Minister = ii;
                                                        RefrigtzDLL.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }
                                            }

                                            for (int ii = 0; ii < Draw.KingHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((Draw.KingOnTable[ii].Row == i & Draw.KingOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 6)
                                                    {
                                                        King = ii;
                                                        RefrigtzDLL.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }

                                            }


                                        }
                                        else
                                        {
                                            if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                            {

                                                RowRealesed = i;
                                                ColumnRealeased = j;

                                                RowClick = i;
                                                ColumnClick = j;
                                                RefrigtzDLL.AllDraw.MouseClick++;
                                                //SetBoxText("\r\nObject Released.");
                                                //RefreshBoxText();

                                            }
                                            else
                                            {

                                                //Needing for Objects for fen string of stockfish
                                                if (!Stockfish)
                                                {
                                                    RowClick = -1;
                                                    ColumnClick = -1;
                                                    RowClickP = -1;
                                                    ColumnClickP = -1;
                                                    RowRealesed = -1;
                                                    ColumnRealeased = -1;
                                                }
                                                //////RefrigtzDLL.AllDraw.MouseClick = 0;
                                                //SetBoxText("\r\nObject Cleared.");
                                                //RefreshBoxText();

                                            }
                                        }
                                    }

                                    return;
                                }
                            }
                            else
                            {
                                if (System.Math.Abs(e.X - i * (PictureBoxRefrigtz.Image.Width / 8)) < PictureBoxRefrigtz.Image.Width / 8 && System.Math.Abs(e.Y - j * (PictureBoxRefrigtz.Image.Height / 8)) < PictureBoxRefrigtz.Image.Height / 8)
                                {

                                    //if (!QuantumRefrigiz.ThingsConverter.ClickOcurred)
                                    {

                                        if (QuantumRefrigiz.AllDraw.MouseClick == 0)
                                        {
                                            RowClickP = i;
                                            ColumnClickP = j;
                                            for (int ii = 0; ii < DrawQ.SodierHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((DrawQ.SolderesOnTable[ii].Row == i & DrawQ.SolderesOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 1)
                                                    {
                                                        Soldier = ii;
                                                        QuantumRefrigiz.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }

                                            }
                                            for (int ii = 0; ii < DrawQ.ElefantHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((DrawQ.ElephantOnTable[ii].Row == i & DrawQ.ElephantOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 2)
                                                    {
                                                        Elefant = ii;
                                                        QuantumRefrigiz.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }

                                            }
                                            for (int ii = 0; ii < DrawQ.HourseHight; ii++)
                                            {
                                                try
                                                {
                                                    if ((DrawQ.HoursesOnTable[ii].Row == i & DrawQ.HoursesOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 3)
                                                    {
                                                        Hourse = ii;
                                                        QuantumRefrigiz.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();

                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }
                                            }
                                            for (int ii = 0; ii < DrawQ.CastleHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((DrawQ.CastlesOnTable[ii].Row == i & DrawQ.CastlesOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 4)
                                                    {
                                                        Castle = ii;
                                                        QuantumRefrigiz.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }
                                            }

                                            for (int ii = 0; ii < DrawQ.MinisterHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((DrawQ.MinisterOnTable[ii].Row == i & DrawQ.MinisterOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 5)
                                                    {
                                                        Minister = ii;
                                                        QuantumRefrigiz.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }
                                            }

                                            for (int ii = 0; ii < DrawQ.KingHigh; ii++)
                                            {
                                                try
                                                {
                                                    if ((DrawQ.KingOnTable[ii].Row == i & DrawQ.KingOnTable[ii].Column == j) && System.Math.Abs(Table[i, j]) == 6)
                                                    {
                                                        King = ii;
                                                        QuantumRefrigiz.AllDraw.MouseClick++;
                                                        //SetBoxText("\r\nObject Selected.");
                                                        //RefreshBoxText();
                                                        return;
                                                    }
                                                }
                                                catch (Exception t)
                                                {
                                                    Log(t);
                                                }

                                            }


                                        }
                                        else
                                        {
                                            if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                                            {

                                                RowRealesed = i;
                                                ColumnRealeased = j;

                                                RowClick = i;
                                                ColumnClick = j;
                                                QuantumRefrigiz.AllDraw.MouseClick++;
                                                //SetBoxText("\r\nObject Released.");
                                                //RefreshBoxText();

                                            }
                                        }
                                    }


                                }
                            }
                        }
                        catch (Exception t)
                        {
                            Log(t);
                        }
                    }


                }
            }
        }

        //Mouse Movments of FormRefregitz PictureBox Event Handling.
        private void PictureBoxRefrigtz_MouseMove(object sender, MouseEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                DrawImageOfMain();

                try
                {

                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            if ((e != null) && (PictureBoxRefrigtz != null) && (PictureBoxRefrigtz.Image != null) && (System.Math.Abs(e.X - i * (PictureBoxRefrigtz.Image.Width / 8)) < PictureBoxRefrigtz.Image.Width / 8) && (System.Math.Abs(e.Y - j * (PictureBoxRefrigtz.Image.Height / 8)) < PictureBoxRefrigtz.Image.Height / 8))
                            {
                                if (!Quantum)
                                {
                                    if (RefrigtzDLL.AllDraw.MouseClick == 1)
                                    {

                                        ChessTable = PictureBoxRefrigtz.Image;
                                        g = Graphics.FromImage(ChessTable);

                                        for (int ii = 0; ii < PictureBoxRefrigtz.Image.Width; ii += PictureBoxRefrigtz.Image.Width / 8)
                                            for (int jj = 0; jj < PictureBoxRefrigtz.Image.Height; jj += PictureBoxRefrigtz.Image.Height / 8)
                                            {
                                                try
                                                {
                                                    if ((i >= 0) && (i < 8) && (j >= 0) && (j < 8) && ((int)(this.PictureBoxRefrigtz.Width / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Width / 8) < 8) && ((int)(this.PictureBoxRefrigtz.Height / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Height / 8) < 8)
                                                        )
                                                    {
                                                        if ((ii + jj) % 2 == 0)
                                                            g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\Black.jpg"), new Rectangle((int)ii, (int)jj, (int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8)));
                                                        else
                                                            g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\White.jpg"), new Rectangle((int)ii, (int)jj, (int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8)));
                                                    }

                                                }
                                                catch (Exception t) { Log(t); }




                                                Color a = Color.Gray;
                                                if (OrderPlate == -1)
                                                    a = Color.Brown;
                                                bool[,] Tab = new bool[8, 8];
                                                if (RowClickP != -1 && ColumnClickP != -1)
                                                    Tab = VeryFye(CloneATable(Table), OrderPlate, a);
                                                if (Tab != null)
                                                {
                                                    if (Tab[ii / (int)(PictureBoxRefrigtz.Image.Width / 8), jj / (int)(PictureBoxRefrigtz.Image.Height / 8)])
                                                    {
                                                        if (((int)(this.PictureBoxRefrigtz.Width / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Width / 8) < 8) && ((int)(this.PictureBoxRefrigtz.Height / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Height / 8) < 8 && ((int)(this.PictureBoxRefrigtz.Height) >= jj) && ((int)(this.PictureBoxRefrigtz.Width) >= ii)))
                                                        {
                                                            g.DrawString("*", new Font("Times New Roman", 50), new SolidBrush(Color.Red), new Rectangle(new Point(ii, jj), new Size((int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8))));
                                                        }
                                                    }
                                                }
                                            }

                                        PictureBoxRefrigtz.Image = ChessTable;
                                        g.Dispose(); g = null;

                                        if (RowRealesed == -1 && ColumnRealeased == -1 & RowRealesedP == -1 && ColumnRealeasedP == -1)
                                        {
                                            RowRealesed = i;
                                            ColumnRealeased = j;
                                            RowRealesedP = i;
                                            ColumnRealeasedP = j;

                                        }


                                    }
                                }
                                else
                                {
                                    if (QuantumRefrigiz.AllDraw.MouseClick == 1)
                                    {

                                        ChessTable = PictureBoxRefrigtz.Image;
                                        g = Graphics.FromImage(ChessTable);

                                        for (int ii = 0; ii < PictureBoxRefrigtz.Image.Width; ii += PictureBoxRefrigtz.Image.Width / 8)
                                            for (int jj = 0; jj < PictureBoxRefrigtz.Image.Height; jj += PictureBoxRefrigtz.Image.Height / 8)
                                            {
                                                try
                                                {
                                                    if ((i >= 0) && (i < 8) && (j >= 0) && (j < 8) && ((int)(this.PictureBoxRefrigtz.Width / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Width / 8) < 8) && ((int)(this.PictureBoxRefrigtz.Height / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Height / 8) < 8)
                                                        )
                                                    {
                                                        if ((ii + jj) % 2 == 0)
                                                            g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\Black.jpg"), new Rectangle((int)ii, (int)jj, (int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8)));
                                                        else
                                                            g.DrawImage(Image.FromFile(Root + "\\Images\\Program\\White.jpg"), new Rectangle((int)ii, (int)jj, (int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8)));
                                                    }

                                                }
                                                catch (Exception t) { Log(t); }




                                                Color a = Color.Gray;
                                                if (OrderPlate == -1)
                                                    a = Color.Brown;
                                                bool[,] Tab = new bool[8, 8];
                                                if (RowClickP != -1 && ColumnClickP != -1)
                                                    Tab = VeryFye(CloneATable(Table), OrderPlate, a);
                                                if (Tab != null)
                                                {
                                                    if (Tab[ii / (int)(PictureBoxRefrigtz.Image.Width / 8), jj / (int)(PictureBoxRefrigtz.Image.Height / 8)])
                                                    {
                                                        if (((int)(this.PictureBoxRefrigtz.Width / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Width / 8) < 8) && ((int)(this.PictureBoxRefrigtz.Height / 8) >= 0) && ((int)(this.PictureBoxRefrigtz.Height / 8) < 8 && ((int)(this.PictureBoxRefrigtz.Height) >= jj) && ((int)(this.PictureBoxRefrigtz.Width) >= ii)))
                                                        {
                                                            g.DrawString("*", new Font("Times New Roman", 50), new SolidBrush(Color.Red), new Rectangle(new Point(ii, jj), new Size((int)(this.PictureBoxRefrigtz.Width / 8), (int)(this.PictureBoxRefrigtz.Height / 8))));
                                                        }
                                                    }
                                                }
                                            }

                                        PictureBoxRefrigtz.Image = ChessTable;
                                        g.Dispose(); g = null;

                                        if (RowRealesed == -1 && ColumnRealeased == -1 & RowRealesedP == -1 && ColumnRealeasedP == -1)
                                        {
                                            RowRealesed = i;
                                            ColumnRealeased = j;
                                            RowRealesedP = i;
                                            ColumnRealeasedP = j;

                                        }


                                    }
                                }

                                RowRealesedP = RowRealesed;
                                ColumnRealeasedP = ColumnRealeased;
                                RowRealesed = i;
                                ColumnRealeased = j;
                                return;
                            }
                        }
                    }
                }
                catch (Exception t)
                {
                    Log(t);
                }
            }
        }
        //Computer By Computer tool Strip Menu Item Event Handlimng.
        private void ComputerWithComputerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                StateCC = true;
                if (OrderPlate == 1)
                {
                    BobSection = true;
                    AliceSection = false;
                    GrayTimer.StartTime("GrayTimer");
                }
                else
                {
                    BobSection = false;
                    AliceSection = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                //UpdateConfigurationTableVal = true;
                //UpdateConfigurationTable();
                AllDo = false;
            }
        }
        //Computer by Person Illegal name tool Strip Evnt Handling.
        private void ComputerWithComputerToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                BobSection = false;
                AliceSection = false;
                StateCC = false;
                StateGe = false;
                ComboBoxMaxLevel.Text = (PlatformHelper.ProcessorCount * 2 + 1).ToString();
                if (OrderPlate == 1 && Sec.RadioButtonGrayOrder.Checked)
                {
                    Person = true;
                    StateCP = true;
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (Sec.RadioButtonBrownOrder.Checked && OrderPlate == -1)
                {
                    Person = false;
                    StateCP = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                else
                {
                    StateCP = true;
                    Person = false;
                }
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "You";
                    label2.Text = "Refregiz";

                }
                else
                {
                    label1.Text = "Refregiz";
                    label2.Text = "You";
                }

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;


            }
        }
        //Button Next Game Analysis Click Event Handling.
        private void ButtonNext_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {         //if (!DisableTemporarlyTimerUpdate)
                {
                    try
                    {
                        if (MovmentsNumber < MaxCurrentMovmentsNumber)
                        {
                            //Increased a movments.

                            //Read Increased Movments.
                            Table = ReadTableMovmentNumber();
                            //Clear Table List of Draw.
                            Draw.TableList.Clear();
                            //Add Table to Table List.
                            Draw.TableList.Add(CloneATable(Table));
                            //Constructed a Draw All.
                            Draw.SetRowColumn(0);
                            //OutPut.ToString().
                            //SetBoxText("\r\nMovments Number " + MovmentsNumber.ToString() + " Fronted.");
                            //Refresh TextBox.
                            //RefreshBoxText();




                            //Sound a Music.
                            using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                            {
                                soundClick.Play();
                                //soundClick.Dispose();
                            }
                        }

                    }
                    catch (Exception t) { Log(t); }
                }
            }
        }
        //Previous Game Analysis Click Event Handling
        private void ButtonPrevious_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {         //if (!DisableTemporarlyTimerUpdate)
                {
                    try
                    {
                        if (MovmentsNumber >= 0)
                        {
                            MovmentsNumber--;
                            //Read Current Table List
                            Table = ReadTableMovmentNumber();
                            //Clear Current TableList.
                            Draw.TableList.Clear();
                            //Add Table To Table List
                            Draw.TableList.Add(CloneATable(Table));
                            //Construction of All Things and Thinkings.
                            Draw.SetRowColumn(0);
                            //Out Put
                            //SetBoxText("\r\nMovments Number " + MovmentsNumber.ToString() + " Backed.");
                            //Refresh TextBox.
                            //RefreshBoxText();




                            //Sound a Music.
                            using (SoundPlayer soundClick = new SoundPlayer(Root + "\\Music\\Click6.wav"))
                            {
                                soundClick.Play();
                                //soundClick.Dispose();
                            }
                            //Decreased a Movments.

                        }
                    }
                    catch (Exception t) { Log(t); }
                }
            }
        }
        //Mouse Double Click PictureBoxRefregitz Click Event Handlimng.
        private void PictureBoxRefrigtz_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (!Maximize)
                {
                    RowP = PictureBoxRefrigtz.Width;
                    ColP = PictureBoxRefrigtz.Height;
                    RowSource = this.Width;
                    ColumnSource = this.Height;
                    this.MaximumSize = new Size(1000, 700);
                    PictureBoxRefrigtz.MaximumSize = new Size(900, 600);

                    Maximize = true;
                }
                else
                {
                    this.MaximumSize = new Size(RowSource, ColumnSource);
                    PictureBoxRefrigtz.MaximumSize = new Size(RowP, ColP);

                    RowP = PictureBoxRefrigtz.Width;
                    ColP = PictureBoxRefrigtz.Height;
                    RowSource = this.Width;
                    ColumnSource = this.Height;

                    Maximize = false;
                }
            }
        }
        //New Game tool Strip Event Handling. 
        private void ToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                NewTable = true;
                this.Hide();
                StateCC = false;
                BobSection = false;
                AliceSection = false;
                StateCP = false;
                Person = false;
                FormRefrigtz New = new FormRefrigtz(false);
                New.ShowDialog();
                New.Dispose();
            }
        }
        //Leave FormRefregitz Event Handling. 
        private void FormRefrigtz_Leave(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    //UpdateConfigurationTableVal = true;

                    UpdateConfigurationTable();
                    bookConn.Close();
                    //oleDbCmd.Dispose();
                    bookConn.Dispose();
                    if (!Quantum)
                    {
                        RefrigtzDLL.ChessRules A = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        RefrigtzDLL.ChessRules AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        Color a = Color.Gray;
                        if (OrderPlate == -1)
                            a = Color.Brown;
                        if (OrderPlate == 1)
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        else
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        AA.Pat(CloneATable(Table), OrderPlate, a);
                        bool Exitting = false;
                        if (OrderPlate == 1 && (A.CheckMateGray || AA.PatBrown))
                            Exitting = true;
                        else
                            if (OrderPlate == -1 && (A.CheckMateBrown || AA.PatkGray))
                            Exitting = true;
                        if (Exitting || RemoveUncomStock)
                        {
                            try
                            {
                                File.Delete("Run.txt");
                            }
                            catch (Exception t) { Log(t); }
                            {
                                //UpdateConfigurationTableVal = true;
                                //UpdateConfigurationTable();
                                try
                                {
                                    if (AllOperate != null)
                                        AllOperate.Abort();
                                    if (t1 != null)
                                        t1.Abort();
                                    if (t2 != null)
                                        t2.Abort();
                                    if (t3 != null)
                                        t3.Abort();
                                    if (t4 != null)
                                        t4.Abort();
                                    //if (AllOperate != null)
                                    //    AllOperate.Abort();
                                    //if (tttt != null)
                                    //   tttt.Abort();
                                    //if (ttt != null)
                                    //    ttt.Abort();
                                    GrayTimer.StopTime();
                                    BrownTimer.StopTime();
                                    TimerText.StopTime();

                                    StateCC = false;
                                    StateCP = false;
                                    StateGe = false;
                                    Person = false;
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                                if (!Directory.Exists(Root + "\\Database\\Games"))
                                    Directory.CreateDirectory(Root + "\\Database\\Games");
                                int i = 0;
                                do { i++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                SetAllDrawKind();
                                //Set Configuration To True for some unknown reason!.
                                //UpdateConfigurationTableVal = true;                             
                                SetAllDrawKindString();
                                (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                Application.Exit();
                                return;
                            }
                        }
                    }
                    else
                    {
                        QuantumRefrigiz.ChessRules A = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        QuantumRefrigiz.ChessRules AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        Color a = Color.Gray;
                        if (OrderPlate == -1)
                            a = Color.Brown;
                        if (OrderPlate == 1)
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        else
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        AA.Pat(CloneATable(Table), OrderPlate, a);
                        bool Exitting = false;
                        if (OrderPlate == 1 && (A.CheckMateGray || AA.PatBrown))
                            Exitting = true;
                        else
                            if (OrderPlate == -1 && (A.CheckMateBrown || AA.PatkGray))
                            Exitting = true;
                        if (Exitting || RemoveUncomStock)
                        {
                            try
                            {
                                File.Delete("Run.txt");
                            }
                            catch (Exception t) { Log(t); }
                            {
                                //UpdateConfigurationTableVal = true;
                                //UpdateConfigurationTable();
                                try
                                {
                                    //if (AllOperate != null)
                                    // AllOperate.Abort();
                                    if (t1 != null)
                                        t1.Abort();
                                    if (t2 != null)
                                        t2.Abort();
                                    if (t3 != null)
                                        t3.Abort();
                                    if (t4 != null)
                                        t4.Abort();
                                    //if (AllOperate != null)
                                    ///    AllOperate.Abort();
                                    //if (tttt != null)
                                    //    tttt.Abort();
                                    //if (ttt != null)
                                    //    ttt.Abort();
                                    GrayTimer.StopTime();
                                    BrownTimer.StopTime();
                                    TimerText.StopTime();

                                    StateCC = false;
                                    StateCP = false;
                                    StateGe = false;
                                    Person = false;
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                                if (!Directory.Exists(Root + "\\Database\\Games"))
                                    Directory.CreateDirectory(Root + "\\Database\\Games");
                                int i = 0;
                                do { i++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                SetAllDrawKind();
                                //Set Configuration To True for some unknown reason!.
                                //UpdateConfigurationTableVal = true;                             
                                SetAllDrawKindString();
                                (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                Application.Exit();
                                return;
                            }
                        }
                    }
                    SetAllDrawKind();
                    //Set Configuration To True for some unknown reason!.
                    //UpdateConfigurationTableVal = true;                             
                    SetAllDrawKindString();

                    (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);

                    Application.Exit();
                }
                catch (Exception t) { Log(t); }

                Sec.Dispose();
                //Draw.THIS.Dispose();
                //THIs.Dispose();
                this.Dispose();
            }
        }
        //Exit ToolStrip Event Handling.
        private void ExitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {

                try
                {
                    if (AllOperate != null)
                        AllOperate.Abort();
                    if (BackgroundWorkerSetRefD.WorkerSupportsCancellation)
                        BackgroundWorkerSetRefD.CancelAsync();
                    if (BackgroundWorkerSetNode.WorkerSupportsCancellation)
                        BackgroundWorkerSetNode.CancelAsync();
                    if (BackgroundWorkerAllOp.WorkerSupportsCancellation)
                        BackgroundWorkerAllOp.CancelAsync();
                    GrayTimer.StopTime();
                    BrownTimer.StopTime();

                    PictureBoxTimerBrown.CancelAsync();
                    PictureBoxTimerGray.CancelAsync();
                    PictureBoxTimerGray.CancelAsync();
                    ////UpdateConfigurationTableVal = true;

                    UpdateConfigurationTable();
                    bool Disposingbook = false;
                    bool Disposingole = false;
                    if (bookConn != null)
                    {
                        bookConn.Close();
                        Disposingbook = true;
                    }
                    if (oleDbCmd != null)
                    {
                        oleDbCmd.Clone();
                        Disposingole = true;
                    }
                    if (Disposingbook)
                        //oleDbCmd.Dispose();
                        if (Disposingole)
                            bookConn.Dispose();
                    if (!Quantum)
                    {
                        RefrigtzDLL.ChessRules A = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        RefrigtzDLL.ChessRules AA = new RefrigtzDLL.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        Color a = Color.Gray;
                        if (OrderPlate == -1)
                            a = Color.Brown;
                        if (OrderPlate == 1)
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        else
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        AA.Pat(CloneATable(Table), OrderPlate, a);
                        bool Exitting = false;
                        if (OrderPlate == 1 && (A.CheckMateGray || AA.PatBrown))
                            Exitting = true;
                        else
                            if (OrderPlate == -1 && (A.CheckMateBrown || AA.PatkGray))
                            Exitting = true;
                        if (Exitting || RemoveUncomStock)
                        {
                            try
                            {
                                File.Delete("Run.txt");
                            }
                            catch (Exception t) { Log(t); }
                            {
                                //UpdateConfigurationTableVal = true;
                                //UpdateConfigurationTable();
                                try
                                {
                                    if (AllOperate != null)
                                        AllOperate.Abort();
                                    if (t1 != null)
                                        t1.Abort();
                                    if (t2 != null)
                                        t2.Abort();
                                    if (t3 != null)
                                        t3.Abort();
                                    if (t4 != null)
                                        t4.Abort();
                                    //if (AllOperate != null)
                                    //    AllOperate.Abort();
                                    //if (tttt != null)
                                    //    tttt.Abort();
                                    // if (ttt != null)
                                    //     ttt.Abort();
                                    GrayTimer.StopTime();
                                    BrownTimer.StopTime();
                                    TimerText.StopTime();

                                    StateCC = false;
                                    StateCP = false;
                                    StateGe = false;
                                    Person = false;
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                                if (!Directory.Exists(Root + "\\Database\\Games"))
                                    Directory.CreateDirectory(Root + "\\Database\\Games");
                                int i = 0;
                                do { i++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                SetAllDrawKind();
                                //Set Configuration To True for some unknown reason!.
                                //UpdateConfigurationTableVal = true;                             
                                SetAllDrawKindString();
                                (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                Application.Exit();
                                return;
                            }
                        }
                    }
                    else
                    {
                        QuantumRefrigiz.ChessRules A = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        QuantumRefrigiz.ChessRules AA = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged, -1, CloneATable(Table), OrderPlate, -1, -1);
                        Color a = Color.Gray;
                        if (OrderPlate == -1)
                            a = Color.Brown;
                        if (OrderPlate == 1)
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        else
                            A.CheckMate(CloneATable(Table), OrderPlate);
                        AA.Pat(CloneATable(Table), OrderPlate, a);
                        bool Exitting = false;
                        if (OrderPlate == 1 && (A.CheckMateGray || AA.PatBrown))
                            Exitting = true;
                        else
                            if (OrderPlate == -1 && (A.CheckMateBrown || AA.PatkGray))
                            Exitting = true;
                        if (Exitting || RemoveUncomStock)
                        {
                            try
                            {
                                File.Delete("Run.txt");
                            }
                            catch (Exception t) { Log(t); }
                            {
                                //UpdateConfigurationTableVal = true;
                                //UpdateConfigurationTable();
                                try
                                {
                                    if (AllOperate != null)
                                        AllOperate.Abort();
                                    if (t1 != null)
                                        t1.Abort();
                                    if (t2 != null)
                                        t2.Abort();
                                    if (t3 != null)
                                        t3.Abort();
                                    if (t4 != null)
                                        t4.Abort();
                                    //if (AllOperate != null)
                                    //    AllOperate.Abort();
                                    //if (tttt != null)
                                    //    tttt.Abort();
                                    //if (ttt != null)
                                    //    ttt.Abort();
                                    GrayTimer.StopTime();
                                    BrownTimer.StopTime();
                                    TimerText.StopTime();

                                    StateCC = false;
                                    StateCP = false;
                                    StateGe = false;
                                    Person = false;
                                }
                                catch (Exception t)
                                {
                                    Log(t);
                                }
                                if (!Directory.Exists(Root + "\\Database\\Games"))
                                    Directory.CreateDirectory(Root + "\\Database\\Games");
                                int i = 0;
                                do { i++; } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb"));
                                System.IO.File.Copy(Root + "\\Database\\CurrentBank.accdb", Root + "\\Database\\Games\\CurrentBank" + i.ToString() + ".accdb");
                                System.IO.File.Delete(Root + "\\Database\\CurrentBank.accdb");
                                SetAllDrawKind();
                                //Set Configuration To True for some unknown reason!.
                                //UpdateConfigurationTableVal = true;                             
                                SetAllDrawKindString();
                                (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                                Application.Exit();
                                return;
                            }
                        }
                    }
                    if (Quantum)
                    {
                        String SFile = "QBN.aqs";
                        if (File.Exists(SFile))
                            File.Delete(SFile);
                        for (int i = 0; i < 2; i++)
                            for (int jj = 0; jj < 8; jj++)
                                for (int kk = 0; kk < 8; kk++)
                                {
                                    System.IO.File.AppendAllText(SFile, QuantumRefrigiz.AllDraw.QuntumTable[i, jj, kk].ToString() + ",");
                                }
                    }
                    SetAllDrawKind();
                    //Set Configuration To True for some unknown reason!.
                    //UpdateConfigurationTableVal = true;                             
                    SetAllDrawKindString();

                    bool A1 = (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                    while (!A1) { }
                    ExitM = true;
                    Application.Exit();
                }
                catch (Exception t) { Log(t); }
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        public RefrigtzDLL.AllDraw RootFound()
        //#pragma warning restore CS0246 // The type or namespace name 'RefrigtzDLL' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (Draw != null)
                    {
                        while (Draw.AStarGreedyString != null)
                        {
                            Draw = Draw.AStarGreedyString;
                        }
                    }

                }
                catch (Exception t) { Log(t); }
                return Draw;
            }
        }
        //#pragma warning disable CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        public QuantumRefrigiz.AllDraw RootFoundQ()
        //#pragma warning restore CS0246 // The type or namespace name 'QuantumRefrigiz' could not be found (are you missing a using directive or an assembly reference?)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (DrawQ != null)
                    {
                        while (DrawQ.AStarGreedyString != null)
                        {
                            DrawQ = DrawQ.AStarGreedyString;
                        }
                    }

                }
                catch (Exception t) { Log(t); }
                return DrawQ;
            }
        }
        //AStarGreedy Heuristic CheckBox Checked Event Handling.
        private void CheckBoxAStarGreedyHeuristic_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    if (!Quantum)
                    {
                        RefrigtzDLL.AllDraw.DrawTable = false;
                        //if (!DisableTemporarlyTimerUpdate)
                        {
                            //RunInBackground();
                            if (CheckBoxAStarGreedyHeuristic.Checked)
                                AStarGreedyHeuristic = true;
                            else
                                AStarGreedyHeuristic = false;
                            if (MovmentsNumber == 1)
                            {
                                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                                arr.Start();
                                arr.Join();

                            }
                            //UpdateConfigurationTable();
                            //RunInFront();
                        }
                    }
                    else
                    {
                        QuantumRefrigiz.AllDraw.DrawTable = false;
                        //if (!DisableTemporarlyTimerUpdate)
                        {
                            //RunInBackground();
                            if (CheckBoxAStarGreedyHeuristic.Checked)
                                AStarGreedyHeuristic = true;
                            else
                                AStarGreedyHeuristic = false;
                            if (MovmentsNumber == 1)
                            {
                                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                                arr.Start();
                                arr.Join();
                            }
                            //UpdateConfigurationTable();
                            //RunInFront();
                        }
                    }
                    UpdateConfigurationTable();
                }
                catch (Exception tt)
                {
                    Log(tt);
                }
                Thread t = new Thread(new ThreadStart(OptionChanged));
                t.Start();
            }
        }
        //radio Button Checked Box Checked Event Handling.
        private void RadioButton1_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        //if (!DisableTemporarlyTimerUpdate)
                {
                    try
                    {
                        if (!Quantum)
                        {
                            //RunInBackground();
                            if (RadioButtonOriginalImages.Checked)
                                RefrigtzDLL.AllDraw.ImagesSubRoot = RefrigtzDLL.AllDraw.ImageRoot + "\\Original\\";
                        }
                        else
                        { //RunInBackground();
                            if (RadioButtonOriginalImages.Checked)
                                QuantumRefrigiz.AllDraw.ImagesSubRoot = QuantumRefrigiz.AllDraw.ImageRoot + "\\Original\\";
                        }
                        //UpdateConfigurationTable();
                        //RunInFront();
                    }
                    catch (Exception t) { Log(t); }
                }
            }
        }
        //Big Fitting Checked Box Checked Event Handling.
        private void RadioButtonBigFittingImages_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {         //if (!DisableTemporarlyTimerUpdate)
                {
                    try
                    {
                        if (!Quantum)
                        {
                            //RunInBackground();
                            if (RadioButtonBigFittingImages.Checked)
                                RefrigtzDLL.AllDraw.ImagesSubRoot = RefrigtzDLL.AllDraw.ImageRoot + "\\Fit\\Big\\";
                        }
                        else
                        {//RunInBackground();
                            if (RadioButtonBigFittingImages.Checked)
                                QuantumRefrigiz.AllDraw.ImagesSubRoot = QuantumRefrigiz.AllDraw.ImageRoot + "\\Fit\\Big\\";
                        }
                        //UpdateConfigurationTable();
                        //RunInFront();
                    }
                    catch (Exception t) { Log(t); }
                }
            }
        }
        //Samll Fitting Radio Button Checked Event Handling.
        private void RadioButtonSmallFittingImages_CheckedChanged(object sender, EventArgs e)
        {

            Object O = new Object();
            lock (O)
            {//if (!DisableTemporarlyTimerUpdate)
                {
                    try
                    {
                        if (!Quantum)
                        {                     //RunInBackground();
                            if (RadioButtonSmallFittingImages.Checked)
                                RefrigtzDLL.AllDraw.ImagesSubRoot = RefrigtzDLL.AllDraw.ImageRoot + "\\Fit\\Small\\";
                        }
                        else
                        {
                            if (RadioButtonSmallFittingImages.Checked)
                                QuantumRefrigiz.AllDraw.ImagesSubRoot = QuantumRefrigiz.AllDraw.ImageRoot + "\\Fit\\Small\\";
                        }
                        //UpdateConfigurationTable();
                        //RunInFront();
                    }
                    catch (Exception t) { Log(t); }
                }
            }
        }
        //Genetic Algorithm Game tool Strip Event Handling. 
        private void ToolStripMenuItem3_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                AllDo = false;
                StateGe = true;
                //UpdateConfigurationTableVal = true;
                //UpdateConfigurationTable();

            }
        }
        //Stop Button Click Event Handling.
        private void ButtonStop_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {          //RunInBackground();
                //SetBoxText("\r\nAll Stop!.");

            }
        }
        //AStarGreedy First Search Checked BOX Checked Event Handling.
        private void CheckBoxAStarGreadyFirstSearch_CheckedChanged(object sender, EventArgs e)
        {
            //if (!DisableTemporarlyTimerUpdate)
            {
                /*try
                {
                    RefrigtzDLL.AllDraw.AStarGreadyFirstSearch = true;
                    if (CheckBoxAStarGreadyFirstSearch.Checked)
                        CheckBoxUseDoubleTime.Visible = true;
                    else CheckBoxUseDoubleTime.Visible = false;
                }
                catch (Exception t) { Log(t); }

                 */
            }

        }
        //Hardes Games tool Strip Event Handling.
        private void HardestToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /* CheckBoxAStarGreedyHeuristic.Checked = true;
             CheckBoxPredictHuristci.Checked = true;
             CheckBoxAStarGreadyFirstSearch.Checked = true;
             CheckBoxBestMovments.Checked = false;
             CheckBoxOnlySelf.Checked = false;
             CheckBoxUsePenaltyRegradMechnisam.Checked = true;
           */  //RunInBackground();
               //UpdateConfigurationTable();
               //RunInFront();
        }
        //Medum Game tool Strip Event Handling .
        private void MedumToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /* CheckBoxAStarGreedyHeuristic.Checked = true;
             CheckBoxPredictHuristci.Checked = true;
             CheckBoxAStarGreadyFirstSearch.Checked = false;
             CheckBoxBestMovments.Checked = false;
             CheckBoxOnlySelf.Checked = false;
          */   //RunInBackground();
               //UpdateConfigurationTable();
               //RunInFront();

        }
        //Easest tool Strip Event Handling .
        private void EasestToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /* CheckBoxAStarGreedyHeuristic.Checked = false;

             CheckBoxPredictHuristci.Checked = false;
             CheckBoxAStarGreadyFirstSearch.Checked = false;
             if (!Quantum)
                 RefrigtzDLL.AllDraw.AStarGreadyFirstSearch = false;
             else
                 QuantumRefrigiz.AllDraw.AStarGreadyFirstSearch = false;
             CheckBoxBestMovments.Checked = false;
             CheckBoxOnlySelf.Checked = true;
          */   //RunInBackground();
               //UpdateConfigurationTable();
               //RunInFront();

        }
        //Maximum Size Form Refregitz Evemnt Handling Operation.
        private void FormRefrigtz_MaximumSizeChanged(object sender, EventArgs e)
        {

            Object O = new Object();
            lock (O)
            {
                if (t1.IsAlive)
                    new Syncronization(t1, 1);
                if (t2.IsAlive)
                    new Syncronization(t2, 1);
                if (t3.IsAlive)
                    new Syncronization(t3, 1);
                if (t4.IsAlive)
                    new Syncronization(t4, 1);




            }




            if (t1.IsBackground)
                new Syncronization(t1, 3);
            if (t2.IsBackground)
                new Syncronization(t2, 3);
            if (t3.IsBackground)
                new Syncronization(t3, 3);
            if (t4.IsBackground)
                new Syncronization(t4, 3);
        }
        //Leave toll Strips Event Handling Operation.
        private void MenuStripChessRefrigitz_Leave(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (t1 != null)
                    t1.Abort();
                if (t2 != null)
                    t2.Abort();
                if (t3 != null)
                    t3.Abort();
                if (t4 != null)
                    t4.Abort();


            }
        }
        //Puased Click Event Handling
        private void ButtonPause_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (PaintingPaused)
                {
                    try
                    {
                        PaintingPaused = true;
                        //RunInBackground();

                        ButtonPauseStart.Text = "Start";
                    }
                    catch (Exception t) { Log(t); }
                }
                else
                {
                    try
                    {
                        //RunInFront();
                        PaintingPaused = false;
                        ButtonPauseStart.Text = "Stop";
                    }
                    catch (Exception t) { Log(t); }
                }
            }
        }
        //Run In Backgroud Thread Handling Method.
        void RunInBackground()
        {

            Object O = new Object();
            lock (O)
            {
                if (t1.IsAlive)
                    new Syncronization(t1, 1);
                if (t2.IsAlive)
                    new Syncronization(t2, 1);
                if (t3.IsAlive)
                    new Syncronization(t3, 1);
                if (t4.IsAlive)
                    new Syncronization(t4, 1);

            }
        }
        //Run In Front Thread Handling Method.
        void RunInFront()
        {
            Object O = new Object();
            lock (O)
            {
                if (StateCC && AliceSection && t3.IsBackground)
                    new Syncronization(t3, 3);
                if (StateCC && BobSection && t2.IsBackground)
                    new Syncronization(t2, 3);
                if (((StateCP && !Person) || Blitz) && t1.IsBackground)
                    new Syncronization(t1, 3);
                if (t4.IsAlive && t4.IsBackground)
                    new Syncronization(t4, 3);

            }
        }

        private void ContinueAGameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    try
                    {
                        File.Delete(Root + "\\Run.txt");
                    }
                    catch (Exception t) { Log(t); }
                    FormKindOfGameContinue R = new FormKindOfGameContinue();
                    R.ShowDialog();
                    try
                    {
                        File.Delete(Root + "\\Database\\CurrentBank.accdb");
                    }
                    catch (Exception tt)
                    {
                        Log(tt);
                    }
                    File.Copy(Root + "\\Database\\Games\\" + R.ComboBoxDatabase.Text, Root + "\\Database\\CurrentBank.accdb");
                    try
                    {
                        File.Delete(Root + "\\Database\\Games\\" + R.ComboBoxDatabase.Text);
                    }
                    catch (Exception ttt)
                    {
                        Log(ttt);
                    }
                    _1 = R.RadioButtonComputerByComputer.Checked;
                    _2 = R.RadioButtonComputerByPerson.Checked;
                    _3 = R.RadioButtonGeneticGame.Checked;
                    _4 = R.RadioButtonBlitz.Checked;
                    String a = "";
                    if (_1) a += 1; else a += 0;
                    if (_2) a += 1; else a += 0;
                    if (_3) a += 1; else a += 0;
                    if (_4) a += 1; else a += 0;
                    File.WriteAllText(Root + "\\Run.txt", a);
                    String FolderLocation = Root;
                    int ExitCode = 0;

                    // Prepare the process to run

                    ProcessStartInfo start = new ProcessStartInfo();
                    // Prepare the process to run
                    // Enter in the command line arguments, everything you would enter after the executable name itself
                    start.Arguments = "";
                    // Enter the executable to run, including the complete path
                    start.FileName = "\"" + FolderLocation + "\\" + "Run.exe" + "\"";
                    // Do you want to show a console window?
                    start.WindowStyle = ProcessWindowStyle.Hidden;
                    start.CreateNoWindow = true;
                    start.UseShellExecute = true;// Do not 'Run the external process & wait for it to finish'

                    using (Process proc = Process.Start(start))
                    {
                        proc.WaitForExit();
                        // Retrieve the app's Exit code
                        ExitCode = proc.ExitCode;
                    }
                    Application.Exit();


                }
                catch (Exception p)
                {
                    Log(p);
                }
            }
        }

        private void StartGameToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void ProgressBarVerify_CursorChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (PreviousTime != null)
                {
                    DateTime Remaining = (new RefregitzReader.RefregitzReader(null)).ConvertRefregitzStringToDateTime(((1 - ((float)ProgressBarVerify.Value / (float)ProgressBarVerify.Maximum)) * (DateTime.Now.Ticks / 1000 - PreviousTime.Ticks / 1000)).ToString());
                    labelTimesRemaining.Text = (Remaining.Day.ToString() + ":" + Remaining.Minute.ToString() + ":" + Remaining.Second.ToString()) + " Remaining";
                    labelTimesRemaining.Update();
                    labelTimesRemaining.Invalidate();
                }
                else
                    PreviousTime = DateTime.Now;
            }
        }



        private void ProgressBarVerify_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                ProgressBarVerify_CursorChanged(sender, e);
            }
        }

        private void ProgressBarVerify_Validated(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                ProgressBarVerify_Click(sender, e);
            }
        }

        private void ToolStripMenuItem6_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        /*AStarGreedyHeuristic = false;
            CheckBoxAStarGreedyHeuristic.Checked = false;
            UsePenaltyRegardMechnisam = false;
            CheckBoxUsePenaltyRegradMechnisam.Checked = false;
            */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                }
                //TimerIniataite = true;
                //BobSection = false;
                //AliceSection = false;
                StateCP = true;
                StateCC = false;
                StateGe = false;

                ComboBoxMaxLevel.Text = (PlatformHelper.ProcessorCount).ToString();
                if (OrderPlate == 1)
                {
                    GrayTimer.StartTime("GrayTimer");

                    Blitz = true;
                }
                else if (OrderPlate == -1)
                {
                    BrownTimer.StartTime("BrownTimer");
                    Blitz = true;
                }
                else
                {
                    Blitz = false;
                }
                if (Sec.RadioButtonGrayOrder.Checked && OrderPlate == 1)
                    Person = true;
                else
                    if (Sec.RadioButtonBrownOrder.Checked && OrderPlate == -1)
                    Person = true;
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "You";
                    label2.Text = "Refregiz";

                }
                else
                {
                    label1.Text = "Refregiz";
                    label2.Text = "You";
                }

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;
            }
        }


        private void PictureBoxRefrigtz_MouseLeave(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                MouseClicked = false;
            }
        }

        private void CheckBoxIgnoreSelf_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {          /*if (CheckBoxIgnoreSelf.Checked)
                RefrigtzDLL.ThinkingChess.IInoreSelfObjects = true;
            else
                RefrigtzDLL.ThinkingChess.IInoreSelfObjects = false;
             */
            }
        }

        //AStarGreedy Movments Event Handl;ing Operations Method.
        private void CheckBoxAStarGreedyMovement_Enter(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (CheckBoxAStarGreedyMovement.Checked)
                {
                    if (!Quantum)
                    {
                        RefrigtzDLL.AllDraw.SodierMovments = 4;
                        RefrigtzDLL.AllDraw.ElefantMovments = 16;
                        RefrigtzDLL.AllDraw.HourseMovments = 8;
                        RefrigtzDLL.AllDraw.CastleMovments = 16;
                        RefrigtzDLL.AllDraw.MinisterMovments = 32;
                        RefrigtzDLL.AllDraw.KingMovments = 8;
                    }
                    else
                    {
                        QuantumRefrigiz.AllDraw.SodierMovments = 4;
                        QuantumRefrigiz.AllDraw.ElefantMovments = 16;
                        QuantumRefrigiz.AllDraw.HourseMovments = 8;
                        QuantumRefrigiz.AllDraw.CastleMovments = 16;
                        QuantumRefrigiz.AllDraw.MinisterMovments = 32;
                        QuantumRefrigiz.AllDraw.KingMovments = 8;
                    }

                }
                else
                {
                    if (!Quantum)
                    {
                        RefrigtzDLL.AllDraw.SodierMovments = 1;
                        RefrigtzDLL.AllDraw.ElefantMovments = 1;
                        RefrigtzDLL.AllDraw.HourseMovments = 1;
                        RefrigtzDLL.AllDraw.CastleMovments = 1;
                        RefrigtzDLL.AllDraw.MinisterMovments = 1;
                        RefrigtzDLL.AllDraw.KingMovments = 1;
                    }
                    else
                    {
                        QuantumRefrigiz.AllDraw.SodierMovments = 1;
                        QuantumRefrigiz.AllDraw.ElefantMovments = 1;
                        QuantumRefrigiz.AllDraw.HourseMovments = 1;
                        QuantumRefrigiz.AllDraw.CastleMovments = 1;
                        QuantumRefrigiz.AllDraw.MinisterMovments = 1;
                        QuantumRefrigiz.AllDraw.KingMovments = 1;
                    }
                }

            }
        }
        //Double Time Checked Box Checked Event Handling.
        private void CheckBoxUseDoubleTime_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    //RunInBackground();
                    /*if (RefrigtzDLL.AllDraw.AStarGreadyFirstSearch)
                    {
                        CheckBoxUseDoubleTime.Visible = true;

                        if (CheckBoxUseDoubleTime.Checked)
                        {
                            RefrigtzDLL.AllDraw.UseDoubleTime = true;
                        }
                    }
                    else
                    {
                        CheckBoxUseDoubleTime.Visible = false;
                        RefrigtzDLL.AllDraw.UseDoubleTime = false;
                    }

                     */
                    //UpdateConfigurationTable();
                    //RunInFront();
                }
                catch (Exception t) { Log(t); }

            }
        }
        //Penalty Regrad Mechansiam Checed Box Event Handling Operation Method.
        private void CheckBoxUsePenaltyRegradMechnisam_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                    RefrigtzDLL.AllDraw.DrawTable = false;
                else
                    QuantumRefrigiz.AllDraw.DrawTable = false;

                {
                    try
                    {
                        //RunInBackground();
                        if (CheckBoxUsePenaltyRegradMechnisam.Checked)
                            UsePenaltyRegardMechnisam = true;
                        else
                            UsePenaltyRegardMechnisam = false;
                        if (MovmentsNumber == 1)
                        {
                            Thread arr = new Thread(new ThreadStart(SetDrawFound));
                            arr.Start();
                            arr.Join();

                        }
                        //UpdateConfigurationTable();
                        //RunInFront();
                    }
                    catch (Exception t) { Log(t); }
                }
                UpdateConfigurationTable();
                Thread tt = new Thread(new ThreadStart(OptionChanged));
                tt.Start();
            }
        }
        //Dynamic Programming AStarGreedy First checked Event Handling.
        private void CheckBoxDynamicProgrammingAStarGreedyt_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        //if (!DisableTemporarlyTimerUpdate)
                {
                    try
                    {
                        /*        //RunInBackground();
                                if (CheckBoxDynamicProgrammingAStarGreedyt.Checked)
                                    RefrigtzDLL.AllDraw.DynamicAStarGreedytPrograming = true;
                                else
                                    RefrigtzDLL.AllDraw.DynamicAStarGreedytPrograming = false;
                                //UpdateConfigurationTable();
                                //RunInFront();
                         */
                    }
                    catch (Exception t) { Log(t); }
                }
            }

        }
        //Help Event Handling Show Method.
        private void ToolStripMenuItem3_Click_1(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                Help.ShowHelp(this, "Help.chm");

            }
        }
        object sender;
        EventArgs e;
        void Veryfi()
        {
            Object O = new Object();
            lock (O)
            {
                int Max = 0;
                do
                {
                    Max++;
                } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + Max.ToString() + ".accdb"));
                int iii = 0;
                do
                {
                    ProgressBarVerify_Validated(sender, e);

                    ProgressBarVerify.Value = (int)(((double)iii / (double)Max) * 100.0);
                    iii++;
                    String FileName = Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb";
                    //Read Last Table and Set MovementNumber
                    int Move = MovmentsNumber;
                    MovmentsNumber = 0;
                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            if (!Quantum)
                                RefrigtzDLL.AllDraw.TableVeryfy[i, j] = RefrigtzDLL.AllDraw.TableVeryfyConst[i, j];
                            else
                                QuantumRefrigiz.AllDraw.TableVeryfy[i, j] = QuantumRefrigiz.AllDraw.TableVeryfyConst[i, j];
                        }
                    }

                    try
                    {
                        VerifyTable(FileName, 0, ref MovmentsNumber);
                    }
                    catch (Exception t)
                    { Log(t); }
                    MovmentsNumber = Move;
                } while (System.IO.File.Exists(Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb"));
                //MovmentsNumber = 0;

            }
        }
        //Verify tool Srtip Games Folder Databases Event Handling Operation.
        private void VerifyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                this.sender = sender;
                this.e = e;
                //Thread t = new Thread(new ThreadStart(Veryfi));
                // t.Start();
            }
        }

        private void ClearToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (File.Exists(Root + "ErrorProgramRun.txt") || File.Exists(Root + "\\Run.txt"))
                {
                    //this.SetBoxText("Clearing...\n\n\n");
                    if (File.Exists(Root + "ErrorProgramRun.txt"))
                        File.Delete(Root + "\\ErrorProgramRun.txt");
                    if (File.Exists(Root + "\\Run.txt"))
                        File.Delete(Root + "\\Run.txt");
                    //this.SetBoxText("Finished.");

                }
            }
        }

        private void CheckBoxPredictHuristci_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {       //if (!DisableTemporarlyTimerUpdate)
                {
                    //RunInBackground();
                    /*     if (CheckBoxPredictHuristci.Checked)
                             RefrigtzDLL.ThinkingChess.PredictHeuristic = true;
                         else
                             RefrigtzDLL.ThinkingChess.PredictHeuristic = false;
                     */
                    //UpdateConfigurationTable();
                    //RunInFront();
                }
            }
        }

        private void ComboBoxMaxTree_SelectedIndexChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                ComboBoxMaxLevelText = ComboBoxMaxLevel.Text;
                //if (!DisableTemporarlyTimerUpdate)
                {
                    //RunInBackground();
                    //UpdateConfigurationTable();
                    //RunInFront();
                }

            }
        }

        private void RepairToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                int iii = 1, Max = 1;
                int t = DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;

                do
                {

                    if (System.IO.File.Exists(FormRefrigtz.Root + "\\Database\\Games\\CurrentBank" + Max.ToString() + ".accdb"))
                        Max++;

                    if (DateTime.Now.Second * 1000 + DateTime.Now.Millisecond - t > 2000) break;
                } while (true);
                ProgressBarVerify.Maximum = Max;
                do
                {
                    iii++;
                    try
                    {
                        ProgressBarVerify.Value = iii;
                        ProgressBarVerify.Update();
                    }
                    catch (Exception t6)
                    {
                        Log(t6);
                        ProgressBarVerify.Value = Max;
                        ProgressBarVerify.Update();

                    }
                    if (System.IO.File.Exists(FormRefrigtz.Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb"))
                    {
                        try
                        {
                            File.Copy(FormRefrigtz.Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb", Root + "\\CurrentBank.accdb");
                        }
                        catch (Exception t1)
                        {
                            Log(t1);
                        }
                        try
                        {
                            File.Delete(FormRefrigtz.Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb");
                        }
                        catch (Exception t2)
                        {
                            Log(t2);
                        }
                        try
                        {
                            CreateConfigurationTable();

                        }
                        catch (Exception t3)
                        {
                            Log(t3);
                        }
                        try
                        {
                            File.Copy(Root + "\\CurrentBank.accdb", FormRefrigtz.Root + "\\Database\\Games\\CurrentBank" + iii.ToString() + ".accdb");
                        }
                        catch (Exception t4)
                        {
                            Log(t4);
                        }
                        try
                        {
                            File.Delete(Root + "\\CurrentBank.accdb");
                        }
                        catch (Exception t5)
                        {
                            Log(t5);
                        }
                    }

                } while (iii < Max);


            }
        }

        private void ComboBoxAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {         //if (!DisableTemporarlyTimerUpdate)
                {
                    if (!Quantum)
                        RefrigtzDLL.AllDraw.SignAttack = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    else
                        QuantumRefrigiz.AllDraw.SignAttack = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    //RunInBackground();
                    //UpdateConfigurationTable();
                    //RunInFront();
                }

            }
        }

        private void ComboBoxObjectDangour_SelectedIndexChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        //if (!DisableTemporarlyTimerUpdate)
                {
                    if (!Quantum)
                        RefrigtzDLL.AllDraw.SignObjectDangour = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    else
                        QuantumRefrigiz.AllDraw.SignObjectDangour = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    //RunInBackground();
                    //UpdateConfigurationTable();
                    //RunInFront();
                }
            }
        }

        private void ComboBoxReducedAttacked_SelectedIndexChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {         //if (!DisableTemporarlyTimerUpdate)
                {
                    if (!Quantum)
                        RefrigtzDLL.AllDraw.SignReducedAttacked = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    else
                        QuantumRefrigiz.AllDraw.SignReducedAttacked = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    //RunInBackground();
                    //UpdateConfigurationTable();
                    //RunInFront();
                }
            }
        }

        private void ComboBoxSupport_SelectedIndexChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        //if (!DisableTemporarlyTimerUpdate)
                {
                    if (!Quantum)
                        RefrigtzDLL.AllDraw.SignSupport = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    else
                        QuantumRefrigiz.AllDraw.SignSupport = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    //RunInBackground();
                    //UpdateConfigurationTable();
                    //RunInFront();
                }
            }
        }

        private void ComboBoxHitting_SelectedIndexChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {       //if (!DisableTemporarlyTimerUpdate)
                {
                    if (!Quantum)
                        RefrigtzDLL.AllDraw.SignKiller = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    else
                        QuantumRefrigiz.AllDraw.SignKiller = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    //RunInBackground();
                    //UpdateConfigurationTable();
                    //RunInFront();
                }
            }
        }

        private void ComboBoxMovments_SelectedIndexChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {         //if (!DisableTemporarlyTimerUpdate)
                {
                    if (!Quantum)
                        RefrigtzDLL.AllDraw.SignMovments = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    else
                        QuantumRefrigiz.AllDraw.SignMovments = System.Convert.ToInt32(((ComboBox)(sender)).Text);
                    //RunInBackground();
                    //UpdateConfigurationTable();
                    //RunInFront();
                }
            }
        }

        private void ErrorOpenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                ErrorTrueMonitorFalse = true;
                //(new FormTXT()).Show();
            }
        }

        private void MonitorOpenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                ErrorTrueMonitorFalse = false;
                //(new FormTXT()).Show();

            }
        }

        private void ToolStripMenuItem7_Click(object sender, EventArgs e)
        {


        }

        private void Button1_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    folderBrowserDialogBackup.ShowDialog();
                    File.Copy(FormRefrigtz.Root + "\\Database\\CurrentBank.accdb", folderBrowserDialogBackup.SelectedPath + "\\CurrentBank.accdb");
                    File.Copy(FormRefrigtz.Root + "\\Database\\Monitor.html", folderBrowserDialogBackup.SelectedPath + "\\Monitor.html");
                    MessageBox.Show("Backup Finished.");
                }
                catch (Exception t)
                {
                    Log(t);
                    MessageBox.Show(t.ToString());
                }
            }
        }

        private void ToolStripMenuItem7_Click_1(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                GrayTimer = new Refrigtz.Timer(true);
                BrownTimer = new Refrigtz.Timer(true);
                GrayTimer.TimerInitiate("GrayTimer");
                BrownTimer.TimerInitiate("BrownTimer");
                BobSection = false;
                AliceSection = false;
                StateCP = true;
                StateCC = false;
                StateGe = false;
                ComboBoxMaxLevel.Text = "2";
                if (OrderPlate == 1 && Sec.RadioButtonGrayOrder.Checked)
                {
                    Person = true;
                    StateCP = true;
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (Sec.RadioButtonBrownOrder.Checked && OrderPlate == -1)
                {
                    Person = false;
                    StateCP = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                else
                {
                    StateCP = true;
                    Person = false;
                }
                //UpdateConfigurationTableVal = true;
                //UpdateConfigurationTable();
                AllDo = false;
            }
        }

        private void PictureBoxRefrigtz_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripMenuItem8_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                GrayTimer = new Refrigtz.Timer(true);
                BrownTimer = new Refrigtz.Timer(true);
                GrayTimer.TimerInitiate("GrayTimer");
                BrownTimer.TimerInitiate("BrownTimer");
                StateCC = true;
                if (OrderPlate == 1)
                {
                    BobSection = true;
                    AliceSection = false;
                    GrayTimer.StartTime("GrayTimer");
                }
                else
                {
                    BobSection = false;
                    AliceSection = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                //UpdateConfigurationTableVal = true;
                //UpdateConfigurationTable();
                AllDo = false;
            }
        }

        private void ButtonChangeArrangment_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (!Quantum)
                    RefrigtzDLL.AllDraw.DrawTable = false;
                else
                    QuantumRefrigiz.AllDraw.DrawTable = false;

                /*if (MovmentsNumber == 1)
                {
                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            Table[i, j] *= -1;
                        }
                    }


                    RefrigtzDLL.AllDraw.TableListAction.Clear();
                    RefrigtzDLL.AllDraw.TableListAction.Add(CloneATable(Table));
                    ArrangmentsChanged = !ArrangmentsChanged;
                    Draw = new RefrigtzDLL.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                    Draw.TableList.Clear();
                    Draw.TableList.Add(CloneATable(Table));
                    Draw.SetRowColumn(0);
                    UpdateConfigurationTableVal = true;
                    //UpdateConfigurationTable();

                    try
                    {
                        UpdateTable(CloneATable(Table), "Table00000000");
                    }
                    catch (Exception t)
                    {
                        Log(t);
                        InsertTableAtDatabase(Table);
                    }
                }


                SetPrictureBoxRefregitzUpdate(PictureBoxTimerBrown);
                SetPrictureBoxRefregitzInvalidate(PictureBoxTimerBrown);
                */
                //DisableTemporarlyTimerUpdate = false;

            }
        }

        private void PictureBoxTimerGray_Paint(object sender, PaintEventArgs e)
        {
            Object o = new Object();
            lock (o)
            {
                //UpadatTimer();
                if (GrayTimer.TextChanged)
                {
                    try
                    {
                        Image TimerImageGray = (Image)new Bitmap(PictureBoxTimerGray.Width, PictureBoxTimerGray.Height);
                        g1 = Graphics.FromImage(TimerImageGray);
                        g1.FillRectangle(new SolidBrush(Color.Gray), new Rectangle(new Point(0, 0), new Size(PictureBoxTimerGray.Width, PictureBoxTimerGray.Height)));
                        g1.DrawString(GrayTimer.ReturnTime(), new Font("Times New Roman", 30), new SolidBrush(Color.Black), new PointF(5, 5));
                        PictureBoxTimerGray.Image = TimerImageGray;
                        g1.Dispose();

                    }
                    catch (Exception t)
                    {
                        //PictureBoxTimerGray.Update();
                        // PictureBoxTimerGray.Invalidate();
                        //RunInFront();
                        Log(t);
                    }
                }

                PictureBoxTimerBrown.Invalidate();
                PictureBoxTimerBrown.Update();

                //PictureBoxRefrigtz.Invalidate();
                //PictureBoxRefrigtz.Update();

            }
        }
        void UpadatTimer()
        {

            Object O = new Object();
            lock (O)
            {
                //while (DisableTemporarlyTimerUpdate) ;
                {
                    try
                    {
                        // while (!TimersSet) ;

                        UpdateConfigurationTable();

                    }
                    catch (Exception t)
                    {
                        Log(t);
                    }
                }

            }
        }
        private void PictureBoxTimerBrown_Paint(object sender, PaintEventArgs e)
        {
            Object o = new Object();
            lock (o)
            {
                //UpadatTimer();

                if (BrownTimer.TextChanged)
                {
                    try
                    {
                        Image TimerImageBrown = (Image)new Bitmap(PictureBoxTimerBrown.Width, PictureBoxTimerBrown.Height);
                        g2 = Graphics.FromImage(TimerImageBrown);
                        g2.FillRectangle(new SolidBrush(Color.Brown), new Rectangle(new Point(0, 0), new Size(PictureBoxTimerBrown.Width, PictureBoxTimerBrown.Height)));
                        g2.DrawString(BrownTimer.ReturnTime(), new Font("Times New Roman", 30), new SolidBrush(Color.Black), new PointF(5, 5));
                        PictureBoxTimerBrown.Image = TimerImageBrown;
                        g2.Dispose();

                    }
                    catch (Exception t)
                    {
                        Log(t);
                        //PictureBoxTimerBrown.Update();
                        //PictureBoxTimerBrown.Invalidate();
                        //RunInFront();
                    }
                }

                //PictureBoxTimerGray.Invalidate();
                //PictureBoxTimerGray.Update();

                PictureBoxRefrigtz.Invalidate();
                PictureBoxRefrigtz.Update();


            }

        }
        private void ToolStripMenuItem9_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                ProfesionalWithComputer = true;
                ComboBoxMaxLevel.Text = "1";
                ComboBoxMaxLevel.Enabled = false;
                GrayTimer = new Refrigtz.Timer(true);
                BrownTimer = new Refrigtz.Timer(true);
                GrayTimer.TimerInitiate("GrayTimer");
                BrownTimer.TimerInitiate("BrownTimer");
                BobSection = false;
                AliceSection = false;
                StateCP = false;
                StateCC = false;
                StateGe = false;
                if (OrderPlate == 1)
                {
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (OrderPlate == -1)
                {
                    BrownTimer.StartTime("BrownTimer");
                }
                else
                {
                    Blitz = false;
                }
                Blitz = true;
                ///UpdateConfigurationTableVal = true;
                AllDo = false;
            }
        }

        private void ToolStripMenuItem10_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                Quantum = false;
                /*  AStarGreedyHeuristic = false;
                  CheckBoxAStarGreedyHeuristic.Checked = false;
                  UsePenaltyRegardMechnisam = false;
                  CheckBoxUsePenaltyRegradMechnisam.Checked = false;
                */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                    if (Sec.RadioButtonGrayOrder.Checked)
                        OrderPlate = 1;
                    else
                        OrderPlate = -1;
                }//AStarGreedyHeuristic = false;
                if (OrderPlate == 1)
                {
                    FullGame = true;
                    GrayTimer.StartTime("GrayTimer");

                }
                else if (OrderPlate == -1)
                {
                    FullGame = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                //UsePenaltyRegardMechnisam = false;
                PredictHeuristic = false;
                //TimerIniataite = true;
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "Refregitz";
                    label2.Text = "stockfish-8";

                }
                else
                {
                    label2.Text = "Refregitz";
                    label1.Text = "stockfish-8";
                }
                Stockfish = true;
                FullGame = true;
                Blitz = false;
                StateCC = true;

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;
                //BobSection = true;
                //RefregitzisCurrent = false;
            }
        }

        private void ToolStripMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripMenuItem11_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                UsePenaltyRegardMechnisam = false;
                UpdateConfigurationTable();
                GrayTimer = new Refrigtz.Timer(true);
                BrownTimer = new Refrigtz.Timer(true);
                GrayTimer.TimerInitiate("GrayTimer");
                BrownTimer.TimerInitiate("BrownTimer");
                BobSection = false;
                AliceSection = false;
                StateCP = false;
                StateCC = false;
                StateGe = false;
                ComboBoxMaxLevel.Text = "4";
                if (OrderPlate == 1)
                {
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (OrderPlate == -1)
                {
                    BrownTimer.StartTime("BrownTimer");
                }
                else
                {
                    Blitz = false;
                }
                Blitz = true;
                ///UpdateConfigurationTableVal = true;

                AllDo = false;
            }
        }

        private void ToolStripMenuItem12_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {          /*   AStarGreedyHeuristic = false;
               CheckBoxAStarGreedyHeuristic.Checked = false;
               UsePenaltyRegardMechnisam = false;
               CheckBoxUsePenaltyRegradMechnisam.Checked = false;
               */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                }
                //BobSection = false;
                //AliceSection = false;
                StateCP = true;
                StateCC = false;
                StateGe = false;
                FullGame = false;
                ComboBoxMaxLevel.Text = (PlatformHelper.ProcessorCount * 2 + 1).ToString();
                if (OrderPlate == 1)
                {
                    Blitz = true;
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (OrderPlate == -1)
                {
                    Blitz = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                else
                {
                    Blitz = false;
                }
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "You";
                    label2.Text = "Refregiz";

                }
                else
                {
                    label1.Text = "Refregiz";
                    label2.Text = "You";
                }

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;
            }
        }

        private void ToolStripMenuItem13_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        /*   AStarGreedyHeuristic = false;
               CheckBoxAStarGreedyHeuristic.Checked = false;
               UsePenaltyRegardMechnisam = false;
               CheckBoxUsePenaltyRegradMechnisam.Checked = false;
   */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                }
                //BobSection = false;
                //AliceSection = false;
                StateCP = true;
                StateCC = false;
                StateGe = false;
                Blitz = false;
                ComboBoxMaxLevel.Text = (PlatformHelper.ProcessorCount * 2 + 1).ToString();
                if (OrderPlate == 1)
                {
                    FullGame = true;
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (OrderPlate == -1)
                {
                    FullGame = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                else
                {
                    FullGame = false;
                }
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "You";
                    label2.Text = "Refregiz";

                }
                else
                {
                    label1.Text = "Refregiz";
                    label2.Text = "You";
                }

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();


                //UpdateConfigurationTableVal = true;

                MenueSelecte = true;
                UpdateConfigurationTable();

                AllDo = false;
            }
        }



        private void PictureBoxTimerBrown_Click(object sender, EventArgs e)
        {

        }

        private void PictureBoxTimerGray_Click(object sender, EventArgs e)
        {

        }

        private void FormRefrigtz_FormClosing(object sender, FormClosingEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (!ExitM)
                {
                    SetAllDrawKind();

                    //Set Configuration To True for some unknown reason!.
                    //UpdateConfigurationTableVal = true;                             
                    SetAllDrawKindString();
                    (new TakeRoot()).Save(FOUND, Quantum, this, ref LoadTree, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                }
            }
        }



        private void ToolStripMenuItem21_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                Quantum = true;
                /*  AStarGreedyHeuristic = false;
                  CheckBoxAStarGreedyHeuristic.Checked = false;
                  UsePenaltyRegardMechnisam = false;
                  CheckBoxUsePenaltyRegradMechnisam.Checked = false;
                  */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                }
                //TimerIniataite = true;
                //BobSection = false;
                //AliceSection = false;
                StateCP = true;
                StateCC = false;
                StateGe = false;

                ComboBoxMaxLevel.Text = (PlatformHelper.ProcessorCount).ToString();
                if (OrderPlate == 1)
                {
                    GrayTimer.StartTime("GrayTimer");

                    Blitz = true;
                }
                else if (OrderPlate == -1)
                {
                    BrownTimer.StartTime("BrownTimer");
                    Blitz = true;
                }
                else
                {
                    Blitz = false;
                }
                if (Sec.RadioButtonGrayOrder.Checked && OrderPlate == 1)
                    Person = true;
                else
                    if (Sec.RadioButtonBrownOrder.Checked && OrderPlate == -1)
                    Person = true;
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "You";
                    label2.Text = "Refregiz";

                }
                else
                {
                    label1.Text = "Refregiz";
                    label2.Text = "You";
                }
                if (MovmentsNumber == 1)
                {
                    DrawQ = new QuantumRefrigiz.AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFound, IInoreSelfObjects, UsePenaltyRegardMechnisam, BestMovments, PredictHeuristic, OnlySelf, AStarGreedyHeuristic, ArrangmentsChanged);
                    DrawQ.TableList.Clear();
                    DrawQ.TableList.Add(CloneATable(Table));
                    DrawQ.SetRowColumn(0);
                }
                else
                {
                    Thread arr = new Thread(new ThreadStart(SetDrawFound));
                    arr.Start();
                    arr.Join();

                }
                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;
                //MessageBox.Show("Reload Project For Quntum Rifrigitz!");
                ExitToolStripMenuItem_Click(new object(), new EventArgs());
            }
        }

        private void TextBoxText_TextChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                ((TextBox)sender).Refresh();
            }
        }

        private void BackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        //Timer.Start();
                do
                {
                    try
                    {
                        //tttt.Start();
                        //ttt.Start();
                        if (!AllDo)
                            AllDo = true;
                        AllOp();
                        if (EndOfGame)
                            return;
                        // AllOperate.Start();
                    }
                    catch (Exception t) { Log(t); }
                } while (true);
            }
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            /* Object O = new Object();
             lock (O)
             {
                 try
                 {
                     //tttt.Start();
                     //ttt.Start();
                     Thread arr = new Thread(new ThreadStart(SetRefregitzDLL));
                     arr.Start();
                     arr = new Thread(new ThreadStart(SetNodesCount));
                     arr.Start();
                     arr = new Thread(new ThreadStart(AllOp));
                     arr.Start();
                     // AllOperate.Start();
                 }
                 catch (Exception t) { Log(t); }

           }  */
        }

        private void TimerAllOperation_Tick(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    //AllOperations();
                }
                catch (Exception t)
                {
                    Log(t);
                }
            }
        }

        private void BackgroundWorkerSetNode_DoWork(object sender, DoWorkEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                do
                {
                    try
                    {
                        SetNodesCount();

                    }
                    catch (Exception t) { Log(t); }
                } while (true);
            }
        }

        private void BackgroundWorkerSetRefD_DoWork(object sender, DoWorkEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                do
                {
                    try
                    {
                        Object OOO = new Object();
                        lock (OOO)
                        {

                            //tttt.Start();
                            //ttt.Start();
                            //Thread t = new Thread(new ThreadStart(SetRefregitzDLL));
                            //t.Start();
                            //t.Join();
                            SetRefregitzDLL();
                            // AllOperate.Start();
                        }
                    }
                    catch (Exception t) { Log(t); }
                } while (true);
            }
        }

        private void BackgroundWorkerGrayTimer_DoWork(object sender, DoWorkEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    GrayTimer = new Refrigtz.Timer(false);

                    GrayTimer.TimerInitiate("GrayTimer");

                    do
                    {



                    } while (true);

                }
                catch (Exception t) { Log(t); }
            }
        }

        private void BackgroundWorkerBrownTimer_DoWork(object sender, DoWorkEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    BrownTimer = new Refrigtz.Timer(false);

                    BrownTimer.TimerInitiate("BrownTimer");


                    do
                    {



                    } while (true);

                }
                catch (Exception t) { Log(t); }
            }
        }

        private void BackgroundWorkerTimerText_DoWork(object sender, DoWorkEventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    TimerText = new Refrigtz.Timer(true);
                    TimerText.TimerInitiate("TimerText");
                    TimerText.StartTime("TimerText");



                    do
                    {



                    } while (true);

                }
                catch (Exception t) { Log(t); }
            }
        }

        private void ToolStripMenuItem22_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                Quantum = false;
                /*UsePenaltyRegardMechnisam = false;
                AStarGreedyHeuristic = false;
                CheckBoxAStarGreedyHeuristic.Checked = false;
                CheckBoxUsePenaltyRegradMechnisam.Checked = false;
              */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                    if (Sec.RadioButtonGrayOrder.Checked)
                        OrderPlate = 1;
                    else
                        OrderPlate = -1;
                }
                PredictHeuristic = false;
                //TimerIniataite = true;
                if (OrderPlate == 1)
                {
                    Blitz = true;
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (OrderPlate == -1)
                {
                    Blitz = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "Refregitz";
                    label2.Text = "SugR";

                }
                else
                {
                    label2.Text = "Refregitz";
                    label1.Text = "SugR";
                }

                Stockfish = true;
                Sugar = true;
                Blitz = true;
                StateCC = true;
                StateCP = false;
                StateGe = false;
                BobSection = true;
                if (!LoadTree)
                {
                    Thread arr = new Thread(new ThreadStart(SetDrawFound));
                    arr.Start();
                    arr.Join();

                }
                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;
                //Application.Exit();
            }
        }

        private void ToolStripMenuItem23_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                Quantum = false;
                /*    AStarGreedyHeuristic = false;
                    CheckBoxAStarGreedyHeuristic.Checked = false;
                    UsePenaltyRegardMechnisam = false;
                    CheckBoxUsePenaltyRegradMechnisam.Checked = false;
               */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                    if (Sec.RadioButtonGrayOrder.Checked)
                        OrderPlate = 1;
                    else
                        OrderPlate = -1;
                }//AStarGreedyHeuristic = false;
                if (OrderPlate == 1)
                {
                    FullGame = true;
                    GrayTimer.StartTime("GrayTimer");

                }
                else if (OrderPlate == -1)
                {
                    FullGame = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                //UsePenaltyRegardMechnisam = false;
                PredictHeuristic = false;
                //TimerIniataite = true;
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "Refregitz";
                    label2.Text = "SugR";

                }
                else
                {
                    label2.Text = "Refregitz";
                    label1.Text = "SugR";
                }
                Stockfish = true;
                Sugar = true;
                FullGame = true;
                Blitz = false;
                StateCC = true;

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;
                //Application.Exit();
                //BobSection = true;
                //RefregitzisCurrent = false;
            }
        }

        private void CheckBoxAStarGreedyHeuristic_CheckStateChanged(object sender, EventArgs e)
        {


        }
        void OptionChanged()
        {
            Object O = new Object();
            lock (O)
            {

                UpdateConfigurationTable();


                int i = AllDrawKind;
                DeleteSetAllDrawKindString();

                SetAllDrawKind();


                if (i != AllDrawKind)
                    OpTableZero(false);
            }
        }

        private void CheckBoxUsePenaltyRegradMechnisam_CheckStateChanged(object sender, EventArgs e)
        {
        }

        private void Button1_Click_1(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (AllOperate != null)
                    AllOperate.Abort();
                if (BackgroundWorkerSetRefD.WorkerSupportsCancellation)
                    BackgroundWorkerSetRefD.CancelAsync();
                if (BackgroundWorkerSetNode.WorkerSupportsCancellation)
                    BackgroundWorkerSetNode.CancelAsync();
                if (BackgroundWorkerAllOp.WorkerSupportsCancellation)
                    BackgroundWorkerAllOp.CancelAsync();
                GrayTimer.StopTime();
                BrownTimer.StopTime();

                PictureBoxTimerBrown.CancelAsync();
                PictureBoxTimerGray.CancelAsync();
                PictureBoxTimerGray.CancelAsync();
                bool finished = false;
                if (bookConn != null)
                {
                    UpdateConfigurationTable();
                    bookConn.Close();
                    //oleDbCmd.Dispose();
                    bookConn.Dispose();
                }
                do
                {
                    try
                    {
                        if (System.IO.File.Exists(Root + "\\Database\\CurrentBank.accdb"))
                            File.Delete(Root + "\\Database\\CurrentBank.accdb");

                        if (System.IO.File.Exists(Root + "\\Database\\Monitor.html"))
                            File.Delete(Root + "\\Database\\Monitor.html");

                        if (File.Exists("List.txt"))
                            File.Delete("List.txt");
                        try
                        {
                            if (File.Exists("output.txt"))
                                File.Delete("output.txt");
                        }
                        catch (Exception t) { Log(t); }
                        if (File.Exists("CodeLogEvent.txt"))

                            File.Delete("CodeLogEvent.txt");
                        if (File.Exists("ErrorProgramRun.txt"))
                            File.Delete("ErrorProgramRun.txt");
                        if (File.Exists("CodeLogEvent.txt"))
                            File.Delete("CodeLogEvent.txt");
                        finished = true;
                    }
                    //#pragma warning disable CS0168 // The variable 't' is declared but never used
                    catch (Exception t) { }
                    //#pragma warning restore CS0168 // The variable 't' is declared but never used
                } while (!finished);
                //SetBoxText("\n\rCleared!");
                //RefreshBoxText();
                Application.Exit();
            }
        }

        private void Button2_Click(object sender, EventArgs e)
        {

        }

        private void buttonViewTree_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                try
                {
                    FormTXT t = new FormTXT(Draw);
                    t.Show();
                }
                catch (Exception t) { Log(t); }
            }
        }

        private void TextBoxStatistic_TextChanged(object sender, EventArgs e)
        {

        }

        private void checkBoxDeeperthandeeper_CheckedChanged(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                if (checkBoxDeeperthandeeper.Checked)
                    Deeperthandeeper = true;
                else
                    Deeperthandeeper = false;

            }
        }
        void MoveGray()
        {
            int i = 0;
            bool Do = true;
            do
            {
                if (Quantum)
                    Do = MovementQuantum();
                else
                    Do = MovementRefrigitzDLL();

                if (!Quantum)
                {
                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                        i = 1;
                    if (i == 1)
                    {
                        if (RefrigtzDLL.AllDraw.MouseClick == 0)
                            Do = false;
                    }
                    if (RefrigtzDLL.AllDraw.MouseClick == 2 && (!Clicked))
                    {
                        i = 1;
                        RefrigtzDLL.AllDraw.MouseClick = 0;
                    }
                }
                else
                {
                    if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                        i = 1;
                    if (i == 1)
                    {
                        if (QuantumRefrigiz.AllDraw.MouseClick == 0)
                            Do = false;
                    }
                    if (QuantumRefrigiz.AllDraw.MouseClick == 2 && (!Clicked))
                    {
                        i = 1;
                        //QuantumRefrigiz.AllDraw.MouseClick = 0;
                    }
                }
            } while (Do);
        }
        private void backgroundWorkerMoveGray_DoWork(object sender, DoWorkEventArgs e)
        {
            MoveGray();
            OrderPlate *= -1;

            Thread arr = new Thread(new ThreadStart(SetDrawFound));
            arr.Start();
            arr.Join();

            OrderPlate *= -1;


        }
        void MoveBrown()
        {
            int i = 0;
            bool Do = true;
            do
            {
                if (Quantum)
                    Do = MovementQuantum();
                else
                    Do = MovementRefrigitzDLL();
                if (!Quantum)
                {
                    if (RefrigtzDLL.AllDraw.MouseClick == 2)
                        i = 1;
                    if (i == 1)
                    {
                        if (RefrigtzDLL.AllDraw.MouseClick == 0)
                            Do = false;
                    }

                }
                else
                {
                    if (QuantumRefrigiz.AllDraw.MouseClick == 2)
                        i = 1;
                    if (i == 1)
                    {
                        if (QuantumRefrigiz.AllDraw.MouseClick == 0)
                            Do = false;
                    }
                }
            } while (Do);
        }
        private void backgroundWorkerMoveBrown_DoWork(object sender, DoWorkEventArgs e)
        {
            MoveBrown();
            OrderPlate *= -1;

            Thread arr = new Thread(new ThreadStart(SetDrawFound));
            arr.Start();
            arr.Join();

            OrderPlate *= -1;

        }

        private void PictureBoxRefrigitz_Click(object sender, EventArgs e)
        {

        }

        private void PictureBox14_Click(object sender, EventArgs e)
        {

        }

        private void aboutHelpToolStripMenuItem_Click(object sender, EventArgs e)
        {

            Object O = new Object();
            lock (O)
            {
                (new AboutBoxFaraDars()).ShowDialog();
            }
        }

        private void ToolStripMenuItem14_Click(object sender, EventArgs e)
        {

            Object O = new Object();
            lock (O)
            {       /*  AStarGreedyHeuristic = false;
              CheckBoxAStarGreedyHeuristic.Checked = false;
              UsePenaltyRegardMechnisam = false;
              CheckBoxUsePenaltyRegradMechnisam.Checked = false;
              */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                }
                //BobSection = false;
                //AliceSection = false;
                StateCP = true;
                StateCC = false;
                StateGe = false;
                Blitz = false;
                ComboBoxMaxLevel.Text = (PlatformHelper.ProcessorCount).ToString();
                if (OrderPlate == 1)
                {
                    FullGame = true;
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (OrderPlate == -1)
                {
                    FullGame = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                else
                {
                    FullGame = false;
                }
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "You";
                    label2.Text = "Refregiz";

                }
                else
                {
                    label1.Text = "Refregiz";
                    label2.Text = "You";
                }

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;
            }
        }

        private void ButtonCalculateRootGray_Click(object sender, EventArgs e)
        {

        }

        private void PictureBox3_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripMenuItem15_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        /*AStarGreedyHeuristic = false;
            CheckBoxAStarGreedyHeuristic.Checked = false;
            UsePenaltyRegardMechnisam = false;
            CheckBoxUsePenaltyRegradMechnisam.Checked = false;
           */
                StateCP = false;
                StateGe = false;
                Blitz = false;
                StateCC = true;
                FullGame = true;
                GrayTimer = new Refrigtz.Timer(true);
                BrownTimer = new Refrigtz.Timer(true);
                GrayTimer.TimerInitiate("GrayTimer");
                BrownTimer.TimerInitiate("BrownTimer");
                ComboBoxMaxLevel.Text = (PlatformHelper.ProcessorCount * 2 + 1).ToString();
                if (OrderPlate == 1)
                {
                    //BobSection = true;
                    //AliceSection = false;
                    GrayTimer.StartTime("GrayTimer");
                }
                else
                {
                    //BobSection = false;
                    //AliceSection = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "Refregiz";
                    label2.Text = "Refregiz";

                }
                else
                {
                    label1.Text = "Refregiz";
                    label2.Text = "Refregiz";
                }

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                AllDo = false;
            }
        }

        private void ToolStripMenuItem16_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {         //UsePenaltyRegardMechnisam = false;
                      //TimerIniataite = true;
                label1.Text = "Refregitz";
                label2.Text = "stockfish-8";
                Stockfish = true;
                Blitz = true;
                StateCP = true;
                //BobSection = true;
                AllDo = false;
            }
        }

        private void ToolStripMenuItem17_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {        //UsePenaltyRegardMechnisam = true;
                     // CheckBoxUsePenaltyRegradMechnisam.Checked = true;
                     //TimerIniataite = true;
                label1.Text = "You";
                label2.Text = "stockfish-8";
                Stockfish = true;
                Person = true;
                StateCP = true;
                //BobSection = true;
                //PersonWithStockfish = true;

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();


                AllDo = false;
            }
        }

        private void ToolStripMenuItem18_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {      /*AStarGreedyHeuristic = false;
            CheckBoxAStarGreedyHeuristic.Checked = false;
            UsePenaltyRegardMechnisam = false;
            CheckBoxUsePenaltyRegradMechnisam.Checked = false;
         */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                }
                PredictHeuristic = false;
                //TimerIniataite = true;
                label1.Text = "Refregitz";
                label2.Text = "stockfish-8";
                Stockfish = true;
                FullGame = true;
                Blitz = false;
                StateCC = true;
                //BobSection = true;
                UsePenaltyRegardMechnisam = false;

                Thread arr = new Thread(new ThreadStart(SetDrawFound));
                arr.Start();
                arr.Join();

                AllDo = false;
            }
        }
        private void ToolStripMenuItem19_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {
                Quantum = false;
                /*  UsePenaltyRegardMechnisam = false;
                  AStarGreedyHeuristic = false;
                  CheckBoxAStarGreedyHeuristic.Checked = false;
                  CheckBoxUsePenaltyRegradMechnisam.Checked = false;
               */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");

                    if (Sec.RadioButtonGrayOrder.Checked)
                        OrderPlate = 1;
                    else
                        OrderPlate = -1;
                }
                PredictHeuristic = false;
                //TimerIniataite = true;
                if (OrderPlate == 1)
                {
                    Blitz = true;
                    GrayTimer.StartTime("GrayTimer");
                }
                else if (OrderPlate == -1)
                {
                    Blitz = true;
                    BrownTimer.StartTime("BrownTimer");
                }
                if (Sec.RadioButtonGrayOrder.Checked)
                {
                    label1.Text = "Refregitz";
                    label2.Text = "stockfish-8";

                }
                else
                {
                    label2.Text = "Refregitz";
                    label1.Text = "stockfish-8";
                }

                Stockfish = true;
                Blitz = true;
                StateCC = true;
                StateCP = false;
                StateGe = false;
                BobSection = true;
                if (!LoadTree)
                {
                    Thread arr = new Thread(new ThreadStart(SetDrawFound));
                    arr.Start();
                    arr.Join();

                }
                MenueSelecte = true;
                //UpdateConfigurationTableVal = true;
                UpdateConfigurationTable();
                AllDo = false;
            }

        }

        private void ToolStripMenuItem20_Click(object sender, EventArgs e)
        {
            Object O = new Object();
            lock (O)
            {/*AStarGreedyHeuristic = false;
            CheckBoxAStarGreedyHeuristic.Checked = false;
            UsePenaltyRegardMechnisam = false;
            CheckBoxUsePenaltyRegradMechnisam.Checked = false;
           */
                if (MovmentsNumber == 1)
                {
                    GrayTimer = new Refrigtz.Timer(true);
                    BrownTimer = new Refrigtz.Timer(true);
                    GrayTimer.TimerInitiate("GrayTimer");
                    BrownTimer.TimerInitiate("BrownTimer");
                }
                PredictHeuristic = false;
                //TimerIniataite = true;
                label1.Text = "Refregitz";
                label2.Text = "stockfish-8";
                Stockfish = true;
                Blitz = true;
                StateCC = true;
                //BobSection = true;
                UsePenaltyRegardMechnisam = false;
                if (!AllDrawLoad)
                {
                    Thread arr = new Thread(new ThreadStart(SetDrawFound));
                    arr.Start();
                    arr.Join();

                }
                AllDo = false;
            }

        }
    }
}
//End of Documentation.




