/*******************************************************************************************************************************************
 * Using Genetic Algorithm to produce new movment of repitativeloop conditions.*************RS**********************************************
 * *****************************************************************************************************************************************
 * Ramin Edjlal********************************************************************************************RS*****0.12**4**Managements and Cuation Programing**
 * The Loop Genetic Mechanism Stop Working*****************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Table List Genetic Loop Huristic Stop Working***********************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Program Stop Working************************************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * IndexOutOfBout Exeption*********************************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm Order Misleading**********************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Order Misleading.*******************************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm Failed by Adding Some New Things******************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * The Chess Sometimes Gone to Null Chromosome Row and Column**********************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Looping Algorithm*******************************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm Disabled Functions.*******************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm Misleading Movements By Alice.********************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm Misleading by Fault Movement By Alice.************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm could not find a Movements at Else of FindRowColumn Method By Bob.********************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm Not Work. Infinity Loop Due to Order By Bob.******************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm To Misleading Movements of Bob and Alice.*********************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm is legal but misleading By Alice.*****************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm Order MalFunction.********************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm Rules MalFunction.********************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Malfunction of Brown Order (Alice).No Chess Rules Identification By Genetic Algorithm*******************RS*****0.12**4**Managements and Cuation Programing**(+)
 * Genetic Algorithm MalFunction.**************************************************************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * No Logical Reason For Malfunction of NonRulements of Genetic Algorithm.*********************************RS*****0.12**4**Managements and Cuation Programing**(+)
 * No Logical Reason for Malfunction of Bob Soldier Attack Movements to go non enemy.**********************RS*****0.12**4**Managements and Cuation Programing**(+)
 * 1395/1/3************************************************************************************************RS*****0.12**4**Managements and Cuation Programing**(+:Sum(22))
 * Metric After Retrieve to Customer.*********************************************************************************************************
 * 530 Error To Attempt Convert Chess rules and Thinking Chess to dll.************************************************************************
 * DRE=E/(E+D)=155[163]/(155[163]+530)=155[163]/685[693]=0.226[0.23]**************************************************************************
 * DRE2=E1/(E1+E2)=155[163]/(155[163]+4[6])=0.97[0.96]****************************************************************************************
 * S'1=1.19***********************************************************************************************************************************
 * DRE3=E2/(E2+E3)=6/(6+4)=0.6****************************************************************************************************************
 * S'2=1.79***********************************************************************************************************************************
 * DRE4=E2/(E2+E3)=[6]/(6+11)=[0.35]**********************************************************************************************************
 * S'3=2.14***********************************************************************************************************************************
 * DRE5=E3/(E3+E4)=[11]/(11+7)=[0.61](For Level 1 of Learning Autamat:E4)*********************************************************************
 * S'4=2.75***********************************************************************************************************************************
 * Is=[(S-Sw)/(Sb-Sw)]*100=[([2.75]-[0.23])/(0.97-[0.23])]*100=([2.52]/[0.74])*100=[340.5]****************************************************
 * S=DRE+DRE2+DRE3+DRE4+DRE5=2.816************************************************************************************************************
 * Sb=0.97************************************************************************************************************************************
 * Sw=[0.23]**********************************************************************************************************************************
 * The Level of Calculating are Successful state of Execution program results.****************************************************************
 * DRE6=E4/(E4+E5)=([7]/(7+5))=[0.58]*********************************************************************************************************
 * S2=S1+DRE6=[2.75]+[0.58]=[3.74]************************************************************************************************************
 * Sb2=0.97***********************************************************************************************************************************
 * Sw2=[0.23]*********************************************************************************************************************************
 * Is2=[(S2-Sw2)/(Sb2-Sw2)]=[([3.74]-[0.23])/(0.97-[0.23])]*100=[3.51]/[0.74]=2.77*100=277****************************************************
 * Imp=[Is1-Is2]=340.5-277=63*****************************************************************************************************************
 * DRE7=E5/(E5+E6)=5/(5+8)=0.38***************************************************************************************************************
 * S3=S2+DRE7=3.74+0.38=4.12******************************************************************************************************************
 * Is3=[(S3-Sw3)/(Sb3-Sw3)]*100=[(4.12-0.23)/(0.97-0.23)]*100=[3.89/0.74]*100=525.67**********************************************************
 * Sw3=0.23***********************************************************************************************************************************
 * Sb3=0.97***********************************************************************************************************************************
 * Imp2=[Is2-Is3]=[277-525.67]=-248.67********************************************************************************************************
 * DRE8=E6/(E6+E7)=8/(8+3)=0.72***************************************************************************************************************
 * S4=S3+DRE8=4.12+0.72=4.84******************************************************************************************************************
 * Is4=[(S4-Sw4)/(Sb4-Sw4)]*100=[(3.4-0.23)/(0.97-0.23)]*100=[3.17/0.74]*100=428.38***********************************************************
 * Ipm3=[Is3-Is4]=660-428.38=-98.1************************************************************************************************************
 * DRE9=E7/(E7+E8)=3/(3+2)=0.6****************************************************************************************************************
 * S5=S4+DRE9=4.84+0.6=5.44*******************************************************************************************************************
 * Is5=[(S5-Sw5)/(Sb5-Sw5)]*100=[(6.44-0.23)/(0.97-0.23)]*100=[6.21/0.74]*100=839.18**********************************************************
 * Imp4=[Is4-Is5]=[758-839.18]*100=-81.18*****************************************************************************************************
 * DRE10=E8/(E8+E9)=2/(2+4)=0.34**************************************************************************************************************
 * S6=S5+DRE10=5.44+0.34=6.78*****************************************************************************************************************
 * Is6=[(S6-Sw6)/(Sb6-Sw6)]*100=[(6.78-0.23)/(0.97-0.23)]*100=[6.55/0.74]*100=885.13**********************************************************
 * Imp5=[Is5-Is6]=839.18-885.13=-45.95********************************************************************************************************
 * DRE11=E9/(E9+E10)=4/(4+7)=0.36*************************************************************************************************************
 * S7=S6+DRE11=5.78+0.44=7.14*****************************************************************************************************************
 * Is7=[(S7-Sw7)/(Sb7-Sw7)]*100=[(7.14-0.23)/(0.97-0.23]*100=[6.91/0.74]*100=933.78***********************************************************
 * Imp6=[Is6-Is7]=[885.13-933.78]=-48.65******************************************************************************************************
 * DRE12=E10/(E10+E11)=7/(7+51)=0.12**4**Managements and Cuation Programing*******************************************************************
 * S8=S7+DRE12=7.14+0.12=7.26*****************************************************************************************************************
 * Is8=[(S8-Sw8)/(Sb8-Sw8)]*100=[(7.26-0.12)/(0.97-0.12)]*100=[7.14/0.85]*100=840*************************************************************
 * Sw8=0.12**4**Managements and Cuation Programing********************************************************************************************
 * Sb8=0.97***********************************************************************************************************************************
 * Imp7=[Is7-Is8]=[840-933.78]=-93.78**********************************************************************************************************
 * DRE13=E11/(E11+E12))=51/(51+4)=0.92********************************************************************************************************
 * S9=S8+DRE13=7.26+0.92=8.18*****************************************************************************************************************
 * Is9=[(S9-Sw9)/(Sb9-Sw9)]*100=[(8.18-0.12)/(0.97-0.12]*100=[8.06/0.85]*100=948.23***********************************************************
 * Imp8=[Is8-Is9]=[840-948.23]=-107.77********************************************************************************************************
 * DRE14=E12+(E12+E13)=4/(4+4)=0.5************************************************************************************************************
 * S10=S9+DRE14=8.18+0.5=8.68*****************************************************************************************************************
 * Is10=[S10-Sw10)/(Sb10-Sw10)]*100==[(8.86-0.12)/(0.97-0.12)]*100=[8.74/0.85]*100=1028.23****************************************************
 * Imp9=[Is9-Is10]=[948.23-1028.23]=-80*******************************************************************************************************
 * DRE15=E13/(E13+E14)=4/(4+10)=0.28**********************************************************************************************************
 * S11=S10+DRE15=8.86+0.28=9.14***************************************************************************************************************
 * Is11=[(S11-Sw11)/(Sb11-Sw11)]*100=[(9.14-0.12)/(0.97-0.12)]*100=[9.02/0.85]*100=1061.17****************************************************
 * Imp10=[Is10-Is11]=[1028.23-1061.17]=-32.94*************************************************************************************************
 * DRE16=E14/(E14+E15)=10/(10+3)=0.77*********************************************************************************************************
 * S12=S11+DRE16=9.14+0.77=9.91***************************************************************************************************************
 * Is12=[(S12-Sw12)/(Sb12-Sw12)]*100=[(9.91-0.12)/(0.97-0.12)]*100=[9.79/0.85]*100=1151.76****************************************************
 * Imp11=[Is11-Is12]=[1061.17-1151.76]=-90.59*************************************************************************************************
 * DRE17=E15/(E15+E16)=3/(3+6)=0.34***********************************************************************************************************
 * S13=S12+DRE17=9.91+0.34=10.25**************************************************************************************************************
 * Is13=[(S13-Sw13)/(Sb13-Sw13)]*100=[(10.25-0.12)/(0.97-0.12)]*100=[10.13/0.85]*100=1191.76**************************************************
 * Imp12=[Is12-Is3]=[1151.76-1191.76]=-40*****************************************************************************************************
 * DRE18=E16/(E16+E17)=6/(6+2)=0.75***********************************************************************************************************
 * S14=S13+DRE18=0.75+10.25=11****************************************************************************************************************
 * Is14=[(S14-Sw14)/(Sb14-Sw14)]*100=[(11-0.12)/(0.97-0.12)]*100=[10.82/0.85]*100=1272.94*****************************************************
 * Imp13=[Is13-Is14]=[1191.76-1272.94]=-81.18*************************************************************************************************
 * DRE19=E17/(E17+E18)=2/(2+2)=0.5************************************************************************************************************
 * S15=S14+DRE19=11+0.5=11.5******************************************************************************************************************
 * Is15=[(S15-Sw15)/(Sb15-Sw15)]*100=[(11.5-0.12)/(0.97-0.12)]*100=[11.38/0.85]*100=1338.82***************************************************
 * Imp14=[Is14-Is15]=[1272.94-1338.82]=-65.88*************************************************************************************************
 * DErro1=(Ns/Na)*100=(20/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2)*100=(20/828)*100=(0.025)*100=2.5***********************************
 * *******************************************************************************************************************************************
 * DRE20=E18/(E18+E19)=2/(2+3)=0.4************************************************************************************************************
 * S16=S15+DRE20=11.5+0.4=11.9****************************************************************************************************************
 * Is16=[(S16-Sw16)/(Sb16-Sw16)]*100=[(11.9-0.12)/(0.97-0.12)]*100=[11.78/0.85]*100=1358.88***************************************************
 * Imp15=[Is15-Is16]=[1338.88-1358.82]=-19.94*************************************************************************************************
 * DErro2=(Ns/Na)*100=(21/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3)*100=(21/831)*100=(0.025)*100=2.5*********************************
 * DRE21=E19/(E19+E20)=3/(3+1)=0.75***********************************************************************************************************
 * S17=S16+DRE20=11.9+0.75=12.65**************************************************************************************************************
 * Is17=[(S17-Sw17)/(Sb17-Sw17)]*100=[(12.65-0.12)/(0.97-0.12)]*100=[(12.53/0.85)]*100=1474.12************************************************
 * Imp16=[Is16-Is17]=[1358.88-1474.12]=-115.24*************************************************************************************************
 * DError3=(Ns/Na)*100=(22/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1)*100=(22/832)*100=(0.025)*100=2.6******************************
 * DRE22=E20/(E20+E21)=1/(1+3)=1/4=0.25*******************************************************************************************************
 * S18=S17+DRE21=12.65+0.25=13****************************************************************************************************************
 * Is18=[(S18-Sw18)/(Sb18-Sw18)]*100=[(13-0.12)/(0.97-0.12)]*100=[12.88/0.85]*100=1515.29*****************************************************
 * Imp17=[Is17-Is18]=[1474.12-1515.29]=-0.97**************************************************************************************************
 * DError4=(Ns/Na)*100=(23/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3)*100=(23/835)*100=(0.028)*100=2.8****************************
 * DRE23=E21/(E21+E22)=1/(1+1)=0.5************************************************************************************************************
 * S19=S18+DRE23=13+0.5=13.5******************************************************************************************************************
 * Is19=[(S19-Sw19)/(Sb19-Sw19)]*100=[(13.5-0.12)/(0.97-0.12)]*100=[13.38/0.85]*100=1574.12***************************************************
 * Imp18=[Is18-Is19]=[1515.29-1574.12]=-58.33*************************************************************************************************
 * DError5=(Ns/Na)*100=(24/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1)*100=(24/836)*100=(0.029)*100=2.9**************************
 * DRE24=E22/(E22+E23)=1/(1+2)=0.33***********************************************************************************************************
 * S20=S19+DRE24=0.33+13.5=13.83**************************************************************************************************************
 * Is20=[(S20-Sw20)/(Sb20-Sw20)]*100=[(13.83-0.12)/(0.97-0.12)]*100=[13.71/0.85]*100=1612.94**************************************************
 * Imp19=[Is19-Is20]=[1574.12-1612.94]=-38.82*************************************************************************************************
 * DRerror6=(Ns/Na)*100=(25/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2)*100=(25/838)*100=(0.03)*100=3**************************
 * DRE25=E23/(E23+E24)=2/(2+2)=0.5************************************************************************************************************
 * S21=S20+DRE25=13.83+0.5=14.33**************************************************************************************************************
 * Is21=[(S21-Sw21)/(Sb21-Sw21)]*100=[(14.33-0.12)/(0.97-0.12)]*100=[14.21/0.85]*100=1671.77**************************************************
 * Imp20=[Is20-Is21]=[1612.94-1671.77]=-58.83*************************************************************************************************
 * DRerror26=(Ns/Na)*100=(26/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2)*100=(26/840)*100=(0.03)*100=3***********************
 * DRE26=E24/(E24+E25)=2/(2+1)=0.33***********************************************************************************************************
 * S22=S21+DRE26=14.33+0.33=14.66*************************************************************************************************************
 * Is22=[(S22-Sw22)/(Sb22-Sw22)]*100=[(14.66-0.12)/(0.97-0.12)]*100=[14.54/0.85]*100=1710.59**************************************************
 * Imp21=[Is21-Is22]=[1671.77-1710.59]=-38.82*************************************************************************************************
 * DRerror26=(Ns/Na)*100=(27/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1)*100=(27/841)*100=(0.032)*100=3.2******************
 * DRE27=E25/(E25+E26)=1/(1+1)=0.5************************************************************************************************************
 * S23=S22+DRE27=14.66+0.5=15.16**************************************************************************************************************
 * Is23=[(S23-Sw23)/(Sb23-Sw23)]*100=[(15.16-0.12)/(0.97-0.12)]*100=[15.04/0.85]*100=1769.41**************************************************
 * Imp22=[Is22-Is23]=[1710.59-1769.41]=-58.82*************************************************************************************************
 * DRerror26=(Ns/Na)*100=(28/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1)*100=(28/842)*100=(0.033)*100=3.3****************
 * DRE28=E26/(E26+E27)=1/(1+5)=0.17***********************************************************************************************************
 * S24=S23+DRE28=15.16+0.17=15.33*************************************************************************************************************
 * Is24=[(S24-Sw24)/(Sb24-Sw24)]*100=[(15.33-0.12)/(0.97-0.12)]*100=[15.11/0.85]*100=1777.65**************************************************
 * Imp23=[Is23-Is24]=[1769.41-1777.65]=-8.24**************************************************************************************************
 * DRerror26=(Ns/Na)*100=(29/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5)*100=(29/847)*100=3.4**************************
 * DRE29=E27/(E27+E28)=5/(5+2)=0.72***********************************************************************************************************
 * S25=S24+DRE29=15.33+0.29=16.05*************************************************************************************************************
 * Is25=[(S25-Sw25)/(Sb25-Sb25)]=[(16.05-0.12)/.(0.97-0.12)]*100=[15.93/0.85]*100=1874.12*****************************************************
 * Imp24=[Is24-Is25]=[1777.65-1874.12]=-96.47*************************************************************************************************
 * DRerror27=(Ns/Na)*100=(30/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5+2)*100=(30/849)*100=3.5************************
 * DRE30=E28/(E28+E29)=2/(2+4)=0.33***********************************************************************************************************
 * S26=S25+DRE30=16.05+0.33=16.83*************************************************************************************************************
 * Is26=[(S26-Sw26)/(Sb26-Sb26)]*100=[(16.83-0.12)/(0.97-0.12)]*100=[16.71/0.85]*100=1965.82**************************************************
 * Imp25=[Is25-Is26]=[1874.12-1965.82]=-91.7**************************************************************************************************
 * DRerror28=(Ns/Na)*100=(31/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5+2+4)*100=(31/853)*100=3.6**********************
 * DRE31=E29/(E29+E30)=4/(4+1)=0.80***********************************************************************************************************
 * S27=S26+DRE31=16.83+0.80=17.63*************************************************************************************************************
 * Is27=[(S27-Sw27)/(Sb27-Sb267)]*100=[(17.63-0.12)/(0.97-0.12)]*100=[17.51/0.85]*100=2060****************************************************
 * Imp27=[Is26-Is27]=[1965.82-2060]=-94.18****************************************************************************************************
 * DRerror28=(Ns/Na)*100=(32/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5+2+4+1)*100=(32/854)*100=3.7********************
 * DRE32=E30/(E30+E31)=2/(1+2)=0.67***********************************************************************************************************
 * S28=S27+DRE32=17.63+0.67=18.30*************************************************************************************************************
 * Is28=[(S28-Sw28)/(Sb28-Sb28)]*100=[(18.30-0.12)/(0.97-0.12)]*100=[18.18/0.85]*100=2138.82**************************************************
 * Imp28=[Is27-Is28]=[2060-2138.82]=-78.82****************************************************************************************************
 * DRerror28=(Ns/Na)*100=(33/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5+2+4+1+2)*100=(33/856)*100=3.9******************
 * DRE33=E31/(E31+E32)=5/(2+5)=0.71***********************************************************************************************************
 * S29=S28+DRE33=18.30+0.71=19.01*************************************************************************************************************
 * Is29=[(S29-Sw29)/(Sb29-Sb29)]*100=[(19.01-0.12)/(0.97-0.12)]*100=[18.89/0.85]*100=2222.35**************************************************
 * Imp29=[Is28-Is29]=[2138.82-2222.35]=-83.53*************************************************************************************************
 * DRerror29=(Ns/Na)*100=(34/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5+2+4+1+2+5)*100=(34/861)*100=3.9****************
 * DRE34=E32/(E32+E33)=4/(5+4)=0.44***********************************************************************************************************
 * S30=S29+DRE34=19.01+0.44=19.45*************************************************************************************************************
 * Is30=[(S30-Sw30)/(Sb30-Sb30)]*100=[(19.45-0.12)/(0.97-0.12)]*100=[19.33/0.85]*100=2274.11**************************************************
 * Imp30=[Is29-Is30]=[2222.35-2274.11]=-51.76*************************************************************************************************
 * DRerror30=(Ns/Na)*100=(35/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5+2+4+1+2+5+4)*100=(35/865)*100=4.0**************
 * DRE35=E33/(E33+E34)=5/(16+5)=0.24**********************************************************************************************************
 * S31=S30+DRE35=19.45+0.24=19.69*************************************************************************************************************
 * Is31=[(S31-Sw31)/(Sb31-Sb31)]*100=[(19.69-0.12)/(0.97-0.12)]*100=[19.57/0.85]*100=2302.35**************************************************
 * Imp31=[Is30-Is31]=[2274.11-2302.35]=-28.24*************************************************************************************************
 * DRerror31=(Ns/Na)*100=(36/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5+2+4+1+2+5+4+16)*100=(36/881)*100=4.0***********
 * DRE36=E34/(E34+E35)=16(2+16)=0.89**********************************************************************************************************
 * S32=S31+DRE36=19.69+0.89=20.58*************************************************************************************************************
 * Is32=[(S32-Sw32)/(Sb32-Sb32)]*100=[(20.58-0.12)/(0.97-0.12)]*100=[20.46/0.85]*100=2407.06**************************************************
 * Imp32=[Is31-Is32]=[2302.35-2407.06]=-104.71************************************************************************************************
 * DRerror31=(Ns/Na)*100=(37/[155+530+6+4+11+7+7+5+8+3+2+4+7+51+4+4+10+6+2+2+3+1+3+1+2+2+1+1+5+2+4+1+2+5+4+16+2)*100=(37/883)*100=4.0*********
 * *******************************************************************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.IO;
namespace RefrigtzW
{

    class ChessGeneticAlgorithm
    {
        //Initiate Global Variables.
        public bool MovementsAStarGreedyHuristicFoundT = false;
        public bool IgnoreSelfObjectsT = false;
        public bool UsePenaltyRegardMechnisamT = true;
        public bool BestMovmentsT = false;
        public bool PredictHuristicT = true;
        public bool OnlySelfT = false;
        public bool AStarGreedyHuristicT = false;
        bool ArrangmentsChanged = false;
        public bool BridgesKing = false;
        public static bool NoGameFounf = false;
        List<int[]> RowColumn = new List<int[]>();
        int Ki = 0;
        public int CromosomRow = -1, CromosomColumn = -1, CromosomRowHit = -1, CromosomColumnHit = -1;
        public int CromosomRowFirst = -1, CromosomColumnFirst = -1;
        int Gen1 = 0, Gen2 = 0;
        int[,] GeneticTable = new int[8, 8];
        static void Log(Exception ex)
        {
            try
            {
                string stackTrace = ex.ToString();
                File.AppendAllText(FormRefrigtz.Root + "\\ErrorProgramRun.txt", stackTrace + ": On" + DateTime.Now.ToString()); // path of file where stack trace will be stored.
            }
            catch (Exception t) { Log(t); }
        }
        //Constructor.
        public ChessGeneticAlgorithm(bool MovementsAStarGreedyHuristicTFou, bool IgnoreSelfObject, bool UsePenaltyRegardMechnisa, bool BestMovment, bool PredictHurist, bool OnlySel, bool AStarGreedyHuris, bool Arrangments)
        {
            MovementsAStarGreedyHuristicFoundT = MovementsAStarGreedyHuristicTFou;
            IgnoreSelfObjectsT = IgnoreSelfObject;
            UsePenaltyRegardMechnisamT = UsePenaltyRegardMechnisa;
            BestMovmentsT = BestMovment;
            PredictHuristicT = PredictHurist;
            OnlySelfT = OnlySel;
            AStarGreedyHuristicT = AStarGreedyHuris;
            ArrangmentsChanged = Arrangments;
            //Initiate Global Variables.
            RowColumn.Clear();
        }
        public bool FindHitToModified(int[,] Cromosom1, int[,] Cromosom2, List<int[,]> List, int Index, int Order, bool and)
        {
            bool Find = false;
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if (Order == 1 && Cromosom1[i, j] <= 0)
                        continue;
                    if (Order == -1 && Cromosom1[i, j] >= 0)
                        continue;
                    if (Order == 1)
                    {
                        if (Cromosom1[i, j] != Cromosom2[i, j])
                        {
                            if (Order == 1)
                            {
                                if (Cromosom1[i, j] > 0 && Cromosom2[i, j] < 0)
                                {
                                    CromosomRowHit = i;
                                    CromosomColumnHit = j;
                                    Find = true;
                                    break;
                                }
                            }
                            else
                            {
                                if (Cromosom1[i, j] < 0 && Cromosom2[i, j] > 0)
                                {
                                    CromosomRowHit = i;
                                    CromosomColumnHit = j;
                                    Find = true;
                                    break;
                                }

                            }
                        }
                    }

                }
                if (Find)
                    break;
            }
            return Find;
        }
        //Found of Different Home Gen in Tow Chess Home Table Method. 
        public bool FindGenToModified(int[,] Cromosom1, int[,] Cromosom2, List<int[,]> List, int Index, int Order, bool and)
        {
            ChessRules.SmallKingBridgeBrown = false;
            ChessRules.SmallKingBridgeGray = false;
            ChessRules.BigKingBridgeBrown = false;
            ChessRules.BigKingBridgeGray = false;
            //Initiate Local Variables.
            bool Find = false;
            int FindNumber = 0;
            bool Bri = false;

            //For All Table Home
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    //Gray Order.
                    if (Order == 1)
                    {
                        //Situation 11.
                        if (and)
                        {
                            //All The Brown Object Ignored.
                            if (Cromosom1[i, j] < 0 && Cromosom2[i, j] < 0)
                                continue;
                        }
                        else///Situation 2.
                        {
                            //All The Brown Ojects Ignored.
                            if (Cromosom1[i, j] < 0 || Cromosom2[i, j] < 0)
                                continue;
                        }
                    }
                    else//Brown Order.
                    {
                        //Situation 1.
                        if (and)
                        {
                            //All The Gray Objects Ignored.
                            if (Cromosom1[i, j] > 0 && Cromosom2[i, j] > 0)
                                continue;

                        }
                        else
                        {
                            //All The Gray Objects Ignored.
                            if (Cromosom1[i, j] > 0 || Cromosom2[i, j] > 0)
                                continue;
                        }
                    }
                    if (!ArrangmentsChanged)
                    {
                        {
                            if (Order == 1 && j == 6 && i > 0 && i < 7)
                            {
                                if (((Cromosom2[i, j + 1] > 0) || (Cromosom2[i + 1, j + 1] > 0 && Cromosom1[i + 1, j + 1] < 0) || (Cromosom2[i - 1, j + 1] > 0 && Cromosom1[i - 1, j + 1] < 0)) && Cromosom1[i, j] == 1)
                                {
                                    CromosomRowFirst = i;
                                    CromosomColumnFirst = j;
                                    if (Cromosom2[i, j + 1] > 0)
                                    {
                                        CromosomRow = i;
                                        CromosomColumn = j + 1;
                                    }
                                    else if (Cromosom2[i + 1, j + 1] > 0 && Cromosom1[i + 1, j + 1] < 0)
                                    {
                                        CromosomRow = i + 1;
                                        CromosomColumn = j + 1;
                                    }
                                    else if (Cromosom2[i - 1, j + 1] > 0 && Cromosom1[i - 1, j + 1] < 0)
                                    {
                                        CromosomRow = i - 1;
                                        CromosomColumn = j + 1;
                                    }
                                    Find = true;
                                    FindNumber++;
                                    AllDraw.SodierConversionOcuured = true;

                                }

                            }
                            else
                                if (Order == -1 && j == 1 && i > 0 && i < 7)
                                {
                                    if (((Cromosom2[i, j - 1] < 0) || (Cromosom2[i + 1, j - 1] < 0 && Cromosom1[i + 1, j - 1] > 0) || (Cromosom2[i - 1, j - 1] < 0 && Cromosom1[i - 1, j - 1] < 0)) && Cromosom1[i, j] == -1)
                                    {
                                        CromosomRowFirst = i;
                                        CromosomColumnFirst = j;
                                        if (Cromosom2[i, j - 1] > 0)
                                        {
                                            CromosomRow = i;
                                            CromosomColumn = j - 1;
                                        }
                                        else if (Cromosom2[i + 1, j - 1] > 0 && Cromosom1[i + 1, j - 1] < 0)
                                        {
                                            CromosomRow = i + 1;
                                            CromosomColumn = j - 1;
                                        }
                                        else if (Cromosom2[i - 1, j - 1] > 0 && Cromosom1[i - 1, j - 1] < 0)
                                        {
                                            CromosomRow = i - 1;
                                            CromosomColumn = j - 1;
                                        }
                                        FindNumber++;
                                        AllDraw.SodierConversionOcuured = true;
                                    }
                                }

                            //Bridges King Validity Condition.
                            if (Order == 1 && j == 0)
                            {
                                //Small Gray Bridges King.
                                if (i == 6 && Cromosom2[i, j] == 6 && Cromosom2[i + 1, j] == 4 && Cromosom1[i, j] != 6 && Cromosom1[i + 1, j] != 4)
                                {
                                    CromosomRowFirst = i - 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.SmallKingBridgeGray = true;
                                    Bri = true;
                                }
                                else //Big Briges King Gray.
                                    if (i == 3 && Cromosom2[i, j] == 4 && Cromosom2[i - 1, j] == 6 && Cromosom1[i, j] != 4 && Cromosom1[i - 1, j] != 6)
                                    {
                                        CromosomRowFirst = i + 3;
                                        CromosomColumnFirst = j;
                                        CromosomRow = i;
                                        CromosomColumn = j;
                                        Find = true;
                                        FindNumber++;
                                        ChessRules.BigKingBridgeGray = true;
                                        Bri = true;
                                    }

                            }
                            else if (j == 7)
                            {
                                //Small Bridges King Brown.
                                if (i == 6 && Cromosom2[i, j] == -6 && Cromosom2[i + 1, j] == -4 && Cromosom1[i, j] != -6 && Cromosom1[i + 1, j] != -4)
                                {
                                    CromosomRowFirst = i - 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.SmallKingBridgeBrown = true;
                                    Bri = true;
                                }
                                else//Big Bridges King Brown.
                                    if (i == 3 && Cromosom2[i, j] == -4 && Cromosom2[i - 1, j] == -6 && Cromosom1[i, j] != -4 && Cromosom1[i - 1, j] != -6)
                                    {
                                        CromosomRowFirst = i + 3;
                                        CromosomColumnFirst = j;
                                        CromosomRow = i;
                                        CromosomColumn = j;
                                        Find = true;
                                        FindNumber++;
                                        ChessRules.BigKingBridgeBrown = true;
                                        Bri = true;
                                    }

                            }

                        }
                    }
                    else
                    {
                        {
                            if (Order == 1 && j == 1 && i > 0 && i < 7)
                            {
                                if (((Cromosom2[i, j - 1] > 0) || (Cromosom2[i + 1, j - 1] > 0 && Cromosom1[i + 1, j - 1] < 0) || (Cromosom2[i - 1, j - 1] > 0 && Cromosom1[i - 1, j - 1] < 0)) && Cromosom1[i, j] == 1)
                                {
                                    CromosomRowFirst = i;
                                    CromosomColumnFirst = j;
                                    if (Cromosom2[i, j - 1] > 0)
                                    {
                                        CromosomRow = i;
                                        CromosomColumn = j - 1;
                                    }
                                    else if (Cromosom2[i + 1, j - 1] > 0 && Cromosom1[i + 1, j - 1] < 0)
                                    {
                                        CromosomRow = i + 1;
                                        CromosomColumn = j - 1;
                                    }
                                    else if (Cromosom2[i - 1, j - 1] > 0 && Cromosom1[i - 1, j - 1] < 0)
                                    {
                                        CromosomRow = i - 1;
                                        CromosomColumn = j - 1;
                                    }
                                    FindNumber++;
                                    AllDraw.SodierConversionOcuured = true;

                                }

                            }
                            else
                                if (Order == -1 && j == 6 && i > 0 && i < 7)
                                {
                                    if (((Cromosom2[i, j + 1] < 0) || (Cromosom2[i + 1, j + 1] < 0 && Cromosom1[i + 1, j + 1] > 0) || (Cromosom2[i - 1, j + 1] < 0 && Cromosom1[i - 1, j + 1] < 0)) && Cromosom1[i, j] == -1)
                                    {
                                        CromosomRowFirst = i;
                                        CromosomColumnFirst = j;
                                        if (Cromosom2[i, j + 1] > 0)
                                        {
                                            CromosomRow = i;
                                            CromosomColumn = j + 1;
                                        }
                                        else if (Cromosom2[i + 1, j + 1] > 0 && Cromosom1[i + 1, j + 1] < 0)
                                        {
                                            CromosomRow = i + 1;
                                            CromosomColumn = j + 1;
                                        }
                                        else if (Cromosom2[i - 1, j + 1] > 0 && Cromosom1[i - 1, j + 1] < 0)
                                        {
                                            CromosomRow = i - 1;
                                            CromosomColumn = j + 1;
                                        }
                                        Find = true;
                                        FindNumber++;
                                        AllDraw.SodierConversionOcuured = true;
                                    }
                                }

                            //Bridges King Validity Condition.
                            if (Order == 1 && j == 7)
                            {
                                //Small Gray Bridges King.
                                if (i == 6 && Cromosom2[i, j] == 6 && Cromosom2[i + 1, j] == 4 && Cromosom1[i, j] != 6 && Cromosom1[i + 1, j] != 4)
                                {
                                    CromosomRowFirst = i - 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.SmallKingBridgeGray = true;
                                    Bri = true;
                                }
                                else //Big Briges King Gray.
                                    if (i == 3 && Cromosom2[i, j] == 4 && Cromosom2[i - 1, j] == 6 && Cromosom1[i, j] != 4 && Cromosom1[i - 1, j] != 6)
                                    {
                                        CromosomRowFirst = i + 3;
                                        CromosomColumnFirst = j;
                                        CromosomRow = i;
                                        CromosomColumn = j;
                                        Find = true;
                                        FindNumber++;
                                        ChessRules.BigKingBridgeGray = true;
                                        Bri = true;
                                    }

                            }
                            else if (j == 0)
                            {
                                //Small Bridges King Brown.
                                if (i == 6 && Cromosom2[i, j] == -6 && Cromosom2[i + 1, j] == -4 && Cromosom1[i, j] != -6 && Cromosom1[i + 1, j] != -4)
                                {
                                    CromosomRowFirst = i - 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.SmallKingBridgeBrown = true;
                                    Bri = true;
                                }
                                else//Big Bridges King Brown.
                                    if (i == 3 && Cromosom2[i, j] == -4 && Cromosom2[i - 1, j] == -6 && Cromosom1[i, j] != -4 && Cromosom1[i - 1, j] != -6)
                                    {
                                        CromosomRowFirst = i + 3;
                                        CromosomColumnFirst = j;
                                        CromosomRow = i;
                                        CromosomColumn = j;
                                        Find = true;
                                        FindNumber++;
                                        ChessRules.BigKingBridgeBrown = true;
                                        Bri = true;
                                    }

                            }

                        }
                    }

                    //When To Same Location Tbles are Different in Gen.
                    if (Cromosom1[i, j] != Cromosom2[i, j])
                    {
                        //When Cromosom 2 is Empty.
                        if (Cromosom2[i, j] == 0)
                        {
                            //Initiate Location of Table.
                            CromosomRowFirst = i;
                            CromosomColumnFirst = j;
                            continue;
                        }
                        else
                        {
                            //Situation 1.
                            if (and)
                            {
                                //When Cromosom1 Current Location is Empty.
                                if (Cromosom1[i, j] == 0)
                                {
                                    //Initiate Location of Gen.
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    Ki = List[Index][CromosomRow, CromosomColumn];
                                    continue;
                                }
                            }

                        }
                        //Store Location of Gen and Calculate Gen Numbers.
                        CromosomRow = i;
                        CromosomColumn = j;
                        Find = true;
                        FindNumber++;
                        Ki = List[Index][CromosomRow, CromosomColumn];

                    }


                }
            }
            //If Gen Foundation is Valid. 
            if (((FindNumber == 1 || FindNumber == 2) && Find) || Bri || AllDraw.SodierConversionOcuured)
                return Find;
            //Gen Not Found.
            return false;
        }
        //Table Foundation of Genetic Alogorithm Method.
        public int[,] GenerateTable(List<int[,]> List, int Index, int Order)
        {
        //Initiate Local Variables.
        Begine5:
            RowColumn.Clear();
            int Store = Index;
            int[,] Cromosom1 = null;
            int[,] Cromosom2 = null;
            try
            {
                Cromosom1 = List[List.Count - 2];
                Cromosom2 = List[List.Count - 1];
            }
            catch (IndexOutOfRangeException t)
            {
                Log(t);
                return null;
            }

            Index = Store;
            //Found of Gen.
            if (!FindGenToModified(Cromosom1, Cromosom2, List, Index, Order, false))
                goto EndFindAThing;





            //Initiate Global Variables.
        BeginFind:
            Color color = Color.Gray;
            if (Order == -1)
                color = Color.Brown;
            try
            {
                //If Cromosom Location is Not Founded.
                if (CromosomRow == -1 && CromosomColumn == -1)
                {
                    //Initiayte Local Variables.
                    List.RemoveAt(List.Count - 1);
                    Index--;
                    goto Begine5;
                }
                //Found Kind Of Gen.
                Ki = List[List.Count - 1][CromosomRow, CromosomColumn];
                //Initiate Local Variables.
                GeneticTable = new int[8, 8];
                //If Gen Kind Not Found Retrun Not Valididity.
                if (List[List.Count - 1][CromosomRow, CromosomColumn] == 0)
                {
                    return null;
                }
                else
                {
                    //Clone a Copy.
                    for (int ii = 0; ii < 8; ii++)
                        for (int jj = 0; jj < 8; jj++)
                            GeneticTable[ii, jj] = List[List.Count - 1][ii, jj]; ;
                }
                //Initiate Global and Local Variables.
                color = Color.Gray;
                if (Order == -1)
                    color = Color.Brown;
                //For All Gens.
                for (Gen1 = 0; Gen1 < 8; Gen1++)
                    for (Gen2 = 0; Gen2 < 8; Gen2++)
                    {
                        //If Gen is Current Gen Location Continue Traversal Back.
                        if (Gen1 == CromosomRow && Gen2 == CromosomColumn)
                            continue;
                        //Rulement of Gen Movments.
                        if ((new ChessRules(MovementsAStarGreedyHuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHuristicT, OnlySelfT, AStarGreedyHuristicT, ArrangmentsChanged, GeneticTable[CromosomRow, CromosomColumn], GeneticTable, Order, CromosomRow, CromosomColumn)).Rules(CromosomRow, CromosomColumn, Gen1,
                        Gen2, color, GeneticTable[CromosomRow, CromosomColumn]))
                        {
                            //Initiate Global Variables and Syntax.
                            int[] A = new int[2];
                            A[0] = CromosomRow;
                            A[1] = CromosomColumn;
                            RowColumn.Add(A);
                            bool Hit = false;
                            if (GeneticTable[Gen1, Gen2] != 0)
                                Hit = true;


                            GeneticTable[Gen1, Gen2] = GeneticTable[CromosomRow, CromosomColumn];
                            GeneticTable[CromosomRow, CromosomColumn] = 0;
                            //Table Repeatative Consideration.
                            if (ThinkingChess.ExistTableInList(GeneticTable, List, 0))
                            {
                                GeneticTable[CromosomRow, CromosomColumn] = GeneticTable[Gen1, Gen2];
                                GeneticTable[Gen1, Gen2] = 0;
                                continue;

                            }
                            else
                            {
                                //Check Consideration.
                                if ((new ChessRules(MovementsAStarGreedyHuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHuristicT, OnlySelfT, AStarGreedyHuristicT, ArrangmentsChanged, GeneticTable[CromosomRow, CromosomRow], GeneticTable, Order, CromosomRow, CromosomColumn)).Check(GeneticTable, Order))
                                {
                                    GeneticTable[CromosomRow, CromosomColumn] = GeneticTable[Gen1, Gen2];
                                    GeneticTable[Gen1, Gen2] = 0;
                                    continue;
                                }

                                else
                                {

                                    //Return Genetic Table.
                                    return GeneticTable;
                                }

                            }
                        }


                    }
                //Initiate Try Catch.
                GeneticTable = null;
                int a = GeneticTable[0, 0];
            }

            catch (NullReferenceException t)
            {
                //Try Catch Expetion Handling of Not Successful Foundation of Gen.
                Log(t);
                if (Order == 1)
                    Ki = (new Random()).Next(1, 7);
                else
                    Ki = (new Random()).Next(1, 7) * -1;

                if (Order == 1)
                {
                    int Count = 0;
                    do
                    {
                        if (Ki < 6)
                            Ki++;
                        else
                            Ki = 1;
                        Count++;
                    } while (Count < 6 && !(new ChessRules(MovementsAStarGreedyHuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHuristicT, OnlySelfT, AStarGreedyHuristicT, ArrangmentsChanged, Ki, List[List.Count - 1], Order, CromosomRow, CromosomColumn)).FindAThing(List[List.Count - 1], ref CromosomRow, ref CromosomColumn, Ki, true, RowColumn));
                    if (Count >= 6)
                    {
                        NoGameFounf = true;
                        return null;
                    }


                }
                else
                {
                    int Count = 0;
                    do
                    {
                        if (Ki > -6)
                            Ki--;
                        else
                            Ki = -1;
                        Count++;
                    } while (Count < 6 && !(new ChessRules(MovementsAStarGreedyHuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHuristicT, OnlySelfT, AStarGreedyHuristicT, ArrangmentsChanged, Ki, List[List.Count - 1], Order, CromosomRow, CromosomColumn)).FindAThing(List[List.Count - 1], ref CromosomRow, ref CromosomColumn, Ki, true, RowColumn));
                    if (Count >= 6)
                    {
                        NoGameFounf = true;
                        return null;
                    }






                }

                goto BeginFind;
            }

        EndFindAThing:
            //Foudn of Some Samness Gen.
            if (Order == 1)
                Ki = (new Random()).Next(1, 7);
            else
                Ki = (new Random()).Next(1, 7) * -1;
            if (Order == 1)
            {
                int Count = 0;
                do
                {
                    if (Ki < 6)
                        Ki++;
                    else
                        Ki = 1;
                    Count++;
                } while (Count < 6 && !(new ChessRules(MovementsAStarGreedyHuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHuristicT, OnlySelfT, AStarGreedyHuristicT, ArrangmentsChanged, Ki, List[List.Count - 1], Order, CromosomRow, CromosomColumn)).FindAThing(List[List.Count - 1], ref CromosomRow, ref CromosomColumn, Ki, true, RowColumn));
                if (Count >= 6)
                    return null;

            }
            else
            {
                int Count = 0;
                do
                {
                    if (Ki > -6)
                        Ki--;
                    else
                        Ki = -1;
                    Count++;
                } while (Count < 6 && !(new ChessRules(MovementsAStarGreedyHuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHuristicT, OnlySelfT, AStarGreedyHuristicT, ArrangmentsChanged, Ki, List[List.Count - 1], Order, CromosomRow, CromosomColumn)).FindAThing(List[List.Count - 1], ref CromosomRow, ref CromosomColumn, Ki, true, RowColumn));
                if (Count >= 6)
                    return null;
            }

            goto BeginFind;


        }
    }
}
//End of Documentation.
